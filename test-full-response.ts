import { readFileSync } from 'fs';

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç LLM
async function testFullResponse() {
  const { InferenceClient } = await import('@huggingface/inference');
  const client = new InferenceClient(process.env.HF_TOKEN);
  
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM\n');
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π JSON –ø—Ä–æ–º–ø—Ç
  const prompt = `–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –æ–±—ä–µ–∫—Ç–æ–º:
{
  "encouragement": { "text": "–∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏" },
  "negative_part": { "additional_text": "—Ç–µ–∫—Å—Ç –ø—Ä–æ –Ω–µ–≥–∞—Ç–∏–≤ –∏–ª–∏ null" },
  "positive_part": { "additional_text": "—Ç–µ–∫—Å—Ç –ø—Ä–æ –ø–æ–∑–∏—Ç–∏–≤ –∏–ª–∏ null" },
  "feels_and_emotions": { "additional_text": "—Ç–µ–∫—Å—Ç –ø—Ä–æ —ç–º–æ—Ü–∏–∏ –∏–ª–∏ null" }
}

–í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥–∏ <think>, –ù–ï –ø–∏—à–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è. –¢–æ–ª—å–∫–æ JSON!`;

  console.log('üìù –ü—Ä–æ–º–ø—Ç:', prompt);
  console.log('\nü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é LLM...\n');
  
  const stream = client.chatCompletionStream({
    provider: 'novita',
    model: 'deepseek-ai/DeepSeek-R1-0528',
    messages: [
      {
        role: 'user',
        content: prompt,
      },
    ],
    parameters: {
      max_new_tokens: 500,
      temperature: 0.7,
      top_p: 0.9,
    },
  });

  let fullResponse = '';
  let chunkCount = 0;

  for await (const chunk of stream) {
    if (chunk.choices && chunk.choices[0]?.delta?.content) {
      const content = chunk.choices[0].delta.content;
      fullResponse += content;
      chunkCount++;
    }
  }

  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log('- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤:', chunkCount);
  console.log('- –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞:', fullResponse.length);
  console.log('\nüìù –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:');
  console.log(fullResponse);
  console.log('\n' + '='.repeat(80) + '\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ think —Ç–µ–≥–æ–≤
  if (fullResponse.includes('<think>')) {
    console.log('‚ö†Ô∏è –ú–æ–¥–µ–ª—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ <think> —Ç–µ–≥–∏!');
  }
  
  // –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å JSON
  const jsonMatch = fullResponse.match(/\{[\s\S]*\}/);
  if (jsonMatch) {
    console.log('üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π JSON:');
    console.log(jsonMatch[0]);
    
    try {
      const json = JSON.parse(jsonMatch[0]);
      console.log('\n‚úÖ JSON –≤–∞–ª–∏–¥–Ω—ã–π!');
      console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞:', Object.keys(json));
    } catch (e) {
      console.log('\n‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', e.message);
    }
  }
}

testFullResponse().catch(console.error);