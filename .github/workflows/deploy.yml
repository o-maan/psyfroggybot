name: Deploy to Digital Ocean

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç—ã –≤ CI
      # - name: Run tests (–µ—Å–ª–∏ –µ—Å—Ç—å)
      #   run: bun test

      - name: Notify Telegram - Start
        run: |
          bun scripts/notify-telegram.js start
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          port: ${{ secrets.DO_PORT }}
          script: |
            set -euo pipefail
            echo "üöÄ Starting deployment..."

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            source /etc/environment || true
            export PATH=$PATH:/usr/local/bin:/usr/bin:/var/www/.bun/bin

            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            mkdir -p /var/www/psy_froggy_bot
            cd /var/www/psy_froggy_bot

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ PM2
            which pm2 || echo "‚ùå PM2 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH: $PATH"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            if [ ! -d ".git" ]; then
              echo "üîß Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –∫–ª–æ–Ω–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ..."
              cd /var/www
              rm -rf psy_froggy_bot
              git clone https://github.com/o-maan/psy_froggy_bot.git psy_froggy_bot
              cd psy_froggy_bot
            else
              echo "‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω"
              # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
              if ! git status > /dev/null 2>&1; then
                echo "üîß Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –ø–µ—Ä–µ–∫–ª–æ–Ω–∏—Ä—É–µ–º..."
                cd /var/www
                rm -rf psy_froggy_bot
                git clone https://github.com/o-maan/psy_froggy_bot.git psy_froggy_bot
                cd psy_froggy_bot
              fi
            fi

            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            pm2 stop psy_froggy_bot || true

            # Backup –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ sudo)
            cp /var/www/databases/psy_froggy_bot/froggy.db /var/www/databases/psy_froggy_bot/froggy.db.backup.$(date +%Y%m%d_%H%M%S) || true

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
            git fetch origin
            git reset --hard origin/main

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            bun install --frozen-lockfile

            # –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π
            bun run knex migrate:latest --knexfile knexfile.cjs

            # –ö–æ–º–ø–∏–ª—è—Ü–∏—è TypeScript –≤ JavaScript
            bun run build

            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ PM2
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º -e –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
            set +e
            pm2 describe psy_froggy_bot > /dev/null 2>&1
            PM2_EXISTS=$?
            set -e

            if [ $PM2_EXISTS -eq 0 ]; then
              echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å..."
              pm2 restart psy_froggy_bot
            else
              echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å..."
              # pm2 start ecosystem.prod.config.cjs --name psy_froggy_bot
              pm2 start --interpreter ~/.bun/bin/bun src/bot.ts --name psy_froggy_bot
            fi

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é PM2
            pm2 save

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ Caddy (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            systemctl reload caddy || true

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            echo "üìä –°—Ç–∞—Ç—É—Å PM2:"
            pm2 status
            echo "üìä –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"
            pm2 describe psy_froggy_bot || true

            echo "‚úÖ Deployment completed!"

      - name: Trigger post-deploy check
        if: success()
        run: |
          sleep 10  # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞ –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
          curl -X POST https://invntrm.ru/webhook/deploy \
            --max-time 30 \
            || echo "‚ö†Ô∏è Webhook –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –Ω–æ –¥–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω"

      - name: Notify Telegram - Success
        if: success()
        run: |
          bun scripts/notify-telegram.js success
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Notify Telegram - Failure
        if: failure()
        run: |
          bun scripts/notify-telegram.js failure
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
