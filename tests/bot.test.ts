import { beforeAll, beforeEach, describe, expect, it, vi } from 'vitest';

// –û–±—â–∏–µ –º–æ–∫–∏ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const telegramCalls: any[] = [];
const replyCalls: any[] = [];

// –ú–æ–∫ telegraf
vi.mock('telegraf', () => {
  class TelegrafMock {
    public telegram: any;
    public __commands = new Map<string, Function>();
    public __actions: Array<{ re: RegExp; handler: Function }> = [];
    public __events = new Map<string, Function[]>();
    public __middlewares: Function[] = [];
    public static __lastInstance: any;

    constructor(_token: string) {
      this.telegram = {
        sendMessage: vi.fn((chatId: number, text: string, options?: any) => {
          telegramCalls.push({ method: 'sendMessage', chatId, text, options });
          return Promise.resolve({ message_id: Math.floor(Math.random() * 1000) });
        }),
        sendPhoto: vi.fn((chatId: number, photo: any, options?: any) => {
          telegramCalls.push({ method: 'sendPhoto', chatId, photo, options });
          return Promise.resolve({ message_id: Math.floor(Math.random() * 1000) });
        }),
        editMessageText: vi.fn((_chatId?: number, _messageId?: number, _inline?: any, _text?: string, _opts?: any) => {
          telegramCalls.push({ method: 'editMessageText' });
          return Promise.resolve({});
        }),
        setMessageReaction: vi.fn((_chatId: number, _messageId: number, _reactions: any) => {
          telegramCalls.push({ method: 'setMessageReaction' });
          return Promise.resolve();
        }),
        getChat: vi.fn((_id: number) => Promise.resolve({ id: _id, type: 'supergroup', title: 'Test Chat' })),
        getMe: vi.fn(() => Promise.resolve({ id: 999, is_bot: true })),
        getChatMember: vi.fn((_chatId: number, _userId: number) => Promise.resolve({ status: 'administrator' })),
      };
      (TelegrafMock as any).__lastInstance = this;
    }

    use(fn: Function) {
      this.__middlewares.push(fn);
    }
    command(name: string, handler: Function) {
      this.__commands.set(name, handler);
    }
    action(re: RegExp | string, handler: Function) {
      const rx = typeof re === 'string' ? new RegExp(`^${re}$`) : re;
      this.__actions.push({ re: rx, handler });
    }
    on(event: string, handler: Function) {
      const arr = this.__events.get(event) || [];
      arr.push(handler);
      this.__events.set(event, arr);
    }
    catch(_handler: Function) {}
    launch() {
      return Promise.resolve();
    }

    // –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏
    __emitCommand(name: string, ctx: any) {
      const h = this.__commands.get(name);
      if (!h) throw new Error(`Command handler not found: ${name}`);
      return h(ctx);
    }
    __emitAction(data: string, baseCtx: any) {
      const rec = this.__actions.find(a => a.re.test(data));
      if (!rec) throw new Error(`Action handler not found for: ${data}`);
      const ctx = { ...baseCtx, match: rec.re.exec(data), callbackQuery: { data, message: baseCtx.message } };
      return rec.handler(ctx);
    }
    __emitEvent(event: string, ctx: any) {
      const list = this.__events.get(event) || [];
      return Promise.all(list.map(h => h(ctx, () => Promise.resolve())));
    }
    stop() {
      return;
    }
  }
  return { Telegraf: TelegrafMock };
});

// –ú–æ–∫ express
const expressHandlers = new Map<string, Function>();
const expressMock: any = () => ({
  use: vi.fn(),
  all: vi.fn(),
  get: vi.fn((path: string, ...handlers: Function[]) => {
    const handler = handlers[handlers.length - 1];
    expressHandlers.set(`GET:${path}`, handler);
  }),
  post: vi.fn((path: string, ...handlers: Function[]) => {
    const handler = handlers[handlers.length - 1];
    expressHandlers.set(`POST:${path}`, handler);
  }),
  listen: vi.fn((_port: number, _host?: any, cb?: any) => {
    if (typeof _host === 'function') cb = _host;
    cb && cb();
    return { close: vi.fn() };
  }),
});
expressMock.json = () => (req: any, _res: any, next: any) => next();
expressMock.__handlers = expressHandlers;

vi.mock('express', () => ({ default: expressMock }));

// –ú–æ–∫ logger
vi.mock('../src/logger.ts', () => ({
  logger: { info: vi.fn(), error: vi.fn(), debug: vi.fn() },
  botLogger: { info: vi.fn(), error: vi.fn(), debug: vi.fn(), warn: vi.fn() },
  schedulerLogger: { info: vi.fn(), error: vi.fn(), debug: vi.fn(), warn: vi.fn() },
}));

// –ú–æ–∫ LLM
vi.mock('../src/llm.ts', () => ({
  generateUserResponse: vi.fn(() => Promise.resolve('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! ü§ç')),
  minimalTestLLM: vi.fn(() => Promise.resolve('Paris')),
}));

// –ú–æ–∫ Calendar
vi.mock('../src/calendar.ts', () => ({
  CalendarService: class {
    getToken = vi.fn(async () => ({}));
    getAuthUrl = vi.fn(() => 'https://example/auth');
    getEvents = vi.fn(async () => []);
    exchangeCodeForToken = vi.fn(async () => ({}));
  },
  formatCalendarEvents: () => '',
  getUserTodayEvents: vi.fn(async () => null),
}));

// –ú–æ–∫ Scheduler
const schedulerSpies: any = {};
vi.mock('../src/scheduler.ts', () => ({
  Scheduler: class {
    public CHANNEL_ID = -1002846400650;
    public reminderTimeouts = new Map<number, any>();
    constructor(_bot: any, _cal: any) {}
    isTestBot() {
      return true;
    }
    addUser = vi.fn();
    getCalendarService() {
      return { getAuthUrl: () => 'https://example/auth' };
    }
    sendInteractiveDailyMessage = vi.fn(async () => {});
    generateScheduledMessage = vi.fn(async () => '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    sendDailyMessage = vi.fn(async () => {});
    sendDailyMessagesToAll = vi.fn(async () => {});
    sendAngryPost = vi.fn(async () => {});
    getLastDailyRunTime = vi.fn(async () => new Date());
    getSchedulerStatus() {
      return {
        isRunning: true,
        isDailyRunning: true,
        isMorningRunning: true,
        description: '0 22 * * *',
        cronExpression: '0 22 * * *',
        timezone: 'Europe/Moscow',
        currentTime: '00:00',
        nextRunTime: '22:00',
        usersCount: 1,
        adminChatId: 1,
        usersList: [1],
      };
    }
    getChatId() {
      return -1002798126153;
    }
    getTargetUserId() {
      return 476561547;
    }
    setReminder = vi.fn();
    clearReminder = vi.fn();
    checkUsersResponses = vi.fn();
    getNextImage() {
      return 'images/IMG_5392.JPG';
    }
    getRandomSupportText() {
      return '–¢—ã –º–æ–ª–æ–¥–µ—Ü!';
    }
    destroy() {}
  },
}));

// –ú–æ–∫ DB
const dbSpies: any = {
  addUser: vi.fn(),
  updateUserName: vi.fn(),
  updateUserGender: vi.fn(),
  updateUserResponse: vi.fn(),
  saveMessage: vi.fn(),
  getLastUserToken: vi.fn(() => null),
  saveUserToken: vi.fn(),
  getRecentUnreadLogs: vi.fn(() => []),
  getRecentUnreadInfoLogs: vi.fn(() => []),
  getLogsCount: vi.fn(() => 0),
  getUnreadLogsCount: vi.fn(() => 0),
  getRecentLogsByLevel: vi.fn(() => []),
  getRecentLogs: vi.fn(() => []),
  getLogsStatistics: vi.fn(() => []),
  getAllUsers: vi.fn(() => []),
  getInteractivePost: vi.fn(() => ({
    message_data: { positive_part: { additional_text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å —Ö–æ—Ä–æ—à–∏–º' } },
    trophy_set: false,
  })),
  updateInteractivePostState: vi.fn(),
  updateTaskStatus: vi.fn(),
  setTrophyStatus: vi.fn(),
  markLogsAsRead: vi.fn(),
  markLogAsRead: vi.fn(),
  escapeHTML: (s: string) => s,
  db: { run: vi.fn(() => ({})), query: vi.fn(() => ({ get: () => undefined, all: () => [] })) },
};
vi.mock('../src/db.ts', () => dbSpies);

vi.mock('node-cron', () => ({ schedule: vi.fn((_expr: string, _fn: any) => ({ stop: vi.fn(), destroy: vi.fn() })) }));

// –ú–æ–∫ fs
vi.mock('fs', () => ({
  existsSync: vi.fn(() => true),
  mkdirSync: vi.fn(),
  writeFileSync: vi.fn(),
  unlinkSync: vi.fn(),
  createReadStream: vi.fn(() => ({
    pipe: vi.fn(),
    on: vi.fn((event: string, cb: Function) => {
      if (event === 'end') setTimeout(cb, 10);
      return this;
    }),
  })),
}));

function createCtx(overrides: any = {}) {
  const base = {
    message: { message_id: 1 },
    chat: { id: 476561547, type: 'private' },
    from: { id: 476561547, username: 'tester', is_bot: false },
    reply: vi.fn((text: string, options?: any) => {
      replyCalls.push({ text, options });
      return Promise.resolve({});
    }),
    replyWithDocument: vi.fn(() => Promise.resolve({})),
    replyWithPhoto: vi.fn(() => Promise.resolve({})),
    answerCbQuery: vi.fn(() => Promise.resolve()),
    editMessageText: vi.fn((text: string, options?: any) => {
      telegramCalls.push({ method: 'editMessageText', text, options });
      return Promise.resolve({});
    }),
    callbackQuery: undefined as any,
  };
  return Object.assign(base, overrides);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
let botModule: any;

describe('bot.ts –∫–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–ø–æ–∫—Ä—ã—Ç–∏–µ)', () => {
  beforeAll(async () => {
    process.env.IS_TEST_BOT = 'true';
    process.env.TELEGRAM_BOT_TOKEN = 'TEST_TOKEN';
    process.env.ADMIN_CHAT_ID = '476561547';
    process.env.ADMIN_KEY = 'test-admin-key';
    process.env.MAIN_USER_ID = '476561547';
    process.env.USER_ID = '476561547';
    process.env.TEST_USER_ID = '476561547';
    botModule = await import('../src/bot.ts');
  });

  beforeEach(() => {
    telegramCalls.length = 0;
    replyCalls.length = 0;
    Object.values(dbSpies).forEach((s: any) => typeof s.mock?.clear === 'function' && s.mock.clear());
    vi.clearAllMocks();
  });

  it('/ping –æ—Ç–≤–µ—á–∞–µ—Ç Pong', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('ping', createCtx());
    expect(replyCalls[0].text).toContain('Pong');
  });

  it('/start –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('start', createCtx());
    expect(dbSpies.addUser).toHaveBeenCalled();
  });

  it('/fro –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('fro', createCtx());
    expect(replyCalls.find(c => String(c.text).includes('–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ'))).toBeTruthy();
  });

  it('/test –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('test', createCtx());
    expect(replyCalls[0].text).toContain('–¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –°–û–û–ë–©–ï–ù–ò–Ø');
  });

  it('/status –¥–ª—è –∞–¥–º–∏–Ω–∞ –æ—Ç–≤–µ—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–º', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    const ctx = createCtx({ chat: { id: 476561547, type: 'private' } });
    await bot.__emitCommand('status', ctx);
    expect(replyCalls[0].text).toContain('–°–¢–ê–¢–£–° –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê');
  });

  it('/calendar –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å—Å—ã–ª–∫—É', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('calendar', createCtx());
    expect(replyCalls[0].text).toContain('–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é');
  });

  it('/check_access –æ—Ç–≤–µ—á–∞–µ—Ç –¥–µ—Ç–∞–ª—è–º–∏ –¥–æ—Å—Ç—É–ø–∞', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('check_access', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls[0].text).toContain('–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–æ—Ç–∞');
  });

  it('/test_now –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('test_now', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls.find(c => String(c.text).includes('–¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω'))).toBeTruthy();
  });

  it('–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ skip_schema –∏ pract_done —Ä–∞–±–æ—Ç–∞—é—Ç', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    const base = createCtx({ chat: { id: -1002798126153, type: 'supergroup' }, message: { message_id: 50 } });
    await bot.__emitAction('skip_schema_123', base);
    await bot.__emitAction('pract_done_123', base);
    expect(dbSpies.updateInteractivePostState).toHaveBeenCalled();
  });

  it('admin-–∫–æ–º–∞–Ω–¥—ã: last_run, ans, test_morning_check, angry, status', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    const adminCtx = createCtx({ chat: { id: 476561547, type: 'private' } });
    await bot.__emitCommand('last_run', adminCtx);
    await bot.__emitCommand('ans', adminCtx);
    await bot.__emitCommand('test_morning_check', adminCtx);
    await bot.__emitCommand('angry', adminCtx);
    await bot.__emitCommand('status', adminCtx);
    expect(replyCalls.length).toBeGreaterThan(0);
  });

  it('admin-–∫–æ–º–∞–Ω–¥—ã: check_posts, test_schedule, test_now', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    const adminCtx = createCtx({ chat: { id: 476561547, type: 'private' } });
    await bot.__emitCommand('check_posts', adminCtx);
    await bot.__emitCommand('test_schedule', adminCtx);
    await bot.__emitCommand('test_now', adminCtx);
    expect(replyCalls.find(c => String(c.text).includes('–¢–ï–°–¢ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê'))).toBeTruthy();
  });

  it('–∫–æ–º–∞–Ω–¥–∞ test_reminder –æ—Ç—Å—ã–ª–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('test_reminder', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls.find(c => String(c.text).includes('–¢–ï–°–¢ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø'))).toBeTruthy();
  });

  it('–∫–æ–º–∞–Ω–¥–∞ test_schema —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    const adminCtx = createCtx({ chat: { id: 476561547, type: 'private' } });
    await bot.__emitCommand('test_schema', adminCtx);
    expect(replyCalls.find(c => String(c.text).includes('–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞'))).toBeTruthy();
  });

  it('–∫–æ–º–∞–Ω–¥–∞ next_image –æ—Ç–≤–µ—á–∞–µ—Ç —Ñ–æ—Ç–æ', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('next_image', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(true).toBe(true);
  });

  it('–∫–æ–º–∞–Ω–¥–∞ fly1 –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('fly1', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(true).toBe(true);
  });

  it('–∫–æ–º–∞–Ω–¥–∞ test_reply –≤—ã–¥–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('test_reply', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls.find(c => String(c.text).includes('–¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–ô'))).toBeTruthy();
  });

  it('callback test_button_click —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('test_button', createCtx());
    // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π
    expect(replyCalls.find(c => String(c.text).includes('–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏'))).toBeTruthy();
  });

  it('–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    const ctx = createCtx({
      chat: { id: -1002798126153, type: 'supergroup' },
      message: { message_id: 10, text: '–ü—Ä–∏–≤–µ—Ç, –±–æ—Ç!' },
    });
    await bot.__emitEvent('text', ctx);
    // –ù–µ—Ç —Å—Ç—Ä–æ–≥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –≤–∞–∂–Ω–æ, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —É–ø–∞–ª
    expect(true).toBe(true);
  });
});

describe('bot.ts –∫–æ–º–∞–Ω–¥—ã –ª–æ–≥–æ–≤ (–ø–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ)', () => {
  beforeEach(() => {
    telegramCalls.length = 0;
    replyCalls.length = 0;
    Object.values(dbSpies).forEach((s: any) => typeof s.mock?.clear === 'function' && s.mock.clear());
  });

  it('/logs –±–µ–∑ –ª–æ–≥–æ–≤ –æ—Ç–≤–µ—á–∞–µ—Ç –ø—É—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    dbSpies.getRecentUnreadInfoLogs.mockReturnValue([]);
    await bot.__emitCommand('logs', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls[0].text).toContain('–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ INFO+ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
  });

  it('/logs —Å –ª–æ–≥–∞–º–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    const testLogs = [
      {
        id: 1,
        timestamp: new Date().toISOString(),
        level: 'error',
        message: '–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞',
        data: JSON.stringify({ error: 'test' }),
        is_read: false,
      },
      {
        id: 2,
        timestamp: new Date().toISOString(),
        level: 'info',
        message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        data: null,
        is_read: false,
      },
    ];
    dbSpies.getRecentUnreadInfoLogs.mockReturnValue(testLogs);
    dbSpies.getLogsCount.mockReturnValue(10);
    dbSpies.getUnreadLogsCount.mockReturnValue(2);
    
    await bot.__emitCommand('logs', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls[0].text).toContain('–õ–û–ì–ò –°–ò–°–¢–ï–ú–´');
    expect(replyCalls[0].text).toContain('–í—Å–µ–≥–æ: 10');
    expect(replyCalls[0].text).toContain('–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: 2');
  });

  it('/logs –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('logs', createCtx({ chat: { id: 12345, type: 'private' } }));
    expect(replyCalls[0].text).toContain('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
  });

  it('action logs_filter_menu –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    const ctx = createCtx({
      chat: { id: 476561547, type: 'private' },
      callbackQuery: { message: { message_id: 100 } }
    });
    await bot.__emitAction('logs_filter_menu', ctx);
    expect(telegramCalls.find(c => c.method === 'editMessageText')).toBeTruthy();
  });

  it('action logs_filter_all –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ª–æ–≥–∏', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    dbSpies.getRecentLogs.mockReturnValue([
      { id: 1, level: 'debug', message: 'Debug log', timestamp: new Date().toISOString(), is_read: false }
    ]);
    await bot.__emitAction('logs_filter_all', createCtx({ chat: { id: 476561547 } }));
    expect(dbSpies.getRecentLogs).toHaveBeenCalled();
  });

  it('action logs_filter_unread —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    dbSpies.getRecentUnreadLogs.mockReturnValue([]);
    await bot.__emitAction('logs_filter_unread', createCtx({ chat: { id: 476561547 } }));
    expect(dbSpies.getRecentUnreadLogs).toHaveBeenCalled();
  });

  it('action logs_filter_error –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    dbSpies.getRecentLogsByLevel.mockReturnValue([]);
    await bot.__emitAction('logs_filter_error', createCtx({ chat: { id: 476561547 } }));
    expect(dbSpies.getRecentLogsByLevel).toHaveBeenCalledWith('error', 7, 0);
  });

  it('action logs_mark_all_read –ø–æ–º–µ—á–∞–µ—Ç –≤—Å–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitAction('logs_mark_all_read', createCtx({ 
      chat: { id: 476561547 },
      callbackQuery: { message: { message_id: 100 } }
    }));
    expect(dbSpies.markLogsAsRead).toHaveBeenCalled();
  });

  it('action logs_download —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    const fs = await import('fs');
    dbSpies.getRecentLogs.mockReturnValue([
      { id: 1, level: 'info', message: 'Test', timestamp: new Date().toISOString() }
    ]);
    const ctx = createCtx({ 
      chat: { id: 476561547 },
      replyWithDocument: vi.fn(() => Promise.resolve({}))
    });
    await bot.__emitAction('logs_download_0_all', ctx);
    expect(fs.writeFileSync).toHaveBeenCalled();
    expect(ctx.replyWithDocument).toHaveBeenCalled();
  });

  it('action log_read —á–∏—Ç–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–æ–≥', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    const logData = {
      id: 123,
      timestamp: new Date().toISOString(),
      level: 'error',
      message: 'Detailed error message',
      data: JSON.stringify({ stack: 'Error stack trace' }),
      is_read: false,
    };
    dbSpies.db.query.mockReturnValue({
      get: () => logData,
      all: () => []
    });
    await bot.__emitAction('log_read_123', createCtx({ chat: { id: 476561547 } }));
    expect(dbSpies.markLogAsRead).toHaveBeenCalledWith(123);
  });

  it('action logs_stats –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    dbSpies.getLogsStatistics.mockReturnValue([
      { level: 'info', count: 50 },
      { level: 'error', count: 10 }
    ]);
    dbSpies.getLogsCount.mockReturnValue(60);
    await bot.__emitAction('logs_stats', createCtx({ chat: { id: 476561547 } }));
    expect(telegramCalls.find(c => c.method === 'editMessageText')).toBeTruthy();
  });

  it('action logs –Ω–∞–≤–∏–≥–∞—Ü–∏—è next/prev —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    dbSpies.getRecentLogs.mockReturnValue([]);
    const ctx1 = createCtx({ 
      chat: { id: 476561547 },
      callbackQuery: { message: { message_id: 100 } }
    });
    const ctx2 = createCtx({ 
      chat: { id: 476561547 },
      callbackQuery: { message: { message_id: 101 } }
    });
    await bot.__emitAction('logs_next_1_all', ctx1);
    await bot.__emitAction('logs_prev_1_all', ctx2);
    expect(dbSpies.getRecentLogs).toHaveBeenCalled();
  });
});

describe('bot.ts Express –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏', () => {
  beforeEach(() => {
    telegramCalls.length = 0;
    replyCalls.length = 0;
    Object.values(dbSpies).forEach((s: any) => typeof s.mock?.clear === 'function' && s.mock.clear());
  });

  it('GET /oauth2callback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π callback', async () => {
    const handler = expressHandlers.get('GET:/oauth2callback');
    expect(handler).toBeDefined();
    if (!handler) return;
    
    const req = {
      query: { code: 'test_code', state: '12345' }
    };
    const res = {
      send: vi.fn()
    };
    
    await handler(req, res);
    expect(res.send).toHaveBeenCalled();
    expect(telegramCalls.find(c => c.text?.includes('—É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω'))).toBeTruthy();
  });

  it('GET /oauth2callback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É', async () => {
    const handler = expressHandlers.get('GET:/oauth2callback');
    if (!handler) return;
    const req = { query: {} };
    const res = { send: vi.fn() };
    
    await handler(req, res);
    expect(res.send).toHaveBeenCalledWith(expect.stringContaining('–û—à–∏–±–∫–∞'));
  });

  it('POST /sendDailyMessage –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞', async () => {
    const handler = expressHandlers.get('POST:/sendDailyMessage');
    expect(handler).toBeDefined();
    if (!handler) return;
    
    const req = {
      body: { adminKey: process.env.ADMIN_KEY || 'test-key' }
    };
    const res = {
      json: vi.fn()
    };
    
    await handler(req, res);
    expect(res.json).toHaveBeenCalledWith({ success: true, message: expect.any(String) });
  });

  it('POST /sendDailyMessage –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á', async () => {
    const handler = expressHandlers.get('POST:/sendDailyMessage');
    if (!handler) return;
    const req = { body: { adminKey: 'wrong-key' } };
    const res = { status: vi.fn(() => res), json: vi.fn() };
    
    await handler(req, res);
    expect(res.status).toHaveBeenCalledWith(403);
  });

  it('GET /status –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞', async () => {
    const handler = expressHandlers.get('GET:/status');
    expect(handler).toBeDefined();
    if (!handler) return;
    
    const req = {};
    const res = { json: vi.fn() };
    
    await handler(req, res);
    expect(res.json).toHaveBeenCalledWith({ status: 'up' });
  });
});

describe('bot.ts –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ø–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ)', () => {
  beforeEach(() => {
    telegramCalls.length = 0;
    replyCalls.length = 0;
    Object.values(dbSpies).forEach((s: any) => typeof s.mock?.clear === 'function' && s.mock.clear());
  });

  it('/users –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω—É', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    dbSpies.getAllUsers.mockReturnValue([
      { chat_id: 123, username: 'user1', responded_today: 1 },
      { chat_id: 456, username: 'user2', responded_today: 0 }
    ]);
    await bot.__emitCommand('users', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls[0].text).toContain('–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –í –ë–ê–ó–ï');
    expect(replyCalls[0].text).toContain('user1');
  });

  it('/users –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('users', createCtx({ chat: { id: 12345, type: 'private' } }));
    expect(replyCalls[0].text).toContain('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
  });

  it('/check_config –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('check_config', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls[0].text).toContain('–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –£–¢–†–ï–ù–ù–ï–ô –ü–†–û–í–ï–†–ö–ò');
  });

  it('/test_busy —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    
    // –ú–æ–∫–∞–µ–º getEvents –¥–ª—è CalendarService
    const { CalendarService } = await import('../src/calendar.ts');
    CalendarService.prototype.getEvents = vi.fn(async () => [
      { summary: '–í—Å—Ç—Ä–µ—á–∞', start: { dateTime: new Date().toISOString() }, busy: true }
    ]);
    
    await bot.__emitCommand('test_busy', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls.find(c => c.text?.includes('—Ç–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–æ—Å—Ç–∏'))).toBeTruthy();
  });

  it('/test_tracking —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('test_tracking', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls[0].text).toContain('–¢–ï–°–¢ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø');
  });

  it('/minimalTestLLM —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç LLM', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('minimalTestLLM', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls.find(c => c.text?.includes('–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM'))).toBeTruthy();
  });

  it('/test_buttons —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('test_buttons', createCtx({ 
      chat: { id: 476561547, type: 'private' },
      message: { message_thread_id: 123 }
    }));
    expect(replyCalls[0].text).toContain('–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  });

  it('–∫–æ–º–∞–Ω–¥–∞ setname –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    
    const ctx = createCtx({ message: { text: '/setname –ò–≤–∞–Ω' } });
    await bot.__emitCommand('setname', ctx);
    expect(dbSpies.updateUserName).toHaveBeenCalledWith(476561547, '–ò–≤–∞–Ω');
  });

  it('/test_schema —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ö–µ–º—ã', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('test_schema', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls.find(c => c.text?.includes('–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞'))).toBeTruthy();
  });

  it('/last_run –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('last_run', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls[0].text).toContain('–ü–û–°–õ–ï–î–ù–Ø–Ø –†–ê–°–°–´–õ–ö–ê');
  });

  it('/ans –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('ans', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls[0].text).toContain('–ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π');
  });

  it('/test_morning_check –∑–∞–ø—É—Å–∫–∞–µ—Ç —É—Ç—Ä–µ–Ω–Ω—é—é –ø—Ä–æ–≤–µ—Ä–∫—É', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('test_morning_check', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls[0].text).toContain('–ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—É—é —É—Ç—Ä–µ–Ω–Ω—é—é –ø—Ä–æ–≤–µ—Ä–∫—É');
  });

  it('callback –∫–Ω–æ–ø–∫–∏ test_button –æ—Ç–≤–µ—á–∞—é—Ç', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    const ctx = createCtx();
    await bot.__emitAction('test_button_click', ctx);
    expect(ctx.answerCbQuery).toHaveBeenCalledWith('‚úÖ –ö–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
  });

  it('action skip_schema —Ä–∞–±–æ—Ç–∞–µ—Ç', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitAction('skip_schema_123', createCtx({ 
      chat: { id: -1002798126153 },
      message: { message_id: 50 },
      callbackQuery: { message: { message_id: 50 } }
    }));
    expect(dbSpies.updateInteractivePostState).toHaveBeenCalled();
  });

  it('–∫–æ–º–∞–Ω–¥–∞ remind —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('remind', createCtx());
    expect(replyCalls[0].text).toContain('–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ');
  });

  it('action daily_skip_all –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitAction('daily_skip_all', createCtx({
      chat: { id: 476561547 },
      callbackQuery: { message: { message_id: 50 } }
    }));
    expect(replyCalls.length).toBeGreaterThan(0);
  });

  it('action skip_neg –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitAction('skip_neg_123', createCtx({
      chat: { id: 476561547 },
      callbackQuery: { message: { message_id: 50 } }
    }));
    expect(replyCalls.length).toBeGreaterThan(0);
  });

  it('/fly –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    await bot.__emitCommand('fly', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls.find(c => c.text?.includes('–ª–µ—Ç–Ω–æ–µ'))).toBeTruthy();
  });
});

describe('bot.ts error paths –∏ edge cases', () => {
  beforeEach(() => {
    telegramCalls.length = 0;
    replyCalls.length = 0;
    Object.values(dbSpies).forEach((s: any) => typeof s.mock?.clear === 'function' && s.mock.clear());
  });

  it('–∫–æ–º–∞–Ω–¥–∞ —Å –æ—à–∏–±–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    dbSpies.addUser.mockRejectedValueOnce(new Error('Database error'));
    
    await bot.__emitCommand('start', createCtx());
    expect(replyCalls.find(c => c.text?.includes('–û—à–∏–±–∫–∞'))).toBeTruthy();
  });

  it('logs —Å –æ—à–∏–±–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    const testLogs = [{
      id: 1,
      timestamp: new Date().toISOString(),
      level: 'error',
      message: 'Test error',
      data: 'invalid json {',
      is_read: false,
    }];
    dbSpies.getRecentUnreadInfoLogs.mockReturnValue(testLogs);
    
    await bot.__emitCommand('logs', createCtx({ chat: { id: 476561547, type: 'private' } }));
    expect(replyCalls[0].text).toContain('–õ–û–ì–ò –°–ò–°–¢–ï–ú–´');
  });

  it('callback query –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    const ctx = createCtx({
      callbackQuery: { data: null }
    });
    
    // –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É
    expect(() => bot.__emitAction('', ctx)).toThrow();
  });

  it('–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    
    const commands = ['status', 'users', 'test_schedule', 'logs'];
    for (const cmd of commands) {
      await bot.__emitCommand(cmd, createCtx({ chat: { id: 999, type: 'private' } }));
      expect(replyCalls[replyCalls.length - 1].text).toContain('–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    }
  });

  it('–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –æ—Ç –±–æ—Ç–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è', async () => {
    const { Telegraf }: any = await import('telegraf');
    const bot = (Telegraf as any).__lastInstance;
    const ctx = createCtx({
      chat: { id: -1002798126153, type: 'supergroup' },
      message: { message_id: 10, text: 'Test' },
      from: { id: 999, is_bot: true }
    });
    
    await bot.__emitEvent('text', ctx);
    expect(replyCalls.length).toBe(0); // –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤
  });
});
