import { afterEach, beforeEach, describe, expect, it } from 'bun:test';
import { Scheduler } from '../src/scheduler';

describe('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤', () => {
  let scheduler: any;
  let mockBot: any;
  let sentMessages: any[] = [];

  beforeEach(() => {
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    sentMessages = [];

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è Telegram API
    mockBot = {
      telegram: {
        sendMessage: async (chatId: number, text: string, options: any) => {
          const message = { chatId, text, options, type: 'text' };
          sentMessages.push(message);
          return { message_id: Math.floor(Math.random() * 10000) };
        },
        sendPhoto: async (chatId: number, photo: any, options: any) => {
          const message = { chatId, photo, options, type: 'photo' };
          sentMessages.push(message);
          return { message_id: Math.floor(Math.random() * 10000) };
        },
      },
    };

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä scheduler
    scheduler = new Scheduler();
    scheduler.bot = mockBot;
    scheduler.CHANNEL_ID = -1002405993986;
    scheduler.CHAT_ID = -1002496122257;
    scheduler.users = new Set([5153477378]);
  });

  afterEach(() => {
    sentMessages = [];
  });

  describe('determineCurrentStep', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥', () => {
      // –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      expect(
        scheduler.determineCurrentStep({
          task1_completed: false,
          task2_completed: false,
          task3_completed: false,
        })
      ).toBe('waiting_negative');

      // –ü–µ—Ä–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      expect(
        scheduler.determineCurrentStep({
          task1_completed: true,
          task2_completed: false,
          task3_completed: false,
        })
      ).toBe('waiting_positive');

      // –î–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      expect(
        scheduler.determineCurrentStep({
          task1_completed: true,
          task2_completed: true,
          task3_completed: false,
        })
      ).toBe('waiting_practice');

      // –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      expect(
        scheduler.determineCurrentStep({
          task1_completed: true,
          task2_completed: true,
          task3_completed: true,
        })
      ).toBe('finished');
    });
  });

  describe('sendPendingResponse', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ö–µ–º—É —Ä–∞–∑–±–æ—Ä–∞ –¥–ª—è waiting_negative', async () => {
      const mockPost = {
        message_data: {
          negative_part: { additional_text: '–¢–µ—Å—Ç –Ω–µ–≥–∞—Ç–∏–≤' },
          positive_part: { additional_text: '–¢–µ—Å—Ç –ø–æ–∑–∏—Ç–∏–≤' },
        },
        relaxation_type: 'breathing',
      };

      await scheduler.sendPendingResponse(5153477378, mockPost, 'waiting_negative', -1002496122257, 1000);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      expect(sentMessages.length).toBe(1);

      const message = sentMessages[0];
      expect(message.type).toBe('text');
      expect(message.text).toBe(
        '–î–∞–≤–∞–π <b>—Ä–∞–∑–ª–æ–∂–∏–º</b> –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Å–∏—Ç—É–∞—Ü–∏—é <b>–ø–æ —Å—Ö–µ–º–µ</b>:\nüóì –¢—Ä–∏–≥–≥–µ—Ä - –ú—ã—Å–ª–∏ - –≠–º–æ—Ü–∏–∏ - –û—â—É—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ - –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∏–ª–∏ –∏–º–ø—É–ª—å—Å –∫ –¥–µ–π—Å—Ç–≤–∏—é'
      );
      expect(message.options.parse_mode).toBe('HTML');
    });

    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è waiting_positive', async () => {
      const mockPost = {
        relaxation_type: 'breathing',
      };

      await scheduler.sendPendingResponse(5153477378, mockPost, 'waiting_positive', -1002496122257, 1000);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      expect(sentMessages.length).toBe(1);

      const message = sentMessages[0];
      expect(message.type).toBe('text');
      expect(message.text).toContain('–£ –Ω–∞—Å –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥');
      expect(message.text).toContain('3. <b>–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</b>');
      expect(message.options.reply_markup.inline_keyboard).toBeDefined();
      expect(message.options.reply_markup.inline_keyboard.length).toBe(2);
    });

    it('–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ç–µ–ª–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ', async () => {
      const mockPost = {
        relaxation_type: 'body',
      };

      await scheduler.sendPendingResponse(5153477378, mockPost, 'waiting_positive', -1002496122257, 1000);

      const message = sentMessages[0];
      expect(message.text).toContain('3. <b>–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ç–µ–ª–∞</b>');
      expect(message.text).toContain('clck.ru/3LmcNv');
    });
  });

  describe('buildSecondPart', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è', () => {
      const messageData = {
        positive_part: {
          title: '–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏',
          additional_text: '–†–∞—Å—Å–∫–∞–∂–∏ –æ —á–µ–º-—Ç–æ —Ö–æ—Ä–æ—à–µ–º',
        },
      };

      const result = scheduler.buildSecondPart(messageData);

      expect(result).toContain('2. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b>');
      expect(result).toContain('–†–∞—Å—Å–∫–∞–∂–∏ –æ —á–µ–º-—Ç–æ —Ö–æ—Ä–æ—à–µ–º');
    });
  });

  describe('getRandomSupportText', () => {
    it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏', () => {
      const supportTexts = [
        '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è üíö',
        '–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è ü§ó',
        '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ üíõ',
        '–¢—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –ø—Ä–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å —ç—Ç–æ üå±',
        '–¢–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –≤–∞–∂–Ω—ã üíô',
        '–°–ª—ã—à—É —Ç–µ–±—è ü§ç',
        '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ üåø',
      ];

      const result = scheduler.getRandomSupportText();
      expect(supportTexts).toContain(result);
    });
  });

  describe('–ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–æ —Ñ–∏–Ω–∞–ª–∞', async () => {
      const mockPost = {
        channel_message_id: 1000,
        user_id: 5153477378,
        task1_completed: false,
        task2_completed: false,
        task3_completed: false,
        message_data: {
          negative_part: {
            title: '–í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π',
            additional_text: '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç',
          },
          positive_part: {
            title: '–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏',
            additional_text: '–ü–æ–¥–µ–ª–∏—Å—å —á–µ–º-—Ç–æ —Ö–æ—Ä–æ—à–∏–º',
          },
        },
        relaxation_type: 'breathing',
      };

      // –®–∞–≥ 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
      const step1 = scheduler.determineCurrentStep(mockPost);
      expect(step1).toBe('waiting_negative');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É —Ä–∞–∑–±–æ—Ä–∞ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
      await scheduler.sendPendingResponse(
        mockPost.user_id,
        mockPost,
        step1,
        -1002496122257,
        mockPost.channel_message_id
      );

      expect(sentMessages.length).toBe(1);
      expect(sentMessages[0].text).toBe(
        '–î–∞–≤–∞–π <b>—Ä–∞–∑–ª–æ–∂–∏–º</b> –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Å–∏—Ç—É–∞—Ü–∏—é <b>–ø–æ —Å—Ö–µ–º–µ</b>:\nüóì –¢—Ä–∏–≥–≥–µ—Ä - –ú—ã—Å–ª–∏ - –≠–º–æ—Ü–∏–∏ - –û—â—É—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ - –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∏–ª–∏ –∏–º–ø—É–ª—å—Å –∫ –¥–µ–π—Å—Ç–≤–∏—é'
      );

      // –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å—Ö–µ–º—É (—Å–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
      mockPost.task1_completed = true;
      const step2 = scheduler.determineCurrentStep(mockPost);
      expect(step2).toBe('waiting_positive');

      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      sentMessages = [];

      // –®–∞–≥ 3: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–ª—é—à–∫–∏ (—Å–∏–º—É–ª–∏—Ä—É–µ–º)
      mockPost.task2_completed = true;
      const step3 = scheduler.determineCurrentStep(mockPost);
      expect(step3).toBe('waiting_practice');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
      await scheduler.sendPendingResponse(
        mockPost.user_id,
        mockPost,
        'waiting_positive', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ –¥–ª—è sendPendingResponse
        -1002496122257,
        mockPost.channel_message_id
      );

      expect(sentMessages.length).toBe(1);
      expect(sentMessages[0].text).toContain('–£ –Ω–∞—Å –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥');
      expect(sentMessages[0].text).toContain('–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞');

      // –®–∞–≥ 4: –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      mockPost.task3_completed = true;
      const step4 = scheduler.determineCurrentStep(mockPost);
      expect(step4).toBe('finished');
    });
  });
});
