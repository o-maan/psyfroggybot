// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
// –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ–≤–µ—Ä—Ö –ª—é–±–æ–π –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞

import { Context } from 'telegraf';
import { trackUserMessage, trackBotMessage } from './interactive-tracker';
import { schedulerLogger } from './logger';

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
function detectMessageType(text: string, options?: any): string {
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
  if (text.includes('–î–∞–≤–∞–π —Ä–∞–∑–ª–æ–∂–∏–º —Å–∞–º—É—é –±–µ—Å–ø–æ–∫–æ—è—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ —Å—Ö–µ–º–µ')) {
    return 'schema';
  }
  
  if (text.includes('–£ –Ω–∞—Å –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥')) {
    return 'task3';
  }
  
  if (text.includes('–í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π') || text.includes('–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–∏—Ç—É–∞—Ü–∏–∏')) {
    return 'task1';
  }
  
  if (text.includes('–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏')) {
    return 'task2';
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
  if (options?.reply_markup?.inline_keyboard) {
    const buttons = options.reply_markup.inline_keyboard.flat();
    if (buttons.some((b: any) => b.callback_data?.includes('pract_'))) {
      return 'task3';
    }
    if (buttons.some((b: any) => b.callback_data?.includes('skip_task'))) {
      return 'task1';
    }
    if (buttons.some((b: any) => b.callback_data?.includes('skip_schema'))) {
      return 'schema';
    }
  }
  
  return 'other';
}

// Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –í–°–ï–• –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export async function trackIncomingMessage(ctx: Context, next: () => Promise<void>) {
  // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º ctx.reply –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
  if (ctx.reply && !(ctx.reply as any)._wrapped) {
    const originalReply = ctx.reply.bind(ctx);
    ctx.reply = async function(text: string, options?: any) {
      const result = await originalReply(text, options);
      
      try {
        const messageType = detectMessageType(text, options);
        const chatId = ctx.chat?.id || ctx.from?.id || 0;
        
        await trackBotMessage(
          result.message_id,
          chatId,
          messageType,
          options?.reply_to_message_id || ctx.message?.message_id
        );
        
        schedulerLogger.debug({
          messageId: result.message_id,
          chatId,
          messageType,
          method: 'ctx.reply'
        }, 'üì§ –û—Ç—Å–ª–µ–∂–µ–Ω–æ –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (ctx.reply)');
        
      } catch (error) {
        schedulerLogger.error({ error }, '–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ctx.reply');
      }
      
      return result;
    };
    (ctx.reply as any)._wrapped = true;
  }
  
  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (ctx.message && 'text' in ctx.message && ctx.from && !ctx.from.is_bot) {
    const messageId = ctx.message.message_id;
    const userId = ctx.from.id;
    const messageText = ctx.message.text;
    const replyToMessageId = ctx.message.reply_to_message?.message_id;
    const messageThreadId = (ctx.message as any).message_thread_id;
    
    try {
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const context = await trackUserMessage(
        userId,
        messageId,
        messageText,
        replyToMessageId,
        messageThreadId
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
      (ctx as any).dialogContext = context;
      
    } catch (error) {
      schedulerLogger.error({ error, messageId, userId }, '–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }
  
  return next();
}

// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è sendMessage —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –í–°–ï –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
export function wrapTelegramApi(bot: any) {
  const originalSendMessage = bot.telegram.sendMessage.bind(bot.telegram);
  const originalSendPhoto = bot.telegram.sendPhoto.bind(bot.telegram);
  const originalEditMessageText = bot.telegram.editMessageText.bind(bot.telegram);
  
  // –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const trackSendMessage = async function(chatId: number, text: string, options?: any) {
    const result = await originalSendMessage(chatId, text, options);
    
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
      const messageType = detectMessageType(text, options);
      const replyToMessageId = options?.reply_parameters?.message_id;
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
      await trackBotMessage(
        result.message_id,
        chatId,
        messageType,
        replyToMessageId
      );
      
      schedulerLogger.debug({
        messageId: result.message_id,
        chatId,
        messageType,
        textPreview: text.substring(0, 30)
      }, 'üì§ –û—Ç—Å–ª–µ–∂–µ–Ω–æ –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      
    } catch (error) {
      schedulerLogger.error({ error, messageId: result.message_id }, '–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
    
    return result;
  };
  
  // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º sendMessage
  bot.telegram.sendMessage = trackSendMessage;
  
  // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º sendPhoto
  bot.telegram.sendPhoto = async function(chatId: number, photo: any, options?: any) {
    const result = await originalSendPhoto(chatId, photo, options);
    
    try {
      // –§–æ—Ç–æ –æ–±—ã—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç
      await trackBotMessage(
        result.message_id,
        chatId,
        'channel_post',
        undefined,
        result.message_id // –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ channelMessageId
      );
      
    } catch (error) {
      schedulerLogger.error({ error, messageId: result.message_id }, '–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ');
    }
    
    return result;
  };
  
  // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º editMessageText
  bot.telegram.editMessageText = async function(chatId: any, messageId: any, inlineMessageId: any, text: string, options?: any) {
    // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–≤–∏–Ω—É—Ç—ã (Telegraf –∏–Ω–æ–≥–¥–∞ —Ç–∞–∫ –¥–µ–ª–∞–µ—Ç)
    if (typeof chatId === 'string' && !messageId && !inlineMessageId) {
      return originalEditMessageText(chatId, messageId, inlineMessageId, text, options);
    }
    
    const result = await originalEditMessageText(chatId, messageId, inlineMessageId, text, options);
    
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    return result;
  };
  
  return bot;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é
export async function getMessageContext(messageId: number, userId: number) {
  // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
  const { db } = await import('./db');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ message_links
  const linkQuery = db.query(`
    SELECT ml.*, ip.*
    FROM message_links ml
    JOIN interactive_posts ip ON ml.channel_message_id = ip.channel_message_id
    WHERE ml.message_id = ? AND (ml.user_id = ? OR ml.user_id = 0)
    ORDER BY ml.created_at DESC
    LIMIT 1
  `);
  
  const link = linkQuery.get(messageId, userId) as any;
  if (link) {
    return {
      post: link,
      messageType: link.message_type,
      channelMessageId: link.channel_message_id
    };
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
  const { getInteractivePostByUserMessage, getInteractivePostByBotMessage } = await import('./db');
  
  const postByUser = getInteractivePostByUserMessage(messageId);
  if (postByUser && postByUser.user_id === userId) {
    return {
      post: postByUser,
      messageType: 'user',
      channelMessageId: postByUser.channel_message_id
    };
  }
  
  const postByBot = getInteractivePostByBotMessage(messageId);
  if (postByBot) {
    return {
      post: postByBot,
      messageType: 'bot',
      channelMessageId: postByBot.channel_message_id
    };
  }
  
  return null;
}