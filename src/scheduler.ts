import fs, { readFileSync } from 'fs';
import * as cron from 'node-cron';
import path from 'path';
import { Telegraf } from 'telegraf';
import { CalendarService, formatCalendarEvents, getUserTodayEvents } from './calendar';
import {
  addUsedAngryExample,
  addUsedPromptExample,
  addUser,
  clearUserTokens,
  getAllUsers,
  getLastBotMessage,
  getLastUsedAngryExamples,
  getLastUsedPromptExamples,
  getLastUserMessage,
  getUserByChatId,
  getUserImageIndex,
  getUserMessagesSinceLastPost,
  getUserResponseStats,
  incrementAngryPostUserResponse,
  saveMessage,
  saveUserImageIndex,
} from './db';
import { generateFrogImage, generateMessage } from './llm';
import { botLogger, calendarLogger, databaseLogger, logger, schedulerLogger } from './logger';
import { cleanLLMText } from './utils/clean-llm-text';
import { extractJsonFromLLM } from './utils/extract-json-from-llm';
import { fixAlternativeJsonKeys } from './utils/fix-json-keys';
import { isLLMError } from './utils/llm-error-check';

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è HTML (Telegram)
function escapeHTML(text: string): string {
  return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}

export class Scheduler {
  private bot: Telegraf;
  private reminderTimeouts: Map<number, NodeJS.Timeout> = new Map();
  private users: Set<number> = new Set();
  private imageFiles: string[] = [];
  public readonly CHANNEL_ID = this.getChannelId();
  // –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π
  private readonly PRACTICE_VIDEO_PATH = 'assets/videos/breathing-practice-optimized.mp4';
  // –ü—É—Ç—å –∫ –ø—Ä–µ–≤—å—é –¥–ª—è –≤–∏–¥–µ–æ
  private readonly PRACTICE_VIDEO_THUMBNAIL_PATH = 'assets/videos/breathing-practice-thumbnail.jpg';
  // private readonly REMINDER_USER_ID = 5153477378; // –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–µ–ø–µ—Ä—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º chatId
  private calendarService: CalendarService;
  private dailyCronJob: cron.ScheduledTask | null = null;
  private morningCheckCronJob: cron.ScheduledTask | null = null;
  private morningMessageCronJob: cron.ScheduledTask | null = null;
  private testModeCheckTimeout: NodeJS.Timeout | null = null;
  // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
  private interactiveSessions: Map<
    number,
    {
      messageData: any;
      relaxationType: 'body' | 'breathing';
      currentStep: 'waiting_negative' | 'waiting_schema' | 'waiting_positive' | 'waiting_practice' | 'finished';
      startTime: string;
      messageId?: number;
      channelMessageId?: number; // ID –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ thread_id
      clarificationSent?: boolean;
      schemaRequested?: boolean;
      practiceCompleted?: boolean;
      practicePostponed?: boolean;
      postponedUntil?: number;
    }
  > = new Map();

  // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  private forwardedMessages: Map<number, number> = new Map(); // channelMessageId -> discussionMessageId

  constructor(bot: Telegraf, calendarService: CalendarService) {
    this.bot = bot;
    this.calendarService = calendarService;
    this.loadImages();
    this.loadUsers();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤
    this.initializeDailySchedule();
  }

  // –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  getCalendarService(): CalendarService {
    return this.calendarService;
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
  private async sendWithRetry(
    sendFunction: () => Promise<any>,
    context: {
      chatId?: number;
      messageType: string;
      retryData?: any; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      maxAttempts?: number; // –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
      intervalMs?: number; // –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
      onSuccess?: (result: any) => Promise<void>; // –ö–æ–ª–ª–±—ç–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    }
  ): Promise<any> {
    const maxAttempts = context.maxAttempts || 111; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 111 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const intervalMs = context.intervalMs || 60000; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–∏–Ω—É—Ç–∞
    let attempt = 1;

    // –¶–∏–∫–ª –ø–æ–ø—ã—Ç–æ–∫
    while (attempt <= maxAttempts) {
      // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é context –±–µ–∑ retryData –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ –±–ª–æ–∫–∞ try
      const { retryData, ...contextForLogging } = context;

      try {
        schedulerLogger.info(
          {
            ...contextForLogging,
            attempt,
            maxAttempts,
            intervalMs,
            // –ï—Å–ª–∏ –µ—Å—Ç—å retryData —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä
            ...(retryData?.generatedImageBuffer
              ? {
                  imageBufferSize: retryData.generatedImageBuffer.length,
                }
              : {}),
          },
          `üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${attempt}/${maxAttempts}`
        );

        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        const result = await sendFunction();

        // –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º contextForLogging –±–µ–∑ retryData
        schedulerLogger.info(
          {
            ...contextForLogging,
            attempt,
            totalAttempts: maxAttempts,
            // –ï—Å–ª–∏ –µ—Å—Ç—å retryData —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä
            ...(retryData?.generatedImageBuffer
              ? {
                  imageBufferSize: retryData.generatedImageBuffer.length,
                }
              : {}),
          },
          `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ø–æ–ø—ã—Ç–∫–∏ ${attempt}/${maxAttempts}`
        );

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–ª–ª–±—ç–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (context.onSuccess) {
          try {
            await context.onSuccess(result);
          } catch (callbackError) {
            schedulerLogger.error(
              {
                error: callbackError,
                ...context,
              },
              '–û—à–∏–±–∫–∞ –≤ –∫–æ–ª–ª–±—ç–∫–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏'
            );
          }
        }

        return result;
      } catch (error) {
        const err = error as Error;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–æ–π
        if (
          err.message.includes('502') ||
          err.message.includes('Bad Gateway') ||
          err.message.includes('Network') ||
          err.message.includes('Timeout') ||
          err.message.includes('ETELEGRAM') ||
          err.message.includes('ECONNRESET') ||
          err.message.includes('ETIMEDOUT') ||
          err.message.includes('ENOTFOUND')
        ) {
          schedulerLogger.warn(
            {
              ...contextForLogging,
              error: err.message,
              attempt,
              maxAttempts,
              nextDelayMs: intervalMs,
              // –ï—Å–ª–∏ –µ—Å—Ç—å retryData —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä
              ...(retryData?.generatedImageBuffer
                ? {
                    imageBufferSize: retryData.generatedImageBuffer.length,
                  }
                : {}),
            },
            `‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts}`
          );

          // –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏ - –∂–¥–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
          if (attempt < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, intervalMs));
            attempt++;
            continue;
          } else {
            // –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏
            schedulerLogger.error(
              {
                ...contextForLogging,
                totalAttempts: maxAttempts,
                // –ï—Å–ª–∏ –µ—Å—Ç—å retryData —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä
                ...(retryData?.generatedImageBuffer
                  ? {
                      imageBufferSize: retryData.generatedImageBuffer.length,
                    }
                  : {}),
              },
              '‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'
            );
            throw new Error(`–ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${err.message}`);
          }
        }

        // –ù–µ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
        schedulerLogger.error(
          {
            ...contextForLogging,
            error: err.message,
            attempt,
            // –ï—Å–ª–∏ –µ—Å—Ç—å retryData —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä
            ...(retryData?.generatedImageBuffer
              ? {
                  imageBufferSize: retryData.generatedImageBuffer.length,
                }
              : {}),
          },
          '–ù–µ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏'
        );
        throw error;
      }
    }

    // –ù–µ –¥–æ–ª–∂–Ω—ã —Å—é–¥–∞ –ø–æ–ø–∞—Å—Ç—å, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    throw new Error(`–ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è`);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  public getInteractiveSession(userId: number) {
    return this.interactiveSessions.get(userId);
  }

  // –£–¥–∞–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
  public deleteInteractiveSession(userId: number) {
    this.interactiveSessions.delete(userId);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
  public getBot() {
    return this.bot;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ LLM
  public async generateSimpleMessage(promptName: string, context: any): Promise<string> {
    try {
      const promptPath = path.join(__dirname, '..', 'assets', 'prompts', `${promptName}.md`);
      let prompt = readFileSync(promptPath, 'utf-8');

      // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ –ø—Ä–æ–º–ø—Ç–µ
      if (context.userName) {
        prompt = prompt.replace(/\{\{userName\}\}/g, context.userName);
      }
      if (context.gender) {
        prompt = prompt.replace(/\{\{gender\}\}/g, context.gender);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏
      prompt = `–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ö–û–†–û–¢–ö–ò–ú - –º–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö!\n\n${prompt}\n\n–ù–∞–ø–∏—à–∏ –ö–û–†–û–¢–ö–û–ï –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ (–Ω–µ –±–æ–ª–µ–µ 15 —Å–ª–æ–≤):`;

      schedulerLogger.info({ promptName, promptLength: prompt.length }, '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');

      const response = await generateMessage(prompt);

      // –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ <think>...</think> –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const cleanedResponse = extractJsonFromLLM(response);

      schedulerLogger.info(
        {
          promptName,
          responseLength: response.length,
          cleanedLength: cleanedResponse.length,
          response: cleanedResponse.substring(0, 100),
        },
        '–û—Ç–≤–µ—Ç –æ—Ç LLM –ø–æ–ª—É—á–µ–Ω'
      );

      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ "–û—Ç–ª–∏—á–Ω–æ", –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
      if (
        cleanedResponse.length < 20 ||
        cleanedResponse.length > 150 ||
        cleanedResponse.toLowerCase() === '–æ—Ç–ª–∏—á–Ω–æ' ||
        isLLMError(response, cleanedResponse)
      ) {
        throw new Error(`–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –æ—Ç LLM: ${cleanedResponse.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      }

      return cleanedResponse;
    } catch (error) {
      schedulerLogger.error({ error, promptName }, '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
      // Fallback —Å–æ–æ–±—â–µ–Ω–∏—è
      if (promptName === 'practice-completed') {
        const fallbacks = [
          '–¢—ã –º–æ–ª–æ–¥–µ—Ü! üåü –°–µ–≥–æ–¥–Ω—è –º—ã –æ—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –≤–º–µ—Å—Ç–µ.',
          '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üíö –¢—ã –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–µ–±–µ, –∏ —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ.',
          '–°—É–ø–µ—Ä! ‚ú® –ö–∞–∂–¥–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ.',
          '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! üåà –¢—ã —Å–¥–µ–ª–∞–ª –≤–∞–∂–Ω—ã–π —à–∞–≥ –¥–ª—è —Å–≤–æ–µ–≥–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è.',
          '–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è! üéØ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.',
          '–¢—ã –º–æ–ª–æ–¥–µ—Ü! üåô –ü–æ—Ä–∞ –æ—Ç–¥—ã—Ö–∞—Ç—å.',
          '–Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π! üí´ –¢—ã —Å–¥–µ–ª–∞–ª –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É.',
          '–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è.',
          '–ë—Ä–∞–≤–æ! üåø –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã.',
          '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! ‚≠ê –¢—ã –ø—Ä–æ—è–≤–∏–ª –∑–∞–±–æ—Ç—É –æ —Å–µ–±–µ.',
        ];
        return fallbacks[Math.floor(Math.random() * fallbacks.length)];
      }
      return '–û—Ç–ª–∏—á–Ω–æ! üëç';
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  saveForwardedMessage(channelMessageId: number, discussionMessageId: number) {
    this.forwardedMessages.set(channelMessageId, discussionMessageId);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –≤ –ë–î
    const { saveThreadMapping, isAngryPost, db } = require('./db');
    saveThreadMapping(channelMessageId, discussionMessageId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–ª—ã–º –ø–æ—Å—Ç–æ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º thread_id
    if (isAngryPost(channelMessageId)) {
      db.query('UPDATE angry_posts SET thread_id = ? WHERE channel_message_id = ?').run(
        discussionMessageId,
        channelMessageId
      );
      schedulerLogger.info(
        {
          channelMessageId,
          discussionMessageId,
        },
        'üò† –û–±–Ω–æ–≤–ª–µ–Ω thread_id –¥–ª—è –∑–ª–æ–≥–æ –ø–æ—Å—Ç–∞'
      );
    }

    schedulerLogger.debug(
      {
        channelMessageId,
        discussionMessageId,
      },
      '–°–æ—Ö—Ä–∞–Ω–µ–Ω ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
    );
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –∫–∞–Ω–∞–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
  private getChannelId(): number {
    if (this.isTestBot()) {
      // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
      return -1002846400650;
    }
    return Number(process.env.CHANNEL_ID || -1002405993986);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –±–æ—Ç —Ç–µ—Å—Ç–æ–≤—ã–º
  public isTestBot(): boolean {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è NODE_ENV –∏–ª–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É —Ñ–ª–∞–≥—É
    return process.env.NODE_ENV === 'test' || process.env.IS_TEST_BOT === 'true' || false;
  }

  // –ü–æ–ª—É—á–∏—Ç—å ID –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ env (fallback: USER_ID –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç)
  public getMainUserId(): number {
    return Number(process.env.MAIN_USER_ID || process.env.USER_ID || 5153477378);
  }

  // –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ env (fallback: –¥–µ—Ñ–æ–ª—Ç)
  public getTestUserId(): number {
    return Number(process.env.TEST_USER_ID || 476561547);
  }

  // –ü–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–æ—Ç–∞
  public getChatId(): number | null {
    if (this.isTestBot()) {
      // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É
      return -1002798126153;
    }
    return process.env.CHAT_ID ? Number(process.env.CHAT_ID) : null;
  }

  // –ü–æ–ª—É—á–∏—Ç—å ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
  public getTargetUserId(): number {
    if (this.isTestBot()) {
      // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ env
      return this.getTestUserId();
    }
    // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º MAIN_USER_ID/USER_ID
    return this.getMainUserId();
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  private loadImages() {
    const imagesDir = path.join(process.cwd(), 'images');
    const files = fs.readdirSync(imagesDir);
    this.imageFiles = files
      .filter(
        file =>
          file.toLowerCase().endsWith('.jpg') ||
          file.toLowerCase().endsWith('.jpeg') ||
          file.toLowerCase().endsWith('.png')
      )
      .map(file => path.join(imagesDir, file));

    logger.info({ imageCount: this.imageFiles.length }, `üñºÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.imageFiles.length} –∫–∞—Ä—Ç–∏–Ω–æ–∫`);
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  private loadUsers() {
    try {
      const users = getAllUsers();
      this.users.clear();
      for (const user of users) {
        this.users.add(user.chat_id);
      }
      logger.info({ usersCount: this.users.size }, `üöÄ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.users.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã`);
    } catch (e) {
      const error = e as Error;
      schedulerLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –∫—Ä—É–≥—É
  public getNextImage(chatId: number): string {
    const userImage = getUserImageIndex(chatId);
    let currentImageIndex = userImage ? userImage.image_index : 0;
    const image = this.imageFiles[currentImageIndex];
    // –£–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
    currentImageIndex = (currentImageIndex + 1) % this.imageFiles.length;
    saveUserImageIndex(chatId, currentImageIndex);
    return image;
  }

  // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
  addUser(chatId: number) {
    this.users.add(chatId);
    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)
    addUser(chatId, '');
    schedulerLogger.debug({ chatId }, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –≤—ã—Ö–æ–¥–Ω—ã–º (—Å—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
  private isWeekend(date: Date = new Date()): boolean {
    const dayOfWeek = date.getDay();
    return dayOfWeek === 0 || dayOfWeek === 6; // 0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 6 - —Å—É–±–±–æ—Ç–∞
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ LLM –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  private async detectUserBusy(events: any[]): Promise<{ probably_busy: boolean; busy_reason: string | null }> {
    try {
      const detectPrompt = readFileSync('assets/prompts/detect-busy.md', 'utf-8');

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
      let eventsDescription = '';
      if (events.length > 0) {
        eventsDescription = '–°–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Å–µ–≥–æ–¥–Ω—è:\n';
        events.forEach((event, index) => {
          eventsDescription += `${index + 1}. ${event.summary || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;

          // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
          if (event.start) {
            const startDate = new Date(event.start.dateTime || event.start.date);
            const endDate = event.end ? new Date(event.end.dateTime || event.end.date) : null;

            if (event.start.date && !event.start.dateTime) {
              eventsDescription += `   - –í–µ—Å—å –¥–µ–Ω—å\n`;
            } else {
              eventsDescription += `   - –í—Ä–µ–º—è: ${startDate.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit',
              })}`;
              if (endDate) {
                eventsDescription += ` - ${endDate.toLocaleTimeString('ru-RU', {
                  hour: '2-digit',
                  minute: '2-digit',
                })}`;
              }
              eventsDescription += '\n';
            }
          }

          // –°—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
          if (event.transparency) {
            eventsDescription += `   - –°—Ç–∞—Ç—É—Å: ${event.transparency === 'transparent' ? '–°–≤–æ–±–æ–¥–µ–Ω' : '–ó–∞–Ω—è—Ç'}\n`;
          }

          // –ú–µ—Å—Ç–æ
          if (event.location) {
            eventsDescription += `   - –ú–µ—Å—Ç–æ: ${event.location}\n`;
          }

          eventsDescription += '\n';
        });
      } else {
        eventsDescription = '–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ';
      }

      const fullPrompt = detectPrompt + '\n\n' + eventsDescription;

      let response = await generateMessage(fullPrompt);

      if (response === 'HF_JSON_ERROR') {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –∑–∞–Ω—è—Ç
        return { probably_busy: false, busy_reason: null };
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM
      const jsonResponse = extractJsonFromLLM(response);

      try {
        let result = JSON.parse(jsonResponse);

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ –æ—Ç –º–æ–¥–µ–ª–∏
        result = fixAlternativeJsonKeys(result, { source: 'detectUserBusy' });

        return {
          probably_busy: result.probably_busy || false,
          busy_reason: result.busy_reason || null,
        };
      } catch {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–µ –∑–∞–Ω—è—Ç
        return { probably_busy: false, busy_reason: null };
      }
    } catch (error) {
      schedulerLogger.error({ error }, '–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return { probably_busy: false, busy_reason: null };
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
  private buildScheduledMessageFromHF(json: any): string {
    schedulerLogger.info(
      {
        hasEncouragement: !!json?.encouragement,
        encouragementText: json?.encouragement?.text,
        encouragementLength: json?.encouragement?.text?.length || 0,
      },
      'üìù buildScheduledMessageFromHF: –æ–±—Ä–∞–±–æ—Ç–∫–∞ encouragement'
    );

    let n = 1;
    const parts: string[] = [];
    // –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–µ–∫—Å—Ç
    parts.push(`<i>${escapeHTML(json.encouragement.text)}</i>`);

    // 1. –í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π (—Ä–∞–Ω–¥–æ–º–Ω–æ)
    const showNegative = Math.random() < 0.5;
    if (showNegative) {
      let block = `${n++}. <b>–í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π</b> (—Å–∏—Ç—É–∞—Ü–∏—è+—ç–º–æ—Ü–∏—è)`;
      parts.push(block);
    }

    // 2. –ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏ (–±–µ–∑ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –ø—É–Ω–∫—Ç–æ–º)
    let plushki = `${n++}. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b> (—Å–∏—Ç—É–∞—Ü–∏—è+—ç–º–æ—Ü–∏—è)`;
    parts.push(plushki);

    // 3. –ß—É–≤—Å—Ç–≤–∞ –∏ —ç–º–æ—Ü–∏–∏
    // let feels = `${n++}. –ö–∞–∫–∏–µ <b>—á—É–≤—Å—Ç–≤–∞</b> –∏ <b>—ç–º–æ—Ü–∏–∏</b> —Å–µ–≥–æ–¥–Ω—è –∏—Å–ø—ã—Ç—ã–≤–∞–ª?`;
    // if (json.feels_and_emotions?.additional_text) {
    //   feels += `\n<blockquote>${escapeHTML(json.feels_and_emotions.additional_text)}</blockquote>`;
    // }
    // parts.push(feels);

    // 4. –†–µ–π—Ç–∏–Ω–≥ –¥–Ω—è
    // parts.push(`${n++}. <b>–†–µ–π—Ç–∏–Ω–≥ –¥–Ω—è</b>: –æ—Ç 1 –¥–æ 10`);

    // 3. –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ç–µ–ª–∞ –∏–ª–∏ –î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ (—Ä–∞–Ω–¥–æ–º–Ω–æ)
    // TODO: –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ç–µ–ª–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É
    // if (Math.random() < 0.5) {
    //   parts.push(`${n++}. <b>–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ç–µ–ª–∞</b>\n–û—Ç –ò—Ä–∏–Ω—ã üëâüèª clck.ru/3LmcNv üëàüèª –∏–ª–∏ —Å–≤–æ–µ`);
    // } else {
    parts.push(`${n++}. <b>–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</b>`);
    // }

    return parts.filter(Boolean).join('\n\n').trim();
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  private async buildInteractiveMessage(json: any): Promise<{
    firstPart: string;
    messageData: any;
    relaxationType: 'body' | 'breathing';
  }> {
    // –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ <think>...</think>
    if (json.encouragement?.text) {
      schedulerLogger.info(
        {
          encouragementBefore: json.encouragement.text,
          encouragementLength: json.encouragement.text.length,
        },
        'üßπ buildInteractiveMessage: –æ—á–∏—Å—Ç–∫–∞ encouragement –æ—Ç <think>'
      );
      json.encouragement.text = cleanLLMText(json.encouragement.text);
      schedulerLogger.info(
        {
          encouragementAfter: json.encouragement.text,
          encouragementLength: json.encouragement.text.length,
        },
        '‚ú® buildInteractiveMessage: encouragement –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏'
      );
    }
    if (json.negative_part?.additional_text) {
      json.negative_part.additional_text = cleanLLMText(json.negative_part.additional_text);
    }
    if (json.positive_part?.additional_text) {
      json.positive_part.additional_text = cleanLLMText(json.positive_part.additional_text);
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    // TODO: –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ç–µ–ª–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É
    const relaxationType: 'body' | 'breathing' = 'breathing'; // Math.random() < 0.5 ? 'body' : 'breathing';

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º encouragement –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ JSON (–ª–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö —É–∂–µ —É—á—Ç–µ–Ω–∞ –≤ generateInteractiveScheduledMessage)
    const firstPart = `<i>${escapeHTML(json.encouragement.text)}</i>`;

    return {
      firstPart,
      messageData: json,
      relaxationType,
    };
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  public async generateScheduledMessage(chatId: number): Promise<string> {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è –∏–º—è –∏ –ø–æ–ª
    const user = getUserByChatId(chatId);
    const userName = user?.name || null;
    const userGender = user?.gender || null;

    const userExists = await this.checkUserExists(chatId);
    if (!userExists) {
      databaseLogger.info({ chatId }, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º');
      addUser(chatId, '');
    }

    // Get events for the evening
    const now = new Date();
    const evening = new Date(now);
    evening.setHours(18, 0, 0, 0);
    const tomorrow = new Date(now);
    tomorrow.setDate(now.getDate() + 1);

    let events: any[] = [];
    let eventsStr = '';
    try {
      events = await this.calendarService.getEvents(evening.toISOString(), tomorrow.toISOString());
      if (events && events.length > 0) {
        eventsStr =
          '\nüóìÔ∏è –°–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:\n' +
          formatCalendarEvents(events, {
            locale: 'ru-RU',
            showDate: true,
            showBusy: true,
            showLocation: true,
            showDescription: true,
            showLink: true,
          });
        // –£–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      }
    } catch (e) {
      const error = e as Error;
      calendarLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
      events = [];
      eventsStr = '';
      clearUserTokens(chatId); // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    const dateTimeStr = now.toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
    let previousMessagesBlock = '';

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞
    const userMessages = getUserMessagesSinceLastPost(chatId);
    if (userMessages && userMessages.length > 0) {
      previousMessagesBlock = '\n\n–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:';
      userMessages.forEach((msg, i) => {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const truncatedText =
          msg.message_text.length > 500 ? msg.message_text.substring(0, 497) + '...' : msg.message_text;
        previousMessagesBlock += `\n${i + 1}. ${truncatedText}`;
      });

      schedulerLogger.debug(
        {
          chatId,
          userMessagesCount: userMessages.length,
          totalLength: previousMessagesBlock.length,
        },
        '–î–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–º–ø—Ç'
      );
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    const busyStatus = await this.detectUserBusy(events || []);
    const promptPath = busyStatus.probably_busy
      ? 'assets/prompts/scheduled-message-flight.md'
      : 'assets/prompts/scheduled-message.md';

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    schedulerLogger.info(
      {
        chatId,
        probably_busy: busyStatus.probably_busy,
        busy_reason: busyStatus.busy_reason,
        promptPath,
        eventsCount: events?.length || 0,
      },
      `üîç –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞: ${busyStatus.probably_busy ? 'BUSY' : 'NORMAL'}`
    );

    let promptBase = readFileSync(promptPath, 'utf-8');

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–º–ø—Ç
    // –ï—Å–ª–∏ –∏–º—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const userNameToUse = userName || '–¥—Ä—É–≥';
    promptBase = promptBase.replace(/\{userName\}/g, userNameToUse);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–º–ø—Ç
    const userGenderToUse = userGender || 'unknown';
    promptBase = promptBase.replace(/\{userGender\}/g, userGenderToUse);

    let prompt = promptBase + `\n\n–°–µ–≥–æ–¥–Ω—è: ${dateTimeStr}.` + eventsStr + previousMessagesBlock;
    if (busyStatus.probably_busy) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω—è—Ç ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ HF, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 555 —Å–∏–º–≤–æ–ª–∞–º–∏
      schedulerLogger.info(
        { chatId, busy_reason: busyStatus.busy_reason },
        '‚úàÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω—è—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç'
      );
      let rawText = await generateMessage(prompt);
      schedulerLogger.info({ chatId, textLength: rawText?.length || 0 }, `üìù LLM —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
      if (rawText === 'HF_JSON_ERROR') {
        schedulerLogger.warn({ chatId }, '‚ùå LLM –≤–µ—Ä–Ω—É–ª HF_JSON_ERROR (flight)');
        const fallbackBusy =
          '–ö–∞–∂–µ—Ç—Å—è —á–∞—Ç–∏–∫ –Ω–µ —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å - –Ω–µ–≥–æ–¥—è–π!\n\n–ö–∞–π—Ñ–æ–≤–æ–≥–æ –¥–Ω—è :) –î–∞–≤–∞–π –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–≤–æ–±–æ–¥–Ω–∞—è –º–∏–Ω—É—Ç–∫–∞ –ø–æ–¥—É–º–∞–µ—à—å –æ –ø—Ä–∏—è—Ç–Ω–æ–º, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –≤—Å–µ, —á—Ç–æ —Ç–µ–±—è —Ä–∞–¥—É–µ—Ç, –ø—Ä–∏–Ω–æ—Å–∏—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ... –º–æ–∂–Ω–æ –Ω–∞—Ñ–∞–Ω—Ç–∞–∑–∏—Ä–æ–≤–∞—Ç—å)\n\n–ì–ª–∞–≤–Ω–æ–µ –ø–æ—Å—Ç—Ä–∞–π—Å—è –ø—Ä–∏ —ç—Ç–æ–º –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ ‚ô•';
        saveMessage(chatId, fallbackBusy, new Date().toISOString());
        return fallbackBusy;
      }

      // –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ <think>...</think>
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å JSON
      let jsonText = extractJsonFromLLM(rawText);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
      if (!jsonText || jsonText === 'HF_JSON_ERROR') {
        schedulerLogger.warn(
          { chatId, extractedLength: jsonText?.length || 0 },
          '‚ùå –ü–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON –ø—É—Å—Ç–æ–π (flight)'
        );
        const fallbackBusy =
          '–ö–∞–∂–µ—Ç—Å—è —á–∞—Ç–∏–∫ –Ω–µ —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å - –Ω–µ–≥–æ–¥—è–π!\n\n–ö–∞–π—Ñ–æ–≤–æ–≥–æ –¥–Ω—è :) –î–∞–≤–∞–π –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–≤–æ–±–æ–¥–Ω–∞—è –º–∏–Ω—É—Ç–∫–∞ –ø–æ–¥—É–º–∞–µ—à—å –æ –ø—Ä–∏—è—Ç–Ω–æ–º, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –≤—Å–µ, —á—Ç–æ —Ç–µ–±—è —Ä–∞–¥—É–µ—Ç, –ø—Ä–∏–Ω–æ—Å–∏—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ... –º–æ–∂–Ω–æ –Ω–∞—Ñ–∞–Ω—Ç–∞–∑–∏—Ä–æ–≤–∞—Ç—å)\n\n–ì–ª–∞–≤–Ω–æ–µ –ø–æ—Å—Ç—Ä–∞–π—Å—è –ø—Ä–∏ —ç—Ç–æ–º –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ ‚ô•';
        saveMessage(chatId, fallbackBusy, new Date().toISOString());
        return fallbackBusy;
      }

      // --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –ø–∞—Ä—Å–∏–º JSON –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ encouragement + flight ---
      if (jsonText.startsWith('"') && jsonText.endsWith('"')) {
        jsonText = jsonText.slice(1, -1);
      }
      jsonText = jsonText.replace(/\\"/g, '"').replace(/\"/g, '"');
      let json: any;
      try {
        json = JSON.parse(jsonText);
        if (typeof json === 'string') {
          json = JSON.parse(json); // –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—Å, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è flight —Ä–µ–∂–∏–º–∞
        json = fixAlternativeJsonKeys(json, { chatId, source: 'flight' });

        if (json && typeof json === 'object' && json.encouragement && json.flight && json.flight.additional_task) {
          // –¢–æ–ª—å–∫–æ encouragement –∏ flight
          schedulerLogger.info(
            {
              chatId,
              encouragement: json.encouragement.text,
              encouragementLength: json.encouragement.text?.length || 0,
              flightTask: json.flight.additional_task,
            },
            '‚úàÔ∏è Flight —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º encouragement + flight.additional_task'
          );
          const encouragement = `<i>${escapeHTML(json.encouragement.text)}</i>`;
          const flight = escapeHTML(json.flight.additional_task);
          const message = `${encouragement}\n\n${flight}`;
          saveMessage(chatId, message, new Date().toISOString());
          return message;
        }
      } catch {}
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ encouragement, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
      try {
        json = JSON.parse(jsonText);
        if (json && json.encouragement && json.encouragement.text) {
          schedulerLogger.info(
            {
              chatId,
              encouragement: json.encouragement.text,
              encouragementLength: json.encouragement.text?.length || 0,
            },
            '‚ö†Ô∏è Flight —Ä–µ–∂–∏–º: fallback –Ω–∞ —Ç–æ–ª—å–∫–æ encouragement (–±–µ–∑ flight)'
          );
          const encouragement = `<i>${escapeHTML(json.encouragement.text)}</i>`;
          saveMessage(chatId, encouragement, new Date().toISOString());
          return encouragement;
        }
      } catch {}
      // Fallback –¥–ª—è –∑–∞–Ω—è—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const fallbackBusy =
        '–ö–∞–∂–µ—Ç—Å—è —á–∞—Ç–∏–∫ –Ω–µ —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å - –Ω–µ–≥–æ–¥—è–π!\n\n–ö–∞–π—Ñ–æ–≤–æ–≥–æ –¥–Ω—è :) –î–∞–≤–∞–π –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–≤–æ–±–æ–¥–Ω–∞—è –º–∏–Ω—É—Ç–∫–∞ –ø–æ–¥—É–º–∞–µ—à—å –æ –ø—Ä–∏—è—Ç–Ω–æ–º, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –≤—Å–µ, —á—Ç–æ —Ç–µ–±—è —Ä–∞–¥—É–µ—Ç, –ø—Ä–∏–Ω–æ—Å–∏—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ... –º–æ–∂–Ω–æ –Ω–∞—Ñ–∞–Ω—Ç–∞–∑–∏—Ä–æ–≤–∞—Ç—å)\n\n–ì–ª–∞–≤–Ω–æ–µ –ø–æ—Å—Ç—Ä–∞–π—Å—è –ø—Ä–∏ —ç—Ç–æ–º –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ ‚ô•';
      saveMessage(chatId, fallbackBusy, new Date().toISOString());
      return fallbackBusy;
    } else {
      // –û–±—ã—á–Ω—ã–π –¥–µ–Ω—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ø—É–Ω–∫—Ç–∞–º–∏
      schedulerLogger.info({ chatId }, 'üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–Ω—è—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç');
      const rawJsonText = await generateMessage(prompt);
      schedulerLogger.info(
        {
          chatId,
          rawLength: rawJsonText?.length || 0,
          rawPreview: rawJsonText?.substring(0, 200) || 'null',
          promptLength: prompt?.length || 0,
        },
        `üìù LLM —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω`
      );

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É
      if (rawJsonText === 'HF_JSON_ERROR') {
        schedulerLogger.warn({ chatId }, '‚ùå LLM –≤–µ—Ä–Ω—É–ª HF_JSON_ERROR (–¥–æ –æ—á–∏—Å—Ç–∫–∏)');
        const fallback = readFileSync('assets/fallback_text', 'utf-8');
        return fallback;
      }

      // –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ <think>...</think>
      // –î–ª—è JSON –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
      let jsonText = extractJsonFromLLM(rawJsonText);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
      if (!jsonText || jsonText === 'HF_JSON_ERROR') {
        schedulerLogger.warn(
          { chatId, extractedLength: jsonText?.length || 0 },
          '‚ùå –ü–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—à–∏–±–∫–∞'
        );
        const fallback = readFileSync('assets/fallback_text', 'utf-8');
        return fallback;
      }

      schedulerLogger.info(
        {
          chatId,
          cleanedLength: jsonText?.length || 0,
          cleanedPreview: jsonText?.substring(0, 200) || 'null',
          hasThinkTags: rawJsonText?.includes('<think>') || false,
          hasBrackets: jsonText?.includes('{') || false,
        },
        `üßπ –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`
      );

      // –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º markdown-–±–ª–æ–∫–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      jsonText = jsonText.replace(/```json|```/gi, '').trim();
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–∞–≤—ã—á–∫–∞–º–∏, —É–±–∏—Ä–∞–µ–º –∏—Ö
      if (jsonText.startsWith('"') && jsonText.endsWith('"')) {
        jsonText = jsonText.slice(1, -1);
      }
      // –ó–∞–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
      jsonText = jsonText.replace(/\\"/g, '"').replace(/\"/g, '"');

      schedulerLogger.debug(
        {
          chatId,
          finalJsonLength: jsonText?.length || 0,
          finalJsonPreview: jsonText?.substring(0, 200) || 'null',
        },
        `üîß –ü–æ—Å–ª–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON`
      );
      let json: any;
      try {
        schedulerLogger.debug(
          {
            chatId,
            beforeParse: jsonText?.substring(0, 100) || 'null',
          },
          `üîç –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON`
        );

        json = JSON.parse(jsonText);
        if (typeof json === 'string') {
          schedulerLogger.debug({ chatId }, 'üì¶ –î–≤–æ–π–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ - —Å—Ç—Ä–æ–∫–∞');
          json = JSON.parse(json); // –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—Å, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ –æ—Ç –º–æ–¥–µ–ª–∏
        json = fixAlternativeJsonKeys(json, { chatId, source: 'scheduled' });

        schedulerLogger.info(
          {
            chatId,
            parsedType: typeof json,
            hasEncouragement: !!json?.encouragement,
            hasNegativePart: !!json?.negative_part,
            hasPositivePart: !!json?.positive_part,
            hasFeelsEmotions: 'feels_and_emotions' in (json || {}),
            jsonKeys: json ? Object.keys(json) : [],
          },
          `‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—à–µ–Ω`
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞—è
        if (
          !json ||
          typeof json !== 'object' ||
          !json.encouragement ||
          !json.negative_part ||
          !json.positive_part ||
          !('feels_and_emotions' in json)
        ) {
          throw new Error(
            `Invalid structure: missing fields - encouragement: ${!!json?.encouragement}, negative_part: ${!!json?.negative_part}, positive_part: ${!!json?.positive_part}, feels_and_emotions: ${
              'feels_and_emotions' in (json || {})
            }`
          );
        }
      } catch (parseError) {
        // fallback –≤—Å–µ–≥–¥–∞
        schedulerLogger.warn(
          {
            chatId,
            error: (parseError as Error).message,
            jsonTextLength: jsonText?.length || 0,
            jsonTextSample: jsonText?.substring(0, 200) || 'null',
          },
          '‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback'
        );
        const fallback = readFileSync('assets/fallback_text', 'utf-8');
        return fallback;
      }
      let message = this.buildScheduledMessageFromHF(json);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
      if (message.length > 1024) {
        schedulerLogger.warn(
          {
            chatId,
            messageLength: message.length,
            overflow: message.length - 1024,
          },
          `‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram –Ω–∞ ${message.length - 1024} —Å–∏–º–≤–æ–ª–æ–≤!`
        );
      }

      return message;
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  public async generateInteractiveScheduledMessage(chatId: number): Promise<{
    json: any;
    firstPart: string;
    relaxationType: 'body' | 'breathing';
  }> {
    // –î–ª—è –ø–æ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const postFallback = '–ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –±—ã–ª —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å!';
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è –∏–º—è –∏ –ø–æ–ª
    const user = getUserByChatId(chatId);
    const userName = user?.name || null;
    const userGender = user?.gender || null;

    const userExists = await this.checkUserExists(chatId);
    if (!userExists) {
      databaseLogger.info({ chatId }, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º');
      addUser(chatId, '');
    }

    // Get events for the evening
    const now = new Date();
    const evening = new Date(now);
    evening.setHours(18, 0, 0, 0);
    const tomorrow = new Date(now);
    tomorrow.setDate(now.getDate() + 1);

    let events: any[] = [];
    let eventsStr = '';
    try {
      events = await this.calendarService.getEvents(evening.toISOString(), tomorrow.toISOString());
      if (events && events.length > 0) {
        eventsStr =
          '\nüóìÔ∏è –°–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:\n' +
          formatCalendarEvents(events, {
            locale: 'ru-RU',
            showDate: true,
            showBusy: true,
            showLocation: true,
            showDescription: true,
            showLink: true,
          });
      }
    } catch (e) {
      const error = e as Error;
      // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
      if (this.isTestBot()) {
        schedulerLogger.debug({ chatId }, '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ');
      } else {
        calendarLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
        clearUserTokens(chatId); // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }
      events = [];
      eventsStr = '';
    }
    const dateTimeStr = now.toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
    let previousMessagesBlock = '';

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞
    const userMessages = getUserMessagesSinceLastPost(chatId);
    if (userMessages && userMessages.length > 0) {
      previousMessagesBlock = '\n\n–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:';
      userMessages.forEach((msg, i) => {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const truncatedText =
          msg.message_text.length > 500 ? msg.message_text.substring(0, 497) + '...' : msg.message_text;
        previousMessagesBlock += `\n${i + 1}. ${truncatedText}`;
      });

      schedulerLogger.debug(
        {
          chatId,
          userMessagesCount: userMessages.length,
          totalLength: previousMessagesBlock.length,
        },
        '–î–æ–±–∞–≤–ª–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞'
      );
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    const busyStatus = await this.detectUserBusy(events || []);

    // –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    const promptPath = 'assets/prompts/scheduled-message.md';

    schedulerLogger.info(
      {
        chatId,
        probably_busy: busyStatus.probably_busy,
        promptPath,
        mode: 'interactive',
      },
      `üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç`
    );

    let promptBase = readFileSync(promptPath, 'utf-8');

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–º–ø—Ç
    const userNameToUse = userName || '–¥—Ä—É–≥';
    promptBase = promptBase.replace(/\{userName\}/g, userNameToUse);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–º–ø—Ç
    const userGenderToUse = userGender || 'unknown';
    promptBase = promptBase.replace(/\{userGender\}/g, userGenderToUse);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π –ª–∏ –¥–µ–Ω—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è encouragement
    const isWeekend = this.isWeekend();
    let weekendInstructions = '';
    if (isWeekend) {
      const weekendPromptContent = readFileSync('assets/prompts/weekend-encouragement.md', 'utf-8');
      weekendInstructions = `\n\n**–í–ê–ñ–ù–û: –°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å!**
–î–ª—è encouragement.text –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:

${weekendPromptContent}`;
    }

    let prompt = promptBase + weekendInstructions + `\n\n–°–µ–≥–æ–¥–Ω—è: ${dateTimeStr}.` + eventsStr + previousMessagesBlock;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const rawJsonText = await generateMessage(prompt);
    schedulerLogger.info(
      { chatId, rawLength: rawJsonText?.length || 0 },
      `üìù LLM —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞`
    );

    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (rawJsonText && rawJsonText.length > 0 && rawJsonText !== 'HF_JSON_ERROR') {
      const hasThinkTags = rawJsonText.includes('<think>');
      const hasJson = rawJsonText.includes('{') && rawJsonText.includes('}');
      schedulerLogger.warn(
        {
          chatId,
          hasThinkTags,
          hasJson,
          first500chars: rawJsonText.substring(0, 500),
          last500chars: rawJsonText.substring(Math.max(0, rawJsonText.length - 500)),
        },
        `üîç –û–¢–õ–ê–î–ö–ê: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏`
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
    if (rawJsonText === 'HF_JSON_ERROR') {
      schedulerLogger.warn({ chatId }, '‚ùå LLM –≤–µ—Ä–Ω—É–ª HF_JSON_ERROR –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ (–¥–æ –æ—á–∏—Å—Ç–∫–∏)');
      const fallback = readFileSync('assets/fallback_text', 'utf-8');

      schedulerLogger.info(
        {
          chatId,
          fallbackText: fallback,
          fallbackLength: fallback.length,
        },
        'üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ç–µ–∫—Å—Ç –∫–∞–∫ encouragement (HF_JSON_ERROR –¥–æ –æ—á–∏—Å—Ç–∫–∏)'
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∫–∞–∫ JSON
      return {
        json: {
          encouragement: { text: fallback },
          negative_part: { additional_text: '' },
          positive_part: { additional_text: '' },
        },
        firstPart: postFallback,
        relaxationType: 'breathing',
      };
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ (—É–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ <think>...</think> –∏ –Ω–∞—Ö–æ–¥–∏–º JSON)
    let jsonText = extractJsonFromLLM(rawJsonText);

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    schedulerLogger.info(
      {
        chatId,
        extractedLength: jsonText?.length || 0,
        extractedPreview: jsonText?.substring(0, 200) || 'null',
        isValidJsonStart: jsonText?.trim().startsWith('{') || false,
      },
      'üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON'
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    if (!jsonText || jsonText === 'HF_JSON_ERROR') {
      schedulerLogger.warn(
        { chatId, extractedLength: jsonText?.length || 0 },
        '‚ùå –ü–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ'
      );
      const fallback = readFileSync('assets/fallback_text', 'utf-8');

      schedulerLogger.info(
        {
          chatId,
          fallbackText: fallback,
          fallbackLength: fallback.length,
        },
        'üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ç–µ–∫—Å—Ç –∫–∞–∫ encouragement (–ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—É—Å—Ç–æ–π/–æ—à–∏–±–∫–∞)'
      );

      return {
        json: {
          encouragement: { text: fallback },
          negative_part: { additional_text: '' },
          positive_part: { additional_text: '' },
          feels_and_emotions: { additional_text: null },
        },
        firstPart: postFallback,
        relaxationType: 'breathing' as const,
      };
    }

    // –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º markdown-–±–ª–æ–∫–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    jsonText = jsonText.replace(/```json|```/gi, '').trim();
    if (jsonText.startsWith('"') && jsonText.endsWith('"')) {
      jsonText = jsonText.slice(1, -1);
    }
    jsonText = jsonText.replace(/\\"/g, '"').replace(/\"/g, '"');

    let json: any;
    try {
      // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
      schedulerLogger.info(
        {
          chatId,
          jsonTextLength: jsonText.length,
          startsWithBrace: jsonText.startsWith('{'),
          endsWithBrace: jsonText.endsWith('}'),
          hasNewlines: jsonText.includes('\n'),
          preview: jsonText.substring(0, 300),
          lastChars: jsonText.substring(Math.max(0, jsonText.length - 100)),
        },
        'üìã –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON'
      );

      json = JSON.parse(jsonText);
      if (typeof json === 'string') {
        schedulerLogger.info({ chatId }, '‚ö†Ô∏è JSON.parse –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä–æ–∫—É, –ø—Ä–æ–±—É–µ–º –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—Å–∏–Ω–≥');
        json = JSON.parse(json); // –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—Å, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞
      }

      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ –æ—Ç –º–æ–¥–µ–ª–∏
      json = fixAlternativeJsonKeys(json, { chatId, source: 'interactive' });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞—è
      if (
        !json ||
        typeof json !== 'object' ||
        !json.encouragement ||
        !json.negative_part ||
        !json.positive_part ||
        !('feels_and_emotions' in json)
      ) {
        schedulerLogger.warn(
          {
            chatId,
            hasEncouragement: !!json?.encouragement,
            hasNegativePart: !!json?.negative_part,
            hasPositivePart: !!json?.positive_part,
            hasFeelsAndEmotions: 'feels_and_emotions' in (json || {}),
            jsonKeys: json ? Object.keys(json) : [],
          },
          '‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π'
        );
        throw new Error('Invalid structure');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —à–∞–±–ª–æ–Ω —Å "..."
      const encouragementText = json.encouragement?.text || '';
      if (encouragementText === '...' || encouragementText.length < 10) {
        schedulerLogger.warn(
          {
            chatId,
            encouragementText,
            allTexts: {
              encouragement: json.encouragement?.text,
              negative: json.negative_part?.additional_text,
              positive: json.positive_part?.additional_text,
              emotions: json.feels_and_emotions?.additional_text,
              support: json.deep_support?.text,
            },
          },
          '‚ö†Ô∏è –ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ —à–∞–±–ª–æ–Ω —Å "..." –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞'
        );
        throw new Error('Template with dots instead of real text');
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é encouragement
      schedulerLogger.info(
        {
          chatId,
          encouragementText,
          encouragementLength: encouragementText.length,
          hasNegativePart: !!json.negative_part?.additional_text,
          hasPositivePart: !!json.positive_part?.additional_text,
          hasEmotions: !!json.feels_and_emotions?.additional_text,
        },
        '‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω, encouragement –≤–∞–ª–∏–¥–µ–Ω'
      );
    } catch (error) {
      // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
      const errorMsg = error instanceof Error ? error.message : 'Unknown error';
      const syntaxErrorMatch = errorMsg.match(/position (\d+)/);

      let errorContext = '';
      if (syntaxErrorMatch) {
        const position = parseInt(syntaxErrorMatch[1]);
        const start = Math.max(0, position - 50);
        const end = Math.min(jsonText.length, position + 50);
        errorContext = jsonText.substring(start, end);
      }

      schedulerLogger.warn(
        {
          chatId,
          jsonTextLength: jsonText.length,
          jsonTextPreview: jsonText.substring(0, 500),
          error: errorMsg,
          errorType: error instanceof SyntaxError ? 'SyntaxError' : 'Other',
          errorContext,
          syntaxErrorPosition: syntaxErrorMatch ? syntaxErrorMatch[1] : null,
        },
        '‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback'
      );
      const fallback = readFileSync('assets/fallback_text', 'utf-8');

      schedulerLogger.info(
        {
          chatId,
          fallbackText: fallback,
          fallbackLength: fallback.length,
        },
        'üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ç–µ–∫—Å—Ç –∫–∞–∫ encouragement (–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞)'
      );

      return {
        json: {
          encouragement: { text: fallback },
          negative_part: { additional_text: '' },
          positive_part: { additional_text: '' },
        },
        firstPart: postFallback,
        relaxationType: 'breathing',
      };
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±–∏–ª–¥–µ—Ä
    const interactiveData = await this.buildInteractiveMessage(json);

    return {
      json,
      firstPart: interactiveData.firstPart,
      relaxationType: interactiveData.relaxationType,
    };
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
  async sendDailyMessage(chatId: number) {
    // –í–†–ï–ú–ï–ù–ù–û: —Ä–∞–∑—Ä–µ—à–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
    // if (this.isTestBot()) {
    //   schedulerLogger.warn('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞');
    //   return;
    // }

    try {
      schedulerLogger.debug({ chatId }, '–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–ø–∏—à–µ—Ç" (—Ä–µ–∞–∫—Ü–∏—è)
      await this.bot.telegram.sendChatAction(this.CHANNEL_ID, 'upload_photo');
      const message = await this.generateScheduledMessage(chatId);

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      let calendarEvents = null;
      try {
        calendarEvents = await getUserTodayEvents(chatId);
      } catch (calendarError) {
        schedulerLogger.debug(
          { chatId, error: (calendarError as Error).message },
          '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ'
        );
        calendarEvents = null;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—è–≥—É—à–∫–∏
      let imageBuffer: Buffer | null = null;
      try {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        const isWeekend = this.isWeekend();
        const promptVariant = Math.random() < 0.5 ? '1' : '2';
        const imagePromptFile = isWeekend
          ? `assets/prompts/frog-image-prompt-weekend-${promptVariant}`
          : `assets/prompts/frog-image-prompt-weekday-${promptVariant}`;
        const imagePrompt = readFileSync(imagePromptFile, 'utf-8');

        schedulerLogger.info({ chatId, imagePrompt, isWeekend, promptVariant }, `üé® –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤–∞—Ä–∏–∞–Ω—Ç ${promptVariant}): "${imagePrompt}"`);
        imageBuffer = await generateFrogImage(imagePrompt);
      } catch (imageError) {
        const imgErr = imageError as Error;
        schedulerLogger.error(
          {
            error: imgErr.message,
            stack: imgErr.stack,
            chatId,
          },
          '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
        );
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (message.length > 1024) {
        schedulerLogger.error(
          {
            chatId,
            messageLength: message.length,
            overflow: message.length - 1024,
            message: message.substring(0, 200) + '...',
          },
          `‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ ${message.length - 1024} —Å–∏–º–≤–æ–ª–æ–≤!`
        );
      }

      const caption = message.length > 1024 ? message.slice(0, 1020) + '...' : message;

      if (imageBuffer) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await this.bot.telegram.sendPhoto(
          this.CHANNEL_ID,
          { source: imageBuffer },
          {
            caption,
            parse_mode: 'HTML',
          }
        );
        schedulerLogger.info(
          {
            chatId,
            messageLength: message.length,
            imageSize: imageBuffer.length,
          },
          '–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
        );
      } else {
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É —Ä–æ—Ç–∞—Ü–∏–∏
        const imagePath = this.getNextImage(chatId);
        await this.bot.telegram.sendPhoto(
          this.CHANNEL_ID,
          { source: imagePath },
          {
            caption,
            parse_mode: 'HTML',
          }
        );
        schedulerLogger.info(
          {
            chatId,
            messageLength: message.length,
            imagePath,
          },
          '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–∑ —Ä–æ—Ç–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (fallback)'
        );
      }

      // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      if (message.length > 1024) {
        await this.bot.telegram.sendMessage(this.CHANNEL_ID, message, {
          parse_mode: 'HTML',
        });
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 –º–∏–Ω—É—Ç—ã)
      const checkDelayMinutes = Number(process.env.ANGRY_POST_DELAY_MINUTES || 600); // 10 —á–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

      // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
      if (this.testModeCheckTimeout) {
        clearTimeout(this.testModeCheckTimeout);
      }

      schedulerLogger.info(`‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ ${checkDelayMinutes} –º–∏–Ω—É—Ç(—ã)`);

      // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ —á–µ—Ä–µ–∑ /fro

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      this.testModeCheckTimeout = setTimeout(async () => {
        schedulerLogger.info('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        await this.checkUsersResponses();
      }, checkDelayMinutes * 60 * 1000);

      // –í–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1.5 —á–∞—Å–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Ç–æ–∂–µ)
      const sentTime = new Date().toISOString();
      saveMessage(chatId, message, sentTime);
      this.setReminder(chatId, sentTime);
      schedulerLogger.info({ chatId }, '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1.5 —á–∞—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–∫–æ–º–∞–Ω–¥–∞ /test)');
    } catch (e) {
      const error = e as Error;
      schedulerLogger.error({ error: error.message, stack: error.stack, chatId }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }

  // –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞
  private getRandomSkipButtonText(): string {
    const skipButtons = [
      '‚úÖ –í—Å–µ –æ–∫ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
      'üëå –í—Å–µ —Ö–æ—Ä–æ—à–æ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
      'üåü –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
      'üíö –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
      'üåà –í—Å–µ —Å—É–ø–µ—Ä - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
      '‚ú® –í—Å–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
      'üçÄ –í—Å–µ —á—É–¥–µ—Å–Ω–æ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
      'üå∫ –í—Å–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
      'üéØ –í—Å–µ –Ω–∞ –º–µ—Å—Ç–µ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
      'üå∏ –í—Å–µ –∫–ª–∞—Å—Å–Ω–æ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
    ];
    return skipButtons[Math.floor(Math.random() * skipButtons.length)];
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  async sendInteractiveDailyMessage(chatId: number, isManualCommand: boolean = false) {
    // –í–†–ï–ú–ï–ù–ù–û: —Ä–∞–∑—Ä–µ—à–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
    // if (this.isTestBot() && !isManualCommand) {
    //   schedulerLogger.warn('‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞');
    //   return;
    // }

    try {
      schedulerLogger.debug(
        {
          chatId,
          isTestBot: this.isTestBot(),
          channelId: this.CHANNEL_ID,
          chatGroupId: this.getChatId(),
          isManualCommand,
        },
        '–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
      );

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–ø–∏—à–µ—Ç" (—Ä–µ–∞–∫—Ü–∏—è)
      await this.bot.telegram.sendChatAction(this.CHANNEL_ID, 'upload_photo');

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const { json, firstPart, relaxationType } = await this.generateInteractiveScheduledMessage(chatId);

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      let calendarEvents = null;
      try {
        calendarEvents = await getUserTodayEvents(chatId);
      } catch (calendarError) {
        schedulerLogger.debug(
          { chatId, error: (calendarError as Error).message },
          '–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ'
        );
        calendarEvents = null;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—è–≥—É—à–∫–∏
      let imageBuffer: Buffer | null = null;
      try {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        const isWeekend = this.isWeekend();
        const promptVariant = Math.random() < 0.5 ? '1' : '2';
        const imagePromptFile = isWeekend
          ? `assets/prompts/frog-image-prompt-weekend-${promptVariant}`
          : `assets/prompts/frog-image-prompt-weekday-${promptVariant}`;
        const imagePrompt = readFileSync(imagePromptFile, 'utf-8');

        schedulerLogger.info({ chatId, imagePrompt, isWeekend, promptVariant }, `üé® –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤–∞—Ä–∏–∞–Ω—Ç ${promptVariant}): "${imagePrompt}"`);
        imageBuffer = await generateFrogImage(imagePrompt);
      } catch (imageError) {
        const imgErr = imageError as Error;
        schedulerLogger.error(
          {
            error: imgErr.message,
            stack: imgErr.stack,
            chatId,
          },
          '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
        );
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç "–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º üòâ"
      const captionWithComment = firstPart + '\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º üòâ';

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
      const { getDefaultSupportWords } = await import('./utils/support-words');
      const supportWords = getDefaultSupportWords();

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å—Ç–∞ –∏–∑ env, —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ –±–æ—Ç–∞
      const postUserId = this.isTestBot() ? this.getTestUserId() : this.getMainUserId();

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ message_data
      const messageDataWithSupport = {
        ...json,
        day_rating_support: supportWords,
      };

      // –°–ù–ê–ß–ê–õ–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID)
      const tempMessageId = Date.now(); // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ timestamp

      const { saveInteractivePost } = await import('./db');
      try {
        saveInteractivePost(tempMessageId, postUserId, messageDataWithSupport, relaxationType);
        schedulerLogger.info({ tempMessageId, chatId }, 'üíæ –ü–æ—Å—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID');
      } catch (dbError) {
        schedulerLogger.error({ error: dbError, chatId }, '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç –≤ –ë–î');
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
        if (adminChatId) {
          await this.bot.telegram
            .sendMessage(
              adminChatId,
              `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î\n\n–û—à–∏–±–∫–∞: ${
                (dbError as Error).message
              }`
            )
            .catch(err => schedulerLogger.error({ error: err }, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É'));
        }
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç –ë–ï–ó –∫–Ω–æ–ø–æ–∫ —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
      let sentMessage;

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
      const retryData = {
        chatId,
        tempMessageId,
        messageDataWithSupport,
        captionWithComment,
        postUserId,
        relaxationType,
        generatedImageBuffer: imageBuffer,
      };

      // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ sendWithRetry
      const sendPhotoFunction = async () => {
        if (imageBuffer) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          return await this.bot.telegram.sendPhoto(
            this.CHANNEL_ID,
            { source: imageBuffer },
            {
              caption: captionWithComment,
              parse_mode: 'HTML',
            }
          );
        } else {
          // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É —Ä–æ—Ç–∞—Ü–∏–∏
          const imagePath = this.getNextImage(chatId);
          const imageFile = readFileSync(imagePath);
          return await this.bot.telegram.sendPhoto(
            this.CHANNEL_ID,
            { source: imageFile },
            {
              caption: captionWithComment,
              parse_mode: 'HTML',
            }
          );
        }
      };

      // –ö–æ–ª–ª–±—ç–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      const onSuccessCallback = async (result: any) => {
        const messageId = result.message_id;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        try {
          const db = await import('./db');
          const updateQuery = db.db.query(`
            UPDATE interactive_posts
            SET channel_message_id = ?
            WHERE channel_message_id = ?
          `);
          updateQuery.run(messageId, tempMessageId);
          schedulerLogger.info({ tempMessageId, messageId, chatId }, '‚úÖ ID –ø–æ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏');
        } catch (updateError) {
          schedulerLogger.error({ error: updateError, tempMessageId, messageId }, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID –ø–æ—Å—Ç–∞');
          // –°–æ–∑–¥–∞–µ–º fallback –∑–∞–ø–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
          try {
            const { saveInteractivePost } = await import('./db');
            saveInteractivePost(messageId, postUserId, messageDataWithSupport, relaxationType);
            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
            const db = await import('./db');
            const deleteQuery = db.db.query('DELETE FROM interactive_posts WHERE channel_message_id = ?');
            deleteQuery.run(tempMessageId);
            schedulerLogger.info({ messageId }, '‚úÖ –°–æ–∑–¥–∞–Ω–∞ fallback –∑–∞–ø–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID');
          } catch (fallbackError) {
            schedulerLogger.error(
              { error: fallbackError },
              '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å fallback –∑–∞–ø–∏—Å—å'
            );
          }
        }

        // –ì–æ—Ç–æ–≤–∏–º –≤—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        const scenarioChoiceText = '<b>–ö–∞–∫ —Å–µ–≥–æ–¥–Ω—è —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å?</b>';
        const scenarioChoiceKeyboard = {
          inline_keyboard: [
            [{ text: '–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π üß©', callback_data: `scenario_simplified_${messageId}` }],
            [{ text: '–ì–ª—É–±–æ–∫–∞—è —Ä–∞–±–æ—Ç–∞ üßòüèª', callback_data: `scenario_deep_${messageId}` }],
          ],
        };

        // –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
        const CHAT_ID = this.getChatId();
        if (CHAT_ID) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          this.sendFirstTaskAsync(
            messageId,
            scenarioChoiceText,
            scenarioChoiceKeyboard,
            'scenario_choice',
            chatId,
            CHAT_ID
          );
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        const { saveMessage } = await import('./db');
        const startTime = new Date().toISOString();
        saveMessage(chatId, captionWithComment, startTime);
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      sentMessage = await this.sendWithRetry(sendPhotoFunction, {
        chatId,
        messageType: 'interactive_daily_message',
        retryData,
        maxAttempts: 111, // 111 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        intervalMs: 60000, // 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        onSuccess: onSuccessCallback,
      });

      const postSentTime = new Date();
      schedulerLogger.info(
        {
          chatId,
          messageLength: captionWithComment.length,
          messageId: sentMessage.message_id,
          sentAt: postSentTime.toISOString(),
          timestamp: postSentTime.getTime(),
          hasGeneratedImage: !!imageBuffer,
        },
        '–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª'
      );

      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –ë–î (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º)
      const messageId = sentMessage.message_id;
      (async () => {
        try {
          schedulerLogger.info({ chatId, messageId }, 'üéØ –ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
          const { generateDayRatingSupportWords } = await import('./utils/support-words');
          const generatedSupportWords = await generateDayRatingSupportWords();

          // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
          const db = await import('./db');
          const updateQuery = db.db.query(`
            UPDATE interactive_posts
            SET message_data = json_set(message_data, '$.day_rating_support', json(?))
            WHERE channel_message_id = ?
          `);
          updateQuery.run(JSON.stringify(generatedSupportWords), messageId);
          schedulerLogger.info({ chatId, messageId }, '‚úÖ –°–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –ë–î');
        } catch (error) {
          schedulerLogger.error({ error, chatId, messageId }, '‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ)');
        }
      })();

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1.5 —á–∞—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const sentTime = postSentTime.toISOString();
      this.setReminder(chatId, sentTime);
      schedulerLogger.info({ chatId, sentTime }, '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1.5 —á–∞—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —á–∞—Å–æ–≤)
      const checkDelayMinutes = Number(process.env.ANGRY_POST_DELAY_MINUTES || 600);

      // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
      if (this.testModeCheckTimeout) {
        clearTimeout(this.testModeCheckTimeout);
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –ò–õ–ò –µ—Å–ª–∏ —ç—Ç–æ —Ä—É—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ
      if (!this.isTestBot() || isManualCommand) {
        schedulerLogger.info(`‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ ${checkDelayMinutes} –º–∏–Ω—É—Ç(—ã)`);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        this.testModeCheckTimeout = setTimeout(async () => {
          schedulerLogger.info('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          await this.checkUsersResponses();
        }, checkDelayMinutes * 60 * 1000);
      } else {
        schedulerLogger.info('ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
      }
    } catch (e) {
      const error = e as Error;
      schedulerLogger.error(
        { error: error.message, stack: error.stack, chatId },
        '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
      );

      // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–µ
      throw error;
    }
  }

  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ—Å—Ç—É
  private async sendFirstTaskAsync(
    channelMessageId: number,
    firstTaskFullText: string,
    firstTaskKeyboard: any,
    skipButtonText: string,
    originalChatId: number,
    CHAT_ID: number
  ) {
    try {
      // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      let forwardedMessageId: number | null = null;
      let attempts = 0;
      const maxAttempts = 60; // –ú–∞–∫—Å–∏–º—É–º 60 –ø–æ–ø—ã—Ç–æ–∫ (5 –º–∏–Ω—É—Ç)
      const checkInterval = 5000; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

      schedulerLogger.info(
        {
          channelMessageId,
          CHAT_ID,
          checkInterval: `${checkInterval / 1000}s`,
        },
        'üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
      );

      while (!forwardedMessageId && attempts < maxAttempts) {
        attempts++;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É, –ø–æ—Ç–æ–º –∂–¥–µ–º
        forwardedMessageId = this.forwardedMessages.get(channelMessageId) || null;

        if (forwardedMessageId) {
          schedulerLogger.info(
            {
              forwardedMessageId,
              channelMessageId,
              attempts,
              waitedSeconds: (attempts * checkInterval) / 1000,
            },
            '‚úÖ –ù–∞–π–¥–µ–Ω ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ'
          );
          break;
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (attempts % 3 === 0) {
          // –ö–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
          schedulerLogger.debug(
            {
              attempts,
              channelMessageId,
              waitedMinutes: ((attempts * checkInterval) / 1000 / 60).toFixed(1),
              forwardedMessagesCount: this.forwardedMessages.size,
            },
            '‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...'
          );
        }

        // –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await new Promise(resolve => setTimeout(resolve, checkInterval));
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
      const messageOptions: any = {
        parse_mode: 'HTML',
        reply_markup: firstTaskKeyboard,
        disable_notification: true,
      };

      if (forwardedMessageId) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É
        // –í Telegram –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è reply_to_message_id
        messageOptions.reply_to_message_id = forwardedMessageId;

        const firstTaskMessage = await this.sendWithRetry(
          () => this.bot.telegram.sendMessage(CHAT_ID, firstTaskFullText, messageOptions),
          {
            chatId: originalChatId,
            messageType: 'first_task_with_thread',
            maxAttempts: 10,
            intervalMs: 5000,
          }
        );

        schedulerLogger.info(
          {
            success: true,
            firstTaskId: firstTaskMessage.message_id,
            channelMessageId,
            forwardedMessageId,
            chat_id: CHAT_ID,
            waitedSeconds: (attempts * checkInterval) / 1000,
          },
          '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É'
        );

        // –î–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
      } else {
        // –¢–∞–π–º–∞—É—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É —Å –ø–æ–º–µ—Ç–∫–æ–π
        schedulerLogger.warn(
          {
            channelMessageId,
            attempts,
            maxAttempts,
            waitedMinutes: ((maxAttempts * checkInterval) / 1000 / 60).toFixed(1),
          },
          '‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É —Å –ø–æ–º–µ—Ç–∫–æ–π'
        );

        const firstTaskMessage = await this.sendWithRetry(
          () => this.bot.telegram.sendMessage(CHAT_ID, firstTaskFullText, messageOptions),
          {
            chatId: originalChatId,
            messageType: 'first_task_no_thread',
            maxAttempts: 10,
            intervalMs: 5000,
          }
        );

        schedulerLogger.info(
          {
            success: true,
            firstTaskId: firstTaskMessage.message_id,
            channelMessageId,
            chat_id: CHAT_ID,
            used_note: true,
          },
          '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É —Å –ø–æ–º–µ—Ç–∫–æ–π'
        );

        // –î–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
      }
    } catch (error) {
      schedulerLogger.error(
        {
          error: (error as Error).message,
          stack: (error as Error).stack,
          channelMessageId,
          CHAT_ID,
        },
        '‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è'
      );
    }
  }

  // –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  async sendDailyMessagesToAll(adminChatId: number) {
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
    if (this.isTestBot()) {
      schedulerLogger.warn('‚ö†Ô∏è –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
    const now = new Date();
    await this.saveLastDailyRunTime(now);

    schedulerLogger.info(
      { usersCount: this.users.size },
      `üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è ${this.users.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
    );

    let successCount = 0;
    let errorCount = 0;
    const errors: string[] = [];
    const checkDelayMinutes = Number(process.env.ANGRY_POST_DELAY_MINUTES || 600); // 10 —á–∞—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if (!this.users || this.users.size === 0) {
      await this.sendWithRetry(
        () =>
          this.bot.telegram.sendMessage(adminChatId, '‚ùóÔ∏è–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–±–µ.'),
        {
          chatId: adminChatId,
          messageType: 'admin_no_users_warning',
          maxAttempts: 5,
          intervalMs: 3000,
        }
      );
      await this.sendDailyMessage(adminChatId);
      schedulerLogger.warn('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ò–ù –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª (–∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∞–¥–º–∏–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
    try {
      await this.sendInteractiveDailyMessage(adminChatId);
      successCount = 1;
      schedulerLogger.info('messageGenerated', adminChatId, 0, 0); // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const TARGET_USER_ID = this.getTargetUserId();
      const sentTime = new Date().toISOString();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ
      if (this.users.has(TARGET_USER_ID)) {
        this.setReminder(TARGET_USER_ID, sentTime);
        schedulerLogger.info({ userId: TARGET_USER_ID }, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      } else {
        schedulerLogger.warn({ userId: TARGET_USER_ID }, '–¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
      if (this.testModeCheckTimeout) {
        clearTimeout(this.testModeCheckTimeout);
      }

      schedulerLogger.info(
        `‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${TARGET_USER_ID} –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ ${checkDelayMinutes} –º–∏–Ω—É—Ç(—ã)`
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      this.testModeCheckTimeout = setTimeout(async () => {
        schedulerLogger.info('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏');
        await this.checkUsersResponses();
      }, checkDelayMinutes * 60 * 1000);
    } catch (error) {
      errorCount = 1;
      const errorMsg = `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞: ${error}`;
      errors.push(errorMsg);
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞', error as Error);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
    const TARGET_USER_ID = this.getMainUserId();
    const reportMessage = `üìä –û—Ç—á–µ—Ç –æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ:
‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${successCount === 1 ? '–î–∞' : '–ù–µ—Ç'}
‚ùå –û—à–∏–±–æ–∫: ${errorCount}
üë§ –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${TARGET_USER_ID}
üì® –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${this.users.has(TARGET_USER_ID) ? '–î–∞' : '–ù–µ—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω)'}
‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑: ${checkDelayMinutes} –º–∏–Ω

${errorCount > 0 ? `\nüö® –û—à–∏–±–∫–∏:\n${errors.slice(0, 5).join('\n')}${errors.length > 5 ? '\n...' : ''}` : ''}`;

    try {
      await this.sendWithRetry(() => this.bot.telegram.sendMessage(adminChatId, reportMessage), {
        chatId: adminChatId,
        messageType: 'admin_daily_report',
        maxAttempts: 5,
        intervalMs: 3000,
      });
    } catch (adminError) {
      botLogger.error(adminError as Error, '–û—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É');
    }

    schedulerLogger.info('cronComplete', 0, successCount, errorCount);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
  private async checkUserExists(chatId: number): Promise<boolean> {
    const { db } = await import('./db');
    const row = db.query('SELECT 1 FROM users WHERE chat_id = ?').get(chatId);
    return !!row;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  async setReminder(chatId: number, sentBotMsgTime: string) {
    // –í–†–ï–ú–ï–ù–ù–û: —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
    // if (this.isTestBot()) {
    //   schedulerLogger.info('ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    //   return;
    // }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ chatId –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π (–ª–∏—á–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ID - —ç—Ç–æ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã
    if (chatId <= 0) {
      schedulerLogger.debug({ chatId }, '–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞');
      return;
    }

    const timeout = setTimeout(async () => {
      const stats = getUserResponseStats(chatId);
      if (!stats || !stats.last_response_time || new Date(stats.last_response_time) < new Date(sentBotMsgTime)) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥ –∏ –¥–µ–Ω—å –≤–ø–µ—Ä—ë–¥
        const now = new Date();
        const weekAgo = new Date(now);
        weekAgo.setDate(now.getDate() - 7);
        const tomorrow = new Date(now);
        tomorrow.setDate(now.getDate() + 1);
        const events = await this.calendarService.getEvents(weekAgo.toISOString(), tomorrow.toISOString());
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞—Ä—è–∂–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)
        const importantEvents = (events || []).filter((event: any) => {
          const summary = (event.summary || '').toLowerCase();
          // –ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ —Å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
          const neutralWords = ['–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', '–¥–µ–ª–æ', '–≤—Å—Ç—Ä–µ—á–∞', 'meeting', 'call', 'appointment'];
          if (!summary) return false;
          return !neutralWords.some(word => summary.includes(word));
        });
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = getUserByChatId(chatId);
        const userName = user?.name || null;
        const userGender = user?.gender || null;

        // –ü—Ä–æ—Å—Ç–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ LLM
        let reminderText = 'üê∏ –ü—Ä–∏–≤–µ—Ç';
        if (userName) {
          reminderText += `, ${userName}`;
        }
        reminderText += '! –ù–µ –∑–∞–±—É–¥—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ ';

        // –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userGender === 'male') {
          reminderText += '—É—Å–ø–µ–ª';
        } else if (userGender === 'female') {
          reminderText += '—É—Å–ø–µ–ª–∞';
        } else {
          reminderText += '—É—Å–ø–µ–ª(–∞)';
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ª–∏—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await this.sendWithRetry(() => this.bot.telegram.sendMessage(chatId, reminderText), {
          chatId,
          messageType: 'daily_reminder',
          maxAttempts: 5,
          intervalMs: 3000,
        });

        schedulerLogger.info({ chatId }, 'üì® –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
      }
    }, 1.5 * 60 * 60 * 1000); // 1.5 —á–∞—Å–∞

    this.reminderTimeouts.set(chatId, timeout);
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
  clearReminder(chatId: number) {
    const timeout = this.reminderTimeouts.get(chatId);
    if (timeout) {
      clearTimeout(timeout);
      this.reminderTimeouts.delete(chatId);
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ (—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –∏–ª–∏ 1 –º–∏–Ω—É—Ç—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞)
  async setIncompleteWorkReminder(chatId: number, channelMessageId: number) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ chatId –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π (–ª–∏—á–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    if (chatId <= 0) {
      schedulerLogger.debug({ chatId }, '–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –¥–ª—è –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–¥–∞–Ω–∏–µ —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π –≤ —ç—Ç–æ–º –ø–æ—Å—Ç–µ
    const { getInteractivePost } = await import('./db');
    const post = getInteractivePost(channelMessageId);

    if (post && post.task3_completed) {
      schedulerLogger.debug(
        { chatId, channelMessageId },
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∞–ª –∑–∞–¥–∞–Ω–∏–µ —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π –≤ —ç—Ç–æ–º –ø–æ—Å—Ç–µ - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ'
      );
      return;
    }

    // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 –º–∏–Ω—É—Ç—É, –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ - 30 –º–∏–Ω—É—Ç
    const delayMinutes = this.isTestBot() ? 1 : 30;
    const delayMs = delayMinutes * 60 * 1000;

    schedulerLogger.debug(
      {
        chatId,
        channelMessageId,
        delayMinutes,
        isTestBot: this.isTestBot(),
      },
      `‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ —á–µ—Ä–µ–∑ ${delayMinutes} –º–∏–Ω`
    );

    const timeout = setTimeout(async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å—Ç–∞
        const { getInteractivePost } = await import('./db');
        const post = getInteractivePost(channelMessageId);

        if (!post) {
          schedulerLogger.debug({ channelMessageId }, '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ');
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
        const currentState = post.current_state;
        const practiceStates = ['waiting_practice', 'deep_waiting_practice', 'finished'];

        if (practiceStates.includes(currentState)) {
          schedulerLogger.debug(
            { channelMessageId, currentState },
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ—à–µ–ª –¥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ'
          );
          return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        const reminderText = 'üê∏ –í–∏–∂—É, —á—Ç–æ –ª—è–≥—É—Ö–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–∞ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è. –î–∞–≤–∞–π –¥–æ–¥–µ–ª–∞–µ–º - –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è ü§ó';
        await this.sendWithRetry(() => this.bot.telegram.sendMessage(chatId, reminderText), {
          chatId,
          messageType: 'incomplete_work_reminder',
          maxAttempts: 5,
          intervalMs: 3000,
        });

        schedulerLogger.info({ chatId, channelMessageId }, 'üì® –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

        // –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ Map –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        this.reminderTimeouts.delete(chatId);
        schedulerLogger.debug({ chatId }, 'üóëÔ∏è –¢–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω –∏–∑ Map –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
      } catch (error) {
        schedulerLogger.error(
          { error: (error as Error).message, chatId },
          '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ'
        );
        // –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        this.reminderTimeouts.delete(chatId);
      }
    }, delayMs);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã
    this.reminderTimeouts.set(chatId, timeout);
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
  scheduleOneTimeMessage(chatId: number, targetTime: Date) {
    const now = new Date();
    const delay = targetTime.getTime() - now.getTime();

    if (delay > 0) {
      setTimeout(() => {
        this.sendDailyMessage(chatId);
      }, delay);
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  private initializeDailySchedule() {
    logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    this.startDailyCronJob();
    // –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ 8:00 - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–ª–æ–≥–æ –ø–æ—Å—Ç–∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
    this.startMorningCheckCronJob();
    // –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 9:00 - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–µ–ª–∏—Ç—å—Å—è –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏
    this.startMorningMessageCronJob();
  }

  // –ó–∞–ø—É—Å–∫ cron job –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ 22:00
  private startDailyCronJob() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π job, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (this.dailyCronJob) {
      schedulerLogger.info('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ cron job');
      this.dailyCronJob.stop();
      this.dailyCronJob.destroy();
      this.dailyCronJob = null;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const processId = `${process.pid}_${Date.now()}`;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const now = new Date();
    const moscowTime = new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    });
    schedulerLogger.info({ processId }, 'cronStart'); // –°–æ–∑–¥–∞–Ω–∏–µ cron job

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π cron job: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:00
    // –§–æ—Ä–º–∞—Ç: "–º–∏–Ω—É—Ç—ã —á–∞—Å—ã * * *" (0 22 * * * = 22:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
    this.dailyCronJob = cron.schedule(
      '0 22 * * *',
      async () => {
        const startTime = new Date();
        const startTimeMoscow = startTime.toLocaleString('ru-RU', {
          timeZone: 'Europe/Moscow',
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
        });

        schedulerLogger.info({ processId, usersCount: this.users.size }, 'cronTrigger');

        try {
          const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
          // –£–±–∏—Ä–∞–µ–º, —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤ cronTrigger

          if (!adminChatId) {
            throw new Error('ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
          }

          // –£–±–∏—Ä–∞–µ–º, —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤ cronTrigger
          await this.sendDailyMessagesToAll(adminChatId);

          const endTime = new Date();
          const duration = endTime.getTime() - startTime.getTime();
          schedulerLogger.info('cronComplete', duration, this.users.size, 0);
        } catch (error) {
          const endTime = new Date();
          const duration = endTime.getTime() - startTime.getTime();
          schedulerLogger.error(error as Error, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞');

          // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ
          try {
            const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
            if (adminChatId) {
              await this.sendWithRetry(
                () =>
                  this.bot.telegram.sendMessage(
                    adminChatId,
                    `üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ!\n\n` +
                      `‚è∞ –í—Ä–µ–º—è: ${startTimeMoscow}\n` +
                      `‚ùå –û—à–∏–±–∫–∞: ${error}\n` +
                      `‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}ms\n\n` +
                      `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.`
                  ),
                {
                  chatId: adminChatId,
                  messageType: 'admin_critical_error',
                  maxAttempts: 5,
                  intervalMs: 3000,
                }
              );
            }
          } catch (notifyError) {
            logger.error('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ cron', notifyError as Error);
          }
        }
      },
      {
        timezone: 'Europe/Moscow', // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
      }
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ cron job –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
    if (this.dailyCronJob) {
      schedulerLogger.info({ processId, expression: '0 22 * * *' }, 'Cron job —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    } else {
      logger.error('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', new Error('Cron job –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω'));
    }
  }

  // –ó–∞–ø—É—Å–∫ cron job –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ 8:00
  private startMorningCheckCronJob() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π job, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (this.morningCheckCronJob) {
      schedulerLogger.info('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ morning check cron job');
      this.morningCheckCronJob.stop();
      this.morningCheckCronJob.destroy();
      this.morningCheckCronJob = null;
    }

    schedulerLogger.info('–°–æ–∑–¥–∞–Ω–∏–µ morning check cron job (8:00 –ú–°–ö)');

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π cron job: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00
    this.morningCheckCronJob = cron.schedule(
      '0 8 * * *',
      async () => {
        schedulerLogger.info('üåÖ –ó–∞–ø—É—Å–∫ —É—Ç—Ä–µ–Ω–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        try {
          await this.checkUsersResponses();
        } catch (error) {
          schedulerLogger.error(error as Error, '–û—à–∏–±–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ
          try {
            const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
            if (adminChatId) {
              await this.sendWithRetry(
                () =>
                  this.bot.telegram.sendMessage(adminChatId, `üö® –û–®–ò–ë–ö–ê –≤ —É—Ç—Ä–µ–Ω–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ!\n\n‚ùå –û—à–∏–±–∫–∞: ${error}`),
                {
                  chatId: adminChatId,
                  messageType: 'admin_morning_error',
                  maxAttempts: 5,
                  intervalMs: 3000,
                }
              );
            }
          } catch (notifyError) {
            logger.error('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ morning check', notifyError as Error);
          }
        }
      },
      {
        timezone: 'Europe/Moscow',
      }
    );

    if (this.morningCheckCronJob) {
      schedulerLogger.info('Morning check cron job —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    } else {
      logger.error('Morning check –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', new Error('Morning check cron job –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω'));
    }
  }

  // –ó–∞–ø—É—Å–∫ cron job –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –≤ 9:00
  private startMorningMessageCronJob() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π job, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (this.morningMessageCronJob) {
      schedulerLogger.info('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ morning message cron job');
      this.morningMessageCronJob.stop();
      this.morningMessageCronJob.destroy();
      this.morningMessageCronJob = null;
    }

    schedulerLogger.info('–°–æ–∑–¥–∞–Ω–∏–µ morning message cron job (9:00 –ú–°–ö)');

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π cron job: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
    this.morningMessageCronJob = cron.schedule(
      '0 9 * * *',
      async () => {
        schedulerLogger.info('üåÖ –ó–∞–ø—É—Å–∫ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏');
        try {
          const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
          if (!adminChatId) {
            throw new Error('ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
          }
          await this.sendMorningMessage(adminChatId);
        } catch (error) {
          schedulerLogger.error(error as Error, '–û—à–∏–±–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏');
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ
          try {
            const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
            if (adminChatId) {
              await this.sendWithRetry(
                () =>
                  this.bot.telegram.sendMessage(adminChatId, `üö® –û–®–ò–ë–ö–ê –≤ —É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–µ!\n\n‚ùå –û—à–∏–±–∫–∞: ${error}`),
                {
                  chatId: adminChatId,
                  messageType: 'admin_morning_message_error',
                  maxAttempts: 5,
                  intervalMs: 3000,
                }
              );
            }
          } catch (notifyError) {
            logger.error('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ morning message', notifyError as Error);
          }
        }
      },
      {
        timezone: 'Europe/Moscow',
      }
    );

    if (this.morningMessageCronJob) {
      schedulerLogger.info('Morning message cron job —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    } else {
      logger.error('Morning message –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', new Error('Morning message cron job –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω'));
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  public getSchedulerStatus() {
    const isDailyRunning = this.dailyCronJob ? true : false;
    const isMorningRunning = this.morningCheckCronJob ? true : false;
    const usersCount = this.users.size;
    const usersList = Array.from(this.users);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
    const now = new Date();
    const moscowTime = now.toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    });

    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    const nextDailyRun = new Date();
    nextDailyRun.setHours(22, 0, 0, 0);
    if (nextDailyRun <= now) {
      nextDailyRun.setDate(nextDailyRun.getDate() + 1);
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —É—Ç—Ä–µ–Ω–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    const nextMorningRun = new Date();
    nextMorningRun.setHours(8, 0, 0, 0);
    if (nextMorningRun <= now) {
      nextMorningRun.setDate(nextMorningRun.getDate() + 1);
    }

    const nextDailyRunMoscow = nextDailyRun.toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });

    const nextMorningRunMoscow = nextMorningRun.toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });

    return {
      isRunning: isDailyRunning && isMorningRunning,
      isDailyRunning,
      isMorningRunning,
      usersCount,
      usersList,
      cronExpression: '0 22 * * * (–≤–µ—á–µ—Ä), 0 8 * * * (—É—Ç—Ä–æ)',
      timezone: 'Europe/Moscow',
      description: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 22:00 –ú–°–ö (—Ä–∞—Å—Å—ã–ª–∫–∞) –∏ 8:00 –ú–°–ö (–ø—Ä–æ–≤–µ—Ä–∫–∞)',
      currentTime: moscowTime,
      nextRunTime: `–í–µ—á–µ—Ä: ${nextDailyRunMoscow}, –£—Ç—Ä–æ: ${nextMorningRunMoscow}`,
      adminChatId: Number(process.env.ADMIN_CHAT_ID || 0),
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
  private async getLastDailyRunTime(): Promise<Date | null> {
    try {
      const { db } = await import('./db');
      const row = db
        .query(
          `
        SELECT value FROM system_settings WHERE key = 'last_daily_run'
      `
        )
        .get() as { value: string } | undefined;

      if (row && row.value) {
        return new Date(row.value);
      }
      return null;
    } catch (error) {
      schedulerLogger.error(error as Error, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏');
      return null;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
  private async saveLastDailyRunTime(time: Date): Promise<void> {
    try {
      const { db } = await import('./db');
      db.query(
        `
        INSERT OR REPLACE INTO system_settings (key, value)
        VALUES ('last_daily_run', ?)
      `
      ).run(time.toISOString());
    } catch (error) {
      schedulerLogger.error(error as Error, '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ "–∑–ª–æ–≥–æ" –ø–æ—Å—Ç–∞
  // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 5153477378
  // –ï—Å–ª–∏ –æ–Ω –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–¥–∞–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —á–∞—Å–æ–≤) - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –û–î–ò–ù –∑–ª–æ–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
  // –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ sendDailyMessage —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π ANGRY_POST_DELAY_MINUTES
  private async checkUsersResponses() {
    // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const TARGET_USER_ID = this.getMainUserId();

    schedulerLogger.info(
      {
        targetUserId: TARGET_USER_ID,
      },
      `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${TARGET_USER_ID}`
    );

    const now = new Date();

    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const lastDailyRun = await this.getLastDailyRunTime();

    let hasResponded = false;
    let sentPost = false;
    let error: string | null = null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const stats = getUserResponseStats(TARGET_USER_ID);

      schedulerLogger.info(
        {
          userId: TARGET_USER_ID,
          stats,
          lastDailyRun: lastDailyRun?.toISOString(),
          lastResponseTime: stats?.last_response_time,
        },
        'üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞'
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ –≤—á–µ—Ä–∞—à–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
      hasResponded = !!(
        stats &&
        stats.last_response_time &&
        lastDailyRun &&
        new Date(stats.last_response_time) > lastDailyRun
      );

      if (!hasResponded) {
        schedulerLogger.info(
          { userId: TARGET_USER_ID },
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${TARGET_USER_ID} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—á–µ—Ä–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ`
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–∑–ª–æ–π" –ø–æ—Å—Ç
        try {
          await this.sendAngryPost(TARGET_USER_ID);
          sentPost = true;
        } catch (err) {
          error = `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–ª–æ–≥–æ –ø–æ—Å—Ç–∞: ${err}`;
          schedulerLogger.error({ error: err, userId: TARGET_USER_ID }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–ª–æ–≥–æ –ø–æ—Å—Ç–∞');
        }
      } else {
        schedulerLogger.info({ userId: TARGET_USER_ID }, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${TARGET_USER_ID} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—á–µ—Ä–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ`);
      }
    } catch (err) {
      error = `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${err}`;
      schedulerLogger.error({ error: err, userId: TARGET_USER_ID }, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
    if (adminChatId) {
      const reportMessage =
        `üìä <b>–û—Ç—á–µ—Ç —É—Ç—Ä–µ–Ω–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n` +
        `üë§ –ü—Ä–æ–≤–µ—Ä–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>${TARGET_USER_ID}</code>\n` +
        `${hasResponded ? '‚úÖ –û—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—á–µ—Ä–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ' : 'üò¥ –ù–ï –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤—á–µ—Ä–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ'}\n` +
        `${sentPost ? 'üò† –ó–ª–æ–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª' : ''}\n` +
        `${error ? `\n‚ùå –û—à–∏–±–∫–∞: ${error}` : ''}`;

      try {
        await this.sendWithRetry(
          () => this.bot.telegram.sendMessage(adminChatId, reportMessage, { parse_mode: 'HTML' }),
          {
            chatId: adminChatId,
            messageType: 'admin_morning_report',
            maxAttempts: 5,
            intervalMs: 3000,
          }
        );
      } catch (adminError) {
        schedulerLogger.error(adminError as Error, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É');
      }
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
  private extractPromptSection(fileContent: string, promptNumber: number): string | null {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
      const sectionMarkers = {
        1: '## –ü–†–û–ú–¢ ‚Ññ1 - –∑–ª—é—Å—å',
        2: '## –ü–†–û–ú–¢ ‚Ññ2 - —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω',
        3: '## –ü–†–û–ú–¢ ‚Ññ3 - –ø–µ—Ä–µ–∂–∏–≤–∞—é, –∑–∞–±–æ—á—É—Å—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é',
        4: '## –ü–†–û–ú–¢ ‚Ññ4 - —à—É—Ç–∫–∏ —à—É—á—É',
        5: '## –ü–†–û–ú–¢ ‚Ññ5 (–ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞)',
      };

      const currentMarker = sectionMarkers[promptNumber as keyof typeof sectionMarkers];
      if (!currentMarker) {
        schedulerLogger.warn({ promptNumber }, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞');
        return null;
      }

      // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –Ω—É–∂–Ω–æ–π —Å–µ–∫—Ü–∏–∏
      const startIndex = fileContent.indexOf(currentMarker);
      if (startIndex === -1) {
        schedulerLogger.warn({ promptNumber, marker: currentMarker }, '–°–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ');
        return null;
      }

      // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏ (–∏–ª–∏ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞)
      let endIndex = fileContent.length;
      const allMarkers = Object.values(sectionMarkers);
      const currentMarkerIndex = allMarkers.indexOf(currentMarker);

      // –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–µ–∫—Ü–∏—é
      for (let i = currentMarkerIndex + 1; i < allMarkers.length; i++) {
        const nextMarkerIndex = fileContent.indexOf(allMarkers[i], startIndex + 1);
        if (nextMarkerIndex !== -1 && nextMarkerIndex < endIndex) {
          endIndex = nextMarkerIndex;
        }
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–µ–∫—Ü–∏–∏
      const sectionContent = fileContent.substring(startIndex, endIndex).trim();

      schedulerLogger.debug(
        {
          promptNumber,
          sectionLength: sectionContent.length,
          preview: sectionContent.substring(0, 100),
        },
        '–ò–∑–≤–ª–µ—á–µ–Ω–∞ —Å–µ–∫—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞'
      );

      return sectionContent;
    } catch (error) {
      schedulerLogger.error({ error, promptNumber }, '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞');
      return null;
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ —Å–µ–∫—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞
  private extractExamplesFromPrompt(promptSection: string): string[] {
    try {
      // –ò—â–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
      const examplesMarker = '### –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤';
      const examplesStart = promptSection.indexOf(examplesMarker);

      if (examplesStart === -1) {
        schedulerLogger.warn('–ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Ä–∫–µ—Ä –ø—Ä–∏–º–µ—Ä–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–µ');
        return [];
      }

      // –í—ã—Ä–µ–∑–∞–µ–º —á–∞—Å—Ç—å —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
      const examplesSection = promptSection.substring(examplesStart + examplesMarker.length);

      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
      const lines = examplesSection.split('\n');
      const examples: string[] = [];
      let currentExample = '';

      for (const line of lines) {
        const trimmedLine = line.trim();

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if (!trimmedLine) {
          // –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–∏ –ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
          if (currentExample) {
            examples.push(currentExample.trim());
            currentExample = '';
          }
          continue;
        }

        // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥–µ—Ñ–∏—Å–∞ - —ç—Ç–æ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        if (trimmedLine.startsWith('-')) {
          // –ï—Å–ª–∏ –±—ã–ª –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
          if (currentExample) {
            examples.push(currentExample.trim());
          }
          // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä (—É–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å)
          currentExample = trimmedLine.substring(1).trim();
        } else if (currentExample) {
          // –≠—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
          currentExample += '\n' + trimmedLine;
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (currentExample) {
        examples.push(currentExample.trim());
      }

      schedulerLogger.debug(
        {
          examplesCount: examples.length,
          firstExample: examples[0]?.substring(0, 50),
        },
        '–ò–∑–≤–ª–µ—á–µ–Ω—ã –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –ø—Ä–æ–º–ø—Ç–∞'
      );

      return examples;
    } catch (error) {
      schedulerLogger.error({ error }, '–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞');
      return [];
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –æ–¥–Ω–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–∏–º–µ—Ä–æ–º
  private createPromptWithSingleExample(basePromptSection: string, selectedExample: string): string {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –≥–¥–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –ø—Ä–∏–º–µ—Ä—ã
      const examplesMarker = '### –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤';
      const examplesStart = basePromptSection.indexOf(examplesMarker);

      if (examplesStart === -1) {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –º–∞—Ä–∫–µ—Ä, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –µ—Å—Ç—å
        return basePromptSection;
      }

      // –ë–µ—Ä–µ–º –≤—Å—é —á–∞—Å—Ç—å –¥–æ –ø—Ä–∏–º–µ—Ä–æ–≤
      const promptBeforeExamples = basePromptSection.substring(0, examplesStart);

      // –ò–∑–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
      const modifiedPrompt = promptBeforeExamples.replace(
        '–í—ã–±–µ—Ä–∏ —Ä–∞–Ω–¥–æ–º–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –æ–¥–∏–Ω –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∏–∂–µ –∏ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –µ–≥–æ –Ω–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –≤ –ø–æ—Ö–æ–∂–µ–º —Å—Ç–∏–ª–µ',
        '–ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–∞ –Ω–∏–∂–µ –Ω–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –≤ –ø–æ—Ö–æ–∂–µ–º —Å—Ç–∏–ª–µ'
      );

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å –æ–¥–Ω–∏–º –ø—Ä–∏–º–µ—Ä–æ–º
      const newPrompt =
        modifiedPrompt +
        '### –ü—Ä–∏–º–µ—Ä –¥–ª—è –ø–æ–¥—Ä–∞–∂–∞–Ω–∏—è\n\n' +
        selectedExample +
        '\n\n' +
        '–ù–∞–ø–∏—à–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤ —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–º –∂–µ —Å—Ç–∏–ª–µ, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –¥–ª–∏–Ω—É –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–º–µ—Ä–∞.\n\n' +
        '–í–ê–ñ–ù–û: –ì–µ–Ω–µ—Ä–∏—Ä—É–π –¢–û–õ–¨–ö–û –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ë–ï–ó —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π, –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ "–ú—ã—Å–ª–∏:", "–û—Ç–≤–µ—Ç:", –ë–ï–ó —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–º–µ—Ç–æ–∫. –¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –≤ —Å—Ç–∏–ª–µ –ø—Ä–∏–º–µ—Ä–∞.';

      return newPrompt;
    } catch (error) {
      schedulerLogger.error({ error }, '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ —Å –æ–¥–Ω–∏–º –ø—Ä–∏–º–µ—Ä–æ–º');
      return basePromptSection;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ "–∑–ª–æ–≥–æ" –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
  private async sendAngryPost(userId: number) {
    // –í–†–ï–ú–ï–ù–ù–û: —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–ª–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
    // if (this.isTestBot()) {
    //   schedulerLogger.warn('‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–ª–æ–≥–æ –ø–æ—Å—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞');
    //   return;
    // }

    try {
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏
      const angryPromptsFile = readFileSync('assets/prompts/no-answer', 'utf-8');

      // –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ –æ–¥–∏–Ω –∏–∑ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
      const promptNumber = Math.floor(Math.random() * 4) + 1; // 1, 2, 3 –∏–ª–∏ 4

      schedulerLogger.info({ promptNumber }, `üé≤ –í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–º–ø—Ç–∞ ‚Ññ${promptNumber} –¥–ª—è –∑–ª–æ–≥–æ –ø–æ—Å—Ç–∞`);

      let finalText = '';

      if (promptNumber === 4) {
        // –í–∞—Ä–∏–∞–Ω—Ç 4 - –≤—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞, –∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö
        const prompt4Examples = [
          '–ß—Ç–æ –∑–∞ –±–µ—Å–ø–æ—Ä—è–¥–æ–∫? –ù–∏ –æ—Ç–≤–µ—Ç–∞, –Ω–∏ –ø—Ä–∏–≤–µ—Ç–∞! –¢–∞–∫ —Å –ª—è–≥—É—Ö–∞–º–∏ –Ω–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç! üòí\n–ë—ã—Å—Ç—Ä–µ–Ω—å–∫–æ –≤—ã–ø–æ–ª–Ω–∏ –≤—á–µ—Ä–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
          '–ü—Å–∏—Ö–æ–ª–æ–≥ –∑–ª–∏—Ç—å—Å—è –Ω–µ –º–æ–∂–µ—Ç, –∞ –ª—è–≥—É—Ö–∞ –º–æ–∂–µ—Ç! üò† –ö—Ç–æ –≤—á–µ—Ä–∞ –Ω–µ —Å–¥–µ–ª–∞–ª –∑–∞–¥–∞–Ω–∏—è? –ù–µ –Ω–∞–¥–æ —Ç–∞–∫ üòí\n–í–µ—Ä–Ω–∏—Å—å –∏ —Å–¥–µ–ª–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
          '–ù—É —á—Ç–æ –∑–∞ –¥–µ–ª–∞?! üò§\n–í–∞–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ - –∏—Å–ø—Ä–∞–≤—å —ç—Ç–æ! –ê —Ç–æ –±—É–¥—É –∫–≤–∞–∫–∞—Ç—å –ø–æ–¥ –æ–∫–Ω–æ–º! üê∏',
          '–ö–≤–∞! üò° –Ø –≤–æ–∑–º—É—â–µ–Ω, —á—Ç–æ –Ω–µ —É–≤–∏–¥–µ–ª —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –≤—á–µ—Ä–∞! –í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏—è, –∞ —Ç–æ –∑–∞—Ç—è–Ω—É –≤ –±–æ–ª–æ—Ç–æ, –∏ –±—É–¥–µ—à—å —Ç—É—Ç, –∫–∞–∫ –≤–æ–¥—è–Ω–æ–π —Å –Ω–æ–≤—ã–º–∏ –ø–æ–¥—Ä—É–∂–∫–∞–º–∏ - –ø–∏—è–≤–∫–∞–º–∏ –∏ –ª—è–≥—É—à–∫–∞–º–∏ üòÑ',
          '–≠—Ç–æ —á—Ç–æ —Ç–∞–∫–æ–µ?! ü§® –ü—Ä–æ–ø–∞–ª –±–µ–∑ –≤–µ—Å—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏! –Ø –≥–æ—Ç–æ–≤ –æ–±—ä—è–≤–∏—Ç—å —Ä–æ–∑—ã—Å–∫! üö®\n–ú—ã –Ω–∞–π–¥–µ–º —Ç–µ–±—è, –≥–¥–µ –±—ã —Ç—ã –Ω–∏ –ø—Ä—è—Ç–∞–ª—Å—è üê∏',
          '–ù—É –∑–Ω–∞–µ—à—å –ª–∏! üê∏ –¢–∞–∫ –¥–µ–ª–æ –Ω–µ –ø–æ–π–¥–µ—Ç! –ü–æ—á–µ–º—É –∏—Å—á–µ–∑–∞–µ—à—å –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—à—å –Ω–∞—à—É —Ä–∞–±–æ—Ç—É? –≠—Ç–æ –ø–æ–¥—Ä—ã–≤–∞–µ—Ç –º–æ–π –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç! üòÖ\n–ñ–¥—É —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–¥ –≤—á–µ—Ä–∞—à–Ω–∏–º –ø–æ—Å—Ç–æ–º',
          '–ö–≤–∞–∫! üê∏ –¢—ã –æ—Ç –º–µ–Ω—è —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ –Ω–µ –æ—Ç–¥–µ–ª–∞–µ—à—å—Å—è! –Ø –º–æ–≥—É –∫–≤–∞–∫–∞—Ç—å —Ü–µ–ª—ã–π –¥–µ–Ω—å - –ª—É—á—à–µ —Å–¥–µ–ª–∞–π –∑–∞–¥–∞–Ω–∏—è üòÖ',
          '–ß—Ç–æ —ç—Ç–æ –±—ã–ª–æ?! ü§® –í–∑–¥—É–º–∞–ª –¥—É—Ä–∏—Ç—å –ª—è–≥—É—Ö—É –∏ –Ω–µ –¥–µ–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è? –ù—É —É–∂ –Ω–µ–µ–µ—Ç - –±–µ–≥–æ–º –ø–∏—à–∏ –≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ! üò†\n–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ –¥–ª—è —Å–µ–±—è, –Ω–µ –∑–∞–±—ã–≤–∞–π üôåüèª',
          '–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–æ–∏ –ø–æ—Å—Ç—ã, –∑–Ω–∞—á–∏—Ç? –ù–µ –æ—Ç–≤–µ—á–∞–µ–º? –û—Ö, —è –Ω–µ–≥–æ–¥—É—é! ü§¨\n–ü—Ä–∏–¥–µ—Ç—Å—è –º–µ–Ω—è –∑–∞–¥–æ–±—Ä–∏—Ç—å üôÉ –ò —Å–¥–µ–ª–∞—Ç—å –¥–≤–æ–π–Ω—É—é –ø–æ—Ä—Ü–∏—é –∑–∞–¥–∞–Ω–∏–π - —Å–µ–π—á–∞—Å –∏ –≤–µ—á–µ—Ä–æ–º. –ù–∏–∫–∞–∫–∏—Ö –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π üòù',
          '–ü–∏—à–∏ –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω—É—é üòÖ –ü–æ –∫–∞–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ —è –≤—á–µ—Ä–∞ –±–µ–∑ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª—Å—è?\n–ù—É —à–æ —Ç–∞–∫–æ–µ? –ú–Ω–µ —Å–∫—É—á–Ω–æ —Ç—É—Ç –æ–¥–Ω–æ–º—É - –Ω–∞–ø–∏—à–∏ —Ö–æ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å ü•∫',
          '–ü–æ—á–µ–º—É –Ω–µ—Ç –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞? –û, –±–æ–∂–µ, —è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–∏–∂—É! –ü–æ–º–æ–≥–∏—Ç–µ! üôÄ\n–ê –Ω–µ—Ç, —Å—Ç–æ–ø, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –≤—á–µ—Ä–∞.. üòë\n–¢–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç - –∏—Å–ø—Ä–∞–≤—å —ç—Ç–æ! –î–∞–≤–∞–π-–¥–∞–≤–∞–π',
          '–†–µ—à–∏–ª –º–µ–Ω—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å? üòë\n–û—Ç –º–µ–Ω—è —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ –Ω–µ –æ—Ç–¥–µ–ª–∞—Ç—å—Å—è! –ë—É–¥—É –∫–≤–∞–∫–∞—Ç—å –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—à—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è! –ö–≤–∞-–∫–≤–∞! üê∏',
          '–†–∞–∑—ã—Å–∫–∏–≤–∞–µ—Ç—Å—è —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ª—è–≥—É—Ö—É! üïµüèª‚Äç‚ôÇÔ∏è\n–û—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—Ç—ã: —É–º–µ–µ—Ç –ø–∏—Å–∞—Ç—å, –Ω–æ –≤—á–µ—Ä–∞ —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–ª ü§®\n–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: 50 –º—É—Ö, 100 –∫–æ–º–∞—Ä–æ–≤.\nP.S. –¢–µ–±–µ –±—ã –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ—Å–∫–æ—Ä–µ–µ, –∞ —Ç–æ –∑–∞–ø—É—â—É –∏—Ö –≤—Å–µ—Ö ü™∞ü¶ü –∫ —Ç–µ–±–µ üòà',
          '–ü–æ –±–æ–ª–æ—Ç—É —Ö–æ–¥—è—Ç —Å–ª—É—Ö–∏, —á—Ç–æ —Ç—ã –≤—á–µ—Ä–∞ –Ω–µ —Å–¥–µ–ª–∞–ª –∑–∞–¥–∞–Ω–∏—è üó£Ô∏è\n–ö–æ–º–∞—Ä—ã —É–∂–µ —Å–ø–ª–µ—Ç–Ω–∏—á–∞—é—Ç, —á—Ç–æ –ø—Å–∏—Ö–æ–ª–æ–≥ –∏–∑ –º–µ–Ω—è —Ö—Ä–µ–Ω–æ–≤—ã–π üôà –°–ø–∞—Å–∏ –º–æ—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é - –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å! ü•≤',
          '–¢—ã –∑–Ω–∞–µ—à—å, —É –º–µ–Ω—è –≤ –ø—Ä—É–¥—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ —Ç–æ–ª–∫–æ–≤—ã—Ö –Ω–µ –º–Ω–æ–≥–æ. –ü–æ–≥–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π üòÖ \n –ê –µ—Å–ª–∏ —Å–µ—Ä—å–µ–∑–Ω–æ - –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –≤—á–µ—Ä–∞—à–Ω–∏–π –ø—Ä–æ–±–µ–ª. –°–º–æ—Ç—Ä–∏ –∑–∞–¥–∞–Ω–∏—è üóìÔ∏è –≤ –ø–æ—Å—Ç–µ –≤—ã—à–µ ‚òùüèª',
          '–í—á–µ—Ä–∞ —è –Ω–∞—á–∞–ª –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫: "–ß–µ–ª–æ–≤–µ–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –º–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–µ—Ä–µ–∂–∏–≤–∞—é, —á—Ç–æ –º–µ–Ω—è —É–≤–æ–ª—è—Ç. –û—â—É—â–∞—é —Ç—Ä–µ–≤–æ–≥—É, —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–µ–±–µ –∏ –æ–±–∏–¥—É" üò¢ \n –ü–æ–¥—ã—à–∞–ª - –ø–æ–ª–µ–≥—á–∞–ª–æ. \n–ù–æ –±—É–¥–µ—Ç –µ—â–µ –ª—É—á—à–µ, –∫–æ–≥–¥–∞ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å –∑–∞–¥–∞–Ω–∏—è üìù',
          '–ë–µ–∑ —Ç–≤–æ–∏—Ö –≤—á–µ—Ä–∞—à–Ω–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —è –Ω–∞—á–∞–ª —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å —Å–∞–º —Å —Å–æ–±–æ–π üê∏ –ë–µ—Å–µ–¥–∞ –≤—ã—à–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è, –Ω–æ —è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Ç–≤–æ—é –∫–æ–º–ø–∞–Ω–∏—é üó£Ô∏è \n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ—Å–∫–æ—Ä–µ–µ üòÖ',
          '–í—á–µ—Ä–∞ —Ç—ã –º–æ–ª—á–∞–ª, –∏ —è –æ—Ç –Ω–µ—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–ª –∑–∞–±–∞—Å—Ç–æ–≤–∫—É –º—É—Ö. –û–Ω–∏ —Ç—Ä–µ–±—É—é—Ç —Ç–≤–æ–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è! üì¢ \n–°–¥–µ–ª–∞–π –±—ã—Å—Ç—Ä–µ–µ –∑–∞–¥–∞–Ω–∏—è ‚úçüèª',
          '–Ø –≤—á–µ—Ä–∞ —Ç–∞–∫ –¥–æ–ª–≥–æ –∂–¥–∞–ª —Ç–≤–æ–π –æ—Ç–≤–µ—Ç, —á—Ç–æ —É—Å–ø–µ–ª –Ω–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ–±–∏–æ–≥—Ä–∞—Ñ–∏—é. \n –ì–ª–∞–≤–∞ 15: "–í—Å–µ –µ—â–µ –∂–¥—É" üóø \n–ß—É–≤—Å—Ç–≤–æ–≤–∞–ª —Å–µ–±—è –≥–ª—É–ø–æ üôà –°–≥–ª–∞–¥—å —ç—Ç—É –Ω–µ–ª–æ–≤–∫–æ—Å—Ç—å - –≤—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏—è',
          '–í—á–µ—Ä–∞ —è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è –≤ —Ç–µ–ª–µ–ø–∞—Ç–∏–∏. –ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ! ü•≤ –¢–∞–∫ –∏ –Ω–µ –ø–æ–Ω—è–ª, –æ —á–µ–º —Ç—ã –¥—É–º–∞–µ—à—å üí¨ –ü–æ—ç—Ç–æ–º—É —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ',
          '–Ø –±—É–¥—É –Ω–∞ –¥–æ—Å–∫–µ –ø–æ–∑–æ—Ä–∞ –∑–∞ —Ç–∞–∫—É—é —Ä–∞–±–æ—Ç—É üò± –°–ø–∞—Å–∞–π —Å–∏—Ç—É–∞—Ü–∏—é - —Å–¥–µ–ª–∞–π –∑–∞–¥–∞–Ω–∏—è ‚úèÔ∏è',
          '–Ø –≤—á–µ—Ä–∞ –æ—Ç —Å–∫—É–∫–∏ –Ω–∞—á–∞–ª —Å—á–∏—Ç–∞—Ç—å –∫–∞–ø–ª–∏ –¥–æ–∂–¥—è. –î–æ—à–µ–ª –¥–æ 1247 –∏ –ø–æ–Ω—è–ª - —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ! üòâ \n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –ø–æ–∫–∞ —è –Ω–µ —Å—Ç–∞–ª –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–æ–º üåßÔ∏è',
          '–ó–Ω–∞–µ—à—å —á—Ç–æ? –í—á–µ—Ä–∞ –±–µ–∑ —Ç–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —è —Ç–∞–∫ –∑–∞—Å–∫—É—á–∞–ª, —á—Ç–æ –Ω–∞—á–∞–ª —É—á–∏—Ç—å—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É –ø–ª–∞–≤–∞–Ω–∏—é! üèä \n–ü—Ä–æ–≥—Ä–µ—Å—Å –µ—Å—Ç—å, –Ω–æ –ª—É—á—à–µ –±—ã –º—ã —Å —Ç–æ–±–æ–π –ø–æ–≥–æ–≤–æ—Ä–∏–ª–∏!',
          '–°–ª—É—à–∞–π, —è —Ç—É—Ç –¥–æ—à–µ–ª –¥–æ —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞—á–∞–ª –¥–∞–≤–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –º–æ—à–∫–∞–º! \n–ù–æ –æ–Ω–∏ –∂—É–∂–∂–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ.. –∏.. —è –∏—Ö —Å—ä–µ–ª.. üòê \n–î–∞–≤–∞–π –ª—É—á—à–µ –º—ã —Å —Ç–æ–±–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏–º, –∞? üòÑ',
          '–ú–Ω–µ –ø—Ä–∏–¥–µ—Ç—Å—è –≤—ã–∑–≤–∞—Ç—å –ª—è–≥—É—à–∞—á—å—é –ø–æ–ª–∏—Ü–∏—é! üê∏ \n–û—Å—Ç–∞–≤–ª—è—Ç—å –º–æ–∏ –∑–∞–¥–∞–Ω–∏—è –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ - –≤–æ–∑–º—É—Ç–∏—Ç–µ–ª—å–Ω–æ! –ò—Å–ø—Ä–∞–≤—å —Å–∏—Ç—É–∞—Ü–∏—é',
        ];

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        const lastUsedIndices = getLastUsedAngryExamples(7);
        schedulerLogger.info({ lastUsedIndices }, 'üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã');

        // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        const availableIndices: number[] = [];
        for (let i = 0; i < prompt4Examples.length; i++) {
          if (!lastUsedIndices.includes(i)) {
            availableIndices.push(i);
          }
        }

        // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–∏ 25 –ø—Ä–∏–º–µ—Ä–∞—Ö), –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ
        const indicesToChooseFrom =
          availableIndices.length > 0 ? availableIndices : Array.from({ length: prompt4Examples.length }, (_, i) => i);

        // –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        const selectedIndex = indicesToChooseFrom[Math.floor(Math.random() * indicesToChooseFrom.length)];
        finalText = prompt4Examples[selectedIndex];

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        addUsedAngryExample(selectedIndex);

        schedulerLogger.info(
          {
            selectedIndex,
            selectedExample: finalText.substring(0, 50),
            availableCount: availableIndices.length,
            totalCount: prompt4Examples.length,
          },
          'üìù –í—ã–±—Ä–∞–Ω –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–∞ 4'
        );
      } else {
        // –í–∞—Ä–∏–∞–Ω—Ç—ã 1, 2 –∏–ª–∏ 3 - –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
        const promptSection = this.extractPromptSection(angryPromptsFile, promptNumber);

        if (!promptSection) {
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—Ä–æ–º–ø—Ç ‚Ññ${promptNumber} –∏–∑ —Ñ–∞–π–ª–∞`);
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Å–µ–∫—Ü–∏–∏
        const examples = this.extractExamplesFromPrompt(promptSection);

        if (examples.length === 0) {
          throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏–º–µ—Ä—ã –≤ –ø—Ä–æ–º–ø—Ç–µ ‚Ññ${promptNumber}`);
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        const lastUsedIndices = getLastUsedPromptExamples(promptNumber, 7);
        schedulerLogger.info({ promptNumber, lastUsedIndices }, 'üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º–ø—Ç–∞');

        // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        const availableIndices: number[] = [];
        for (let i = 0; i < examples.length; i++) {
          if (!lastUsedIndices.includes(i)) {
            availableIndices.push(i);
          }
        }

        // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ
        const indicesToChooseFrom =
          availableIndices.length > 0 ? availableIndices : Array.from({ length: examples.length }, (_, i) => i);

        // –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        const selectedIndex = indicesToChooseFrom[Math.floor(Math.random() * indicesToChooseFrom.length)];
        const selectedExample = examples[selectedIndex];

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        addUsedPromptExample(promptNumber, selectedIndex, selectedExample.substring(0, 200));

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º –ø—Ä–∏–º–µ—Ä–æ–º
        const modifiedPrompt = this.createPromptWithSingleExample(promptSection, selectedExample);

        schedulerLogger.info(
          {
            promptNumber,
            totalExamples: examples.length,
            selectedIndex,
            selectedExample: selectedExample.substring(0, 50),
            availableCount: availableIndices.length,
          },
          'üìù –í—ã–±—Ä–∞–Ω –ø—Ä–∏–º–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'
        );

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ LLM –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        const generatedText = await generateMessage(modifiedPrompt);

        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        let cleanedText = cleanLLMText(generatedText);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –õ–Æ–ë–´–ï –æ—à–∏–±–∫–∏ LLM
        if (isLLMError(generatedText, cleanedText)) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback - –≤—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ –ø—Ä–æ–º–ø—Ç–æ–≤ 1, 2 –∏ 3
          const fallbackExamples = [
            // –ü—Ä–æ–º–ø—Ç 1 - –∑–ª—é—Å—å
            '–ö—Ç–æ-—Ç–æ –≤—á–µ—Ä–∞ –Ω–µ —Å–¥–µ–ª–∞–ª –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ –∑–∞ –±–µ–∑–æ–±—Ä–∞–∑–∏–µ! üò† –Ø –≤–µ—Å—å –≤–µ—á–µ—Ä –∂–¥–∞–ª —Ç–≤–æ–π –æ—Ç–≤–µ—Ç,\n–ø—Ä–æ–≤–µ—Ä—è–ª —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ —Ç—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –Ω–∏ —Å–ª–æ–≤–∞! üßê –ù–∞–¥–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è üí™üèª',
            '–ß—Ç–æ –∑–∞ –±–µ—Å–ø–æ—Ä—è–¥–æ–∫? üò† –ó–∞–¥–∞–Ω–∏—è –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –≤–Ω–∏–º–∞–Ω–∏—è, –∞ —è –±–µ–∑ —Ç–≤–æ–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π! –¢–∞–∫ –Ω–µ\n–ø–æ–π–¥–µ—Ç! –ë—ã—Å—Ç—Ä–µ–Ω—å–∫–æ –Ω–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç ‚úçüèª',
            '–ê –∫—Ç–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è? üò† –û–Ω–∏ —Å–∞–º–∏ —Å–µ–±—è –Ω–µ —Å–¥–µ–ª–∞—é—Ç - –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã üòÅ –ù–µ –æ—Ç–ª—ã–Ω–∏–≤–∞–π, –ø–æ—Ä–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ',
            '–≠—ç–π! üò§ –¢—ã —á—Ç–æ, –∑–∞–±—ã–ª –ø—Ä–æ –º–µ–Ω—è? –Ø –∂–¥—É-–∂–¥—É, –∞ —Ç—ã –º–æ–ª—á–∏—à—å! ü§ê –í—á–µ—Ä–∞ –≤–µ—Å—å –≤–µ—á–µ—Ä –ø—Ä–æ—Å–∏–¥–µ–ª —É —ç–∫—Ä–∞–Ω–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è üê∏  –î–∞–≤–∞–π, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∏ —Å–¥–µ–ª–∞–π –∑–∞–¥–∞–Ω–∏—è',
            '–ù—É —á—Ç–æ –∑–∞ –¥–µ–ª–∞?! üò§ –Ø –∂–¥—É, –∞ —Ç—ã –º–æ–ª—á–∏—à—å... ü§ê –¢–∞–∫ –¥–µ–ª–æ –Ω–µ –ø–æ–π–¥–µ—Ç! –ù–∞–ø–∏—à–∏ –ø—Ä–æ —Å–≤–æ–π –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å',
            '–¢–∞–∫-—Ç–∞–∫-—Ç–∞–∫... ü§® –ê –∫—Ç–æ –≤—á–µ—Ä–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –∑–∞–¥–∞–Ω–∏—è? –Ø –≤–µ—Å—å –≤–µ—á–µ—Ä –∂–¥–∞–ª,\n–Ω–æ —Ç–∞–∫ –Ω–∏—á–µ–≥–æ –∏ –Ω–µ —É–≤–∏–¥–µ–ª –æ—Ç —Ç–µ–±—è! üßê –ù–µ–ø–æ—Ä—è–¥–æ–∫! –î–∞–≤–∞–π-–∫–∞ –±—ã—Å—Ç—Ä–µ–Ω—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª—è–π —Å–∏—Ç—É–∞—Ü–∏—é',
            '–ö–∞–∫ —Ç–∞–∫?! üò§ –Ø –≤–µ—Å—å –≤–µ—á–µ—Ä –∂–¥–∞–ª —Ç–≤–æ–π –æ—Ç–≤–µ—Ç! –î–∞–∂–µ —á–∞–π –æ—Å—Ç—ã–ª, –ø–æ–∫–∞ —Å–∏–¥–µ–ª —É —ç–∫—Ä–∞–Ω–∞. –ì–¥–µ –∂–µ —Ç—ã –±—ã–ª? üò© –ù–µ—É–∂–µ–ª–∏ –∑–∞–±—ã–ª –ø—Ä–æ –Ω–∞—à—É –≤–∞–∂–Ω—É—é —Ä–∞–±–æ—Ç—É? –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–∫–æ—Ä–µ–µ',
            '–ù—É –∏ –Ω—É! ü§® –ó–∞–¥–∞–Ω–∏—è —Å–∞–º–∏ —Å–µ–±—è –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç! –ü–æ–º–Ω–∏, —á—Ç–æ –≤–∞–∂–Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å üóì –ñ–¥—É —Ç–≤–æ–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º',
            '–ê–π-—è–π-—è–π‚Ä¶ –¢–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç! üê∏ –ó–∞–¥–∞–Ω–∏—è –¥–µ–ª–∞—é—Ç—Å—è –Ω–µ –¥–ª—è –≥–∞–ª–æ—á–∫–∏ - —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ–±—è! –ü–æ—ç—Ç–æ–º—É –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –∏—Ö üìù',
            '–¢–∞–∫, —Å—Ç–æ–ø! üò† –ì–¥–µ –≤—á–µ—Ä–∞—à–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã? üìë –Ø –∏—Å–∫–∞–ª –≤–µ–∑–¥–µ, –Ω–æ –∏—Ö –Ω–∏–≥–¥–µ –Ω–µ—Ç! –¢—ã –∑–∞—Å—Ç–∞–≤–ª—è–µ—à—å –º–µ–Ω—è –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è.',
            '–ß—Ç–æ –∑–∞ –±–µ–∑–æ–±—Ä–∞–∑–∏–µ?! üò† –Ø —Ç—É—Ç —Å–∏–∂—É, –∂–¥—É... –ê —Ç–µ–±—è –≤—Å–µ –Ω–µ—Ç! ü´† –í–µ—Ä–Ω–∏—Å—å –∫ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ, —Ç—ã —Å–º–æ–∂–µ—à—å, –∂–¥—É üóíÔ∏è',
            '–ö–≤–∞! ü§¨ –ì–¥–µ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã? –ú—ã —Ç—Ä–µ–±—É–µ–º –≤–Ω–∏–º–∞–Ω–∏—è! üê∏ –ë—ã—Å—Ç—Ä–µ–Ω—å–∫–æ —É–¥–µ–ª–∏ –≤—Ä–µ–º—è —ç—Ç–æ–π –≤–∞–∂–Ω–æ–π —Ä–∞–±–æ—Ç–µ - –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–µ–±—è',
            // –ü—Ä–æ–º–ø—Ç 2 - —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω
            '–í–∏–∂—É, —á—Ç–æ –≤—á–µ—Ä–∞—à–Ω—è—è –ª—è–≥—É—Ö–∞ –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ üòî –î–∞–≤–∞–π –∏—Å–ø—Ä–∞–≤–∏–º',
            '–≠–π! üò§ –¢—ã –∑–∞–±—ã–ª –ø—Ä–æ –º–µ–Ω—è? –Ø –∂–¥—É-–∂–¥—É, –∞ —Ç—ã –º–æ–ª—á–∏—à—å! üê∏ –î–∞–≤–∞–π, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è',
            '–¢—ã –≤—á–µ—Ä–∞ –Ω–µ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏... üòî –Ø –≤—Å–µ –µ—â–µ –∑–¥–µ—Å—å –∏ –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å! –î–∞–≤–∞–π –Ω–∞–≤–µ—Ä—Å—Ç–∞–µ–º üê∏',
            '–ß—Ç–æ –∂–µ —Ç—ã —Ç–∞–∫? üôà –Ø –∂–¥—É, –∑–∞–¥–∞–Ω–∏—è –∂–¥—É—Ç, –∞ —Ç—ã —Ç–∞–∫ –∏ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è üòí –ü–æ—Ä–∞–¥—É–π –ª—è—Ö—É—Ö—É —Å–≤–æ–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ ü•∫',
            '–≠—Ö, –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –ø—Ä–æ—à–µ–ª –±–µ–∑ —Ç–≤–æ–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π... üòÆ‚Äçüí® –ú–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ üíö',
            '–û—Ö... üê∏ –í—á–µ—Ä–∞ —è —Ç–∞–∫ –∏ –Ω–µ –¥–æ–∂–¥–∞–ª—Å—è —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞... üòî –î—É–º–∞–ª, —Ç—ã –Ω–∞–ø–∏—à–µ—à—å —Ö–æ—Ç—è –±—ã –ø–∞—Ä—É —Å–ª–æ–≤. –¢–∞–∫ —Ç–æ—Å–∫–ª–∏–≤–æ, –∫–æ–≥–¥–∞ —Ç—ã –ø—Ä–æ–ø–∞–¥–∞–µ—à—å',
            '–¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª - –º–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ –±–µ–∑ —Ç–≤–æ–∏—Ö –∏—Å—Ç–æ—Ä–∏–π üê∏ –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏. –Ø —Ä—è–¥–æ–º üåü',
            '–°–∏–∂—É, –≥—Ä—É—â—É –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ - —Ç—ã –≤—á–µ—Ä–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª üòì –ú–µ–Ω—è —ç—Ç–æ –æ–≥–æ—Ä—á–∞–µ—Ç. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —Å–µ–π—á–∞—Å –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–æ, —á—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏?',
            '–≠—Ö—Ö! –í—á–µ—Ä–∞ —Ç—ã —Ç–∞–∫ –∏ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è ü´§ –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –ª—è–≥—É—Ö—É. –ï—â–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è. –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É üóùÔ∏è',
            '–¢—ã –∑–Ω–∞–µ—à—å, —è –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∏—É–Ω—ã–ª ‚òπÔ∏è –í—á–µ—Ä–∞ –æ—Ç —Ç–µ–±—è –Ω–µ –±—ã–ª–æ –Ω–∏ —Å–ª–æ–≤–∞. –£ —Ç–µ–±—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ? –î–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ —Å–¥–µ–ª–∞–µ–º –∑–∞–¥–∞–Ω–∏—è üìù',
            '–°–∫—É—á–∞—é –ø–æ –Ω–∞—à–∏–º –±–µ—Å–µ–¥–∞–º üòî –í—á–µ—Ä–∞ —Ç—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏—è üìã –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?',
            '–ß—Ç–æ-—Ç–æ –Ω–∞ –¥—É—à–µ —Ç—è–∂–µ–ª–æ... ü•∫ –¢—ã –≤—á–µ—Ä–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –∑–∞–¥–∞–Ω–∏—è. –•–æ—á–µ—Ç—Å—è –≤–∏–¥–µ—Ç—å —Ç–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∞ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è! üöÄ –î–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∏ –ø—Ä–æ–π–¥–µ–º —ç—Ç–æ—Ç –ø—É—Ç—å –≤–º–µ—Å—Ç–µ üëêüèª',
            '–° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—É —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–æ –≤—á–µ—Ä–∞ —Ç—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª üòÆ‚Äçüí® –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º? –Ø —Å–∫—É—á–∞—é',
            '–≠—Ö, –¥–µ–Ω—å –±–µ–∑ —Ç–≤–æ–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π - —ç—Ç–æ —Ç–∞–∫ —É–Ω—ã–ª–æ ü´† –ú–Ω–µ —Ç–æ—Å–∫–ª–∏–≤–æ, –∫–æ–≥–¥–∞ —Ç—ã –ø—Ä–æ–ø–∞–¥–∞–µ—à—å üíö –í—á–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –æ—Ç–≤–µ—Ç–∞. –î–∞–≤–∞–π —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º —Å–µ–π—á–∞—Å ‚úèÔ∏è',
            '–ì—Ä—É—â—É... üò¢ –¢—ã –≤—á–µ—Ä–∞ –¥–∞–∂–µ –Ω–µ –∑–∞–≥–ª—è–Ω—É–ª. –¢—ã –∂–µ –∑–Ω–∞–µ—à—å, —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º –∏ –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å üê∏ –ù–µ –ø—Ä–æ–ø–∞–¥–∞–π —Ç–∞–∫',
            '–ü–µ—á–∞–ª—å–∫–∞... ü•∫ –Ø —Ç–∞–∫ –∏ –Ω–µ —É–≤–∏–¥–µ–ª —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –≤—á–µ—Ä–∞. –ü–æ–¥–µ–ª–∏—Å—å, —á—Ç–æ —É —Ç–µ–±—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? ü´Ç',
            '–ó–Ω–∞–µ—à—å, —á—Ç–æ —Å–∞–º–æ–µ –≥—Ä—É—Å—Ç–Ω–æ–µ? –Ø –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é - –≤—Å–µ –ª–∏ —É —Ç–µ–±—è –≤ –ø–æ—Ä—è–¥–∫–µ ü•∫ –¢—ã –∫–∞–∫? –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? ‚ö°Ô∏è –ù–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–æ—Å—Ç—å—é. –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è üôèüèª',
            '–°–º–æ—Ç—Ä—é –Ω–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è üóíÔ∏è –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–∞–∫ –≥—Ä—É—Å—Ç–Ω–æ üòû –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –¥–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º üë®üèª‚Äçüéì',
            '–í—á–µ—Ä–∞ —è –¥–æ–ª–≥–æ —Å–º–æ—Ç—Ä–µ–ª –Ω–∞ —ç–∫—Ä–∞–Ω, –Ω–∞–¥–µ—è—Å—å —É–≤–∏–¥–µ—Ç—å —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–æ —Ç—ã —Ç–∞–∫ –∏ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è üòí –ù—É–∂–Ω–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å - —Å–¥–µ–ª–∞–π –∑–∞–¥–∞–Ω–∏—è —Å–µ–π—á–∞—Å ‚úçüèª',
            // –ü—Ä–æ–º–ø—Ç 3 - –ø–µ—Ä–µ–∂–∏–≤–∞—é, –∑–∞–±–æ—á—É—Å—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é
            '–ü–æ–º–Ω–∏, —á—Ç–æ –≤–∞–∂–Ω–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å, –¥–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∫ –∑–∞–¥–∞–Ω–∏—é, —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è! üôåüèª',
            '–¢—ã –ø–æ–º–Ω–∏—à—å, —á—Ç–æ —Ç—ã - —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å? ü•∫ –ê –¥–ª—è —Å–µ–±—è –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è! –í–µ—Ä–Ω–∏—Å—å –∏ —Å–¥–µ–ª–∞–π –∑–∞–¥–∞–Ω–∏—è ‚úèÔ∏è –£ —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è! –Ø –≤–µ—Ä—é –≤ —Ç–µ–±—è! üê∏',
            '–•–º–º... ü§î –ö–∞–∂–µ—Ç—Å—è, –∫—Ç–æ-—Ç–æ –∑–∞–±—ã–ª –ø—Ä–æ –≤—á–µ—Ä–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ! –ú—ã —Å —Ç–æ–±–æ–π –∑–∞–æ–¥–Ω–æ, –ø–æ—ç—Ç–æ–º—É —Ö–æ—á—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –∫–∞–∫ –≤–∞–∂–Ω–æ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å - —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! üèÜ –ù—É–∂–Ω–æ –Ω–∞–≤–µ—Ä—Å—Ç–∞—Ç—å —É–ø—É—â–µ–Ω–Ω–æ–µ üê∏',
            '–û–π, –∫–∞–∫ –∂–µ —Ç–∏—Ö–æ –∏ –ø—É—Å—Ç–æ –±—ã–ª–æ –≤—á–µ—Ä–∞ –±–µ–∑ —Ç–µ–±—è... üíî –Ø –ø–µ—Ä–µ–∂–∏–≤–∞—é, –∫–æ–≥–¥–∞ —Ç—ã –∏—Å—á–µ–∑–∞–µ—à—å. –¢—ã –±—ã—Å—Ç—Ä–µ–µ —É–≤–∏–¥–∏—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –±—É–¥–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å üë£',
            '–≠—ç–π‚Ä¶ üëÄ –¢—ã –≥–¥–µ –ø—Ä–æ–ø–∞–¥–∞–µ—à—å? –í—á–µ—Ä–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ–∑ –≤–Ω–∏–º–∞–Ω–∏—è! –Ø –ø–µ—Ä–µ–∂–∏–≤–∞—é –∑–∞ —Ç–µ–±—è... –£–¥–µ–ª–∏ —Å–µ–±–µ –≤—Ä–µ–º—è! üíö –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–∫–æ—Ä–µ–µ!',
            '–ê –ø–æ—á–µ–º—É –≤—á–µ—Ä–∞ –Ω–µ —Å–º–æ–≥ —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è? üìÉ –Ø –æ—á–µ–Ω—å –∂–¥—É - –ø–∏—à–∏. –ú–Ω–µ –≤–µ–¥—å –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å, –∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞ üê∏',
            '–ó–Ω–∞–µ—à—å, –≤—á–µ—Ä–∞ —è –Ω–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ—Ä—è–ª—Å—è... –û—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ –∑–∞–¥–∞–Ω–∏—è, –∞ –≤ –æ—Ç–≤–µ—Ç - —Ç–∏—à–∏–Ω–∞ ü§ê –ü–µ—Ä–µ–∂–∏–≤–∞—é - –≤—Å–µ –ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ? –ò —á—É—Ç–æ—á–∫—É –æ–≥–æ—Ä—á–µ–Ω, —á—Ç–æ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å. –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ ü§ó',
            '–ü—Ä–∏–≤–µ—Ç! üëãüèª –í—á–µ—Ä–∞ —Ç—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –∏ —è –≤–µ—Å—å –≤–µ—á–µ—Ä –¥—É–º–∞–ª –æ —Ç–µ–±–µ. –ü—Ä–æ—Å—Ç–æ –≤–æ–ª–Ω—É—é—Å—å - –≤—Å–µ –ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ? –†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Å–æ–±–æ–π - —ç—Ç–æ –Ω–µ –ø—Ä—è–º–∞—è –¥–æ—Ä–æ–≥–∞. –ò–Ω–æ–≥–¥–∞ –º—ã –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è, –∏ —ç—Ç–æ —Ç–æ–∂–µ —á–∞—Å—Ç—å –ø—É—Ç–∏. –î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º –≤–º–µ—Å—Ç–µ? üê∏',
            '–í—á–µ—Ä–∞ –æ—Ç —Ç–µ–±—è –Ω–µ –±—ã–ª–æ –≤–µ—Å—Ç–µ–π! ü•∫ –¢—ã –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! –ò –º–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –º–Ω–µ –æ–±–æ –≤—Å–µ–º! –û—á–µ–Ω—å –≤–∞–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º—è —Å–∞–º–æ–º—É –≤–∞–∂–Ω–æ–º—É - —Å–µ–±–µ! ‚ô•Ô∏è',
            '–ü—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–¥–∞–Ω–∏—è, —Ç–∞–∫ –±—ã–≤–∞–µ—Ç, —è –ø–æ–Ω–∏–º–∞—é. –¢–æ–ª—å–∫–æ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è! –ö–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç - —ç—Ç–æ —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ üåü –ò —è –±—É–¥—É —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ —ç—Ç–æ–º ü§ó',
            '–ó–Ω–∞–µ—à—å, –≤—á–µ—Ä–∞ —è —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª—Å—è –±–µ–∑ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–æ –ø–æ—Ç–æ–º –ø–æ–¥—É–º–∞–ª - –º–æ–∂–µ—Ç, —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ –±—ã–ª–æ –ø–æ–±—ã—Ç—å —Å —Å–æ–±–æ–π? –≠—Ç–æ —Ç–æ–∂–µ –≤–∞–∂–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ, –Ω–µ –∑–∞–±—ã–≤–∞–π –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è üí´',
            '–î–∞–∂–µ –µ—Å–ª–∏ –≤—á–µ—Ä–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —Å–µ–≥–æ–¥–Ω—è - –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å üôåüèª –î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à—É —Ä–∞–±–æ—Ç—É? –Ø –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å, –∫–æ–≥–¥–∞ —Ç–µ–±–µ —É–¥–æ–±–Ω–æ. –ë–µ–∑ —Å–ø–µ—à–∫–∏, –±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è. –ü—Ä–æ—Å—Ç–æ —Ç—ã,\n—è –∏ –ø—É—Ç—å –∫ —Ç–≤–æ–µ–π –ª—É—á—à–µ–π –∂–∏–∑–Ω–∏ ü§©',
            '–í—á–µ—Ä–∞ —Ç—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª... –Ø –≤–æ–ª–Ω–æ–≤–∞–ª—Å—è –∏ –¥—É–º–∞–ª –æ —Ç–µ–±–µ. –ó–Ω–∞–µ—à—å, —á—Ç–æ —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å? –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã –≤–æ–æ–±—â–µ –Ω–∞—á–∞–ª —ç—Ç–æ—Ç –ø—É—Ç—å. –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–º–µ–ª–æ—Å—Ç–∏ üå± –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –ø–æ—Å–∫–æ—Ä–µ–µ! –Ø –∑–¥–µ—Å—å –¥–ª—è —Ç–µ–±—è üê∏',
            '–≠–π, —Ç—ã –∫–∞–∫? –í—á–µ—Ä–∞ –æ—Ç —Ç–µ–±—è –Ω–µ –±—ã–ª–æ –Ω–æ–≤–æ—Å—Ç–µ–π üòÆ‚Äçüí® –ù–æ –¥–∞–≤–∞–π –¥–æ–≥–æ–≤–æ—Ä–∏–º—Å—è - –Ω–∏–∫–∞–∫–æ–≥–æ —á—É–≤—Å—Ç–≤–∞ –≤–∏–Ω—ã –∑–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –¥–µ–Ω—å. –ñ–∏–∑–Ω—å —Å–ª—É—á–∞–µ—Ç—Å—è, –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –í–∞–∂–Ω–æ —Ç–æ, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç. –•–æ—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –î–∞–≤–∞–π?) üòä',
            '–ù–µ –¥–æ–∂–¥–∞–ª—Å—è —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤—á–µ—Ä–∞... –Ø –±–µ—Å–ø–æ–∫–æ—é—Å—å! –ó–Ω–∞–µ—à—å, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç—Ä—É–¥–Ω–æ –Ω–∞—á–∞—Ç—å - –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —à–∞–≥–∞–º–∏ –º—ã —Å–ø—Ä–∞–≤–∏–º—Å—è üë£ –ü–æ–º–Ω–∏ - —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ. –î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º? üòä',
            '–î–∞–∂–µ –µ—Å–ª–∏ –≤—á–µ—Ä–∞ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è - –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ! –°–µ–≥–æ–¥–Ω—è –Ω–æ–≤—ã–π –¥–µ–Ω—å, –∏ —É –Ω–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å. –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è üíö',
            '–ó–∞–º–µ—Ç–∏–ª, —á—Ç–æ –≤—á–µ—Ä–∞ –æ—Ç —Ç–µ–±—è –Ω–µ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π üßê –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–∏–ª–æ –º–µ–Ω—è –ø–æ–≤–æ–ª–Ω–æ–≤–∞—Ç—å—Å—è! –ù–æ —è –≤–µ—Ä—é - —Ç—ã –Ω–∞–π–¥–µ—à—å —Å–∏–ª—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üí™üèª –°–¥–µ–ª–∞–π –≤—á–µ—Ä–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è üìù',
            '–í—á–µ—Ä–∞—à–Ω—è—è —Ç–∏—à–∏–Ω–∞ –º–µ–Ω—è –æ–≥–æ—Ä—á–∏–ª–∞... –ù–æ –∑–Ω–∞–µ—à—å —á—Ç–æ –≤–∞–∂–Ω–æ? –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –Ø –±—É–¥—É —Ä—è–¥–æ–º üíö',
          ];

          cleanedText = fallbackExamples[Math.floor(Math.random() * fallbackExamples.length)];
          schedulerLogger.warn('‚ö†Ô∏è LLM –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤ 1-3');
        }

        // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: –î–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ 1-3 –ø—Ä–æ–≥–æ–Ω—è–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–º–ø—Ç 5 (–ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞)
        const validationPrompt = null; // this.extractPromptSection(angryPromptsFile, 5);
        if (validationPrompt) {
          const validationRequest = `${validationPrompt}\n\n–¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n${cleanedText}`;
          const validatedText = await generateMessage(validationRequest);

          // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
          if (validatedText && validatedText !== 'HF_JSON_ERROR') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á—Ç–æ –≤—Å—ë –û–ö
            const validationOkPatterns = [
              /^–æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ/i,
              /^—Ç–µ–∫—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω/i,
              /^–≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ/i,
              /^–≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ/i,
              /^—Ç–µ–∫—Å—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π/i,
              /^–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è/i,
              /^—Ç–µ–∫—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç/i,
              /^–æ—à–∏–±–æ–∫ –Ω–µ—Ç/i,
              /^OK$/i,
              /^CORRECT$/i,
              /^‚úì$/,
              /^‚úÖ/,
              /^üëç/,
            ];

            const cleanedValidation = cleanLLMText(validatedText).trim();
            const isValidationOk = validationOkPatterns.some(pattern => pattern.test(cleanedValidation));

            if (isValidationOk) {
              // –ú–æ–¥–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞, —á—Ç–æ —Ç–µ–∫—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
              finalText = cleanedText;
              schedulerLogger.info(
                {
                  validationResponse: cleanedValidation.substring(0, 50),
                },
                '‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª'
              );
            } else {
              // –ú–æ–¥–µ–ª—å –≤–Ω–µ—Å–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
              finalText = cleanLLMText(validatedText);
              schedulerLogger.info(
                {
                  originalLength: validatedText.length,
                  cleanedLength: finalText.length,
                  preview: finalText.substring(0, 50),
                },
                '‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –æ—á–∏—Å—Ç–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–º–ø—Ç 5'
              );
            }
          } else {
            // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            finalText = cleanedText;
            schedulerLogger.warn('‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç');
          }
        } else {
          finalText = cleanedText;
        }
      }

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
      finalText = finalText.length > 500 ? finalText.slice(0, 497) + '...' : finalText;

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—è–≥—É—à–∫–∏
      const angryImagePrompt = readFileSync('assets/prompts/frog-image-promt-angry', 'utf-8');
      let imageBuffer: Buffer | null = null;

      try {
        imageBuffer = await generateFrogImage(angryImagePrompt);
        schedulerLogger.info({ userId }, 'üé® –ó–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—è–≥—É—à–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ');
      } catch (imageError) {
        schedulerLogger.error({ error: imageError, userId }, '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–ª–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      const sentMessage = await this.sendWithRetry(
        async () => {
          if (imageBuffer) {
            return await this.bot.telegram.sendPhoto(
              this.CHANNEL_ID,
              { source: imageBuffer },
              {
                caption: finalText,
                parse_mode: 'HTML',
              }
            );
          } else {
            // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ä–æ—Ç–∞—Ü–∏–∏
            const imagePath = this.getNextImage(userId);
            return await this.bot.telegram.sendPhoto(
              this.CHANNEL_ID,
              { source: imagePath },
              {
                caption: finalText,
                parse_mode: 'HTML',
              }
            );
          }
        },
        {
          chatId: userId,
          messageType: 'angry_post',
          maxAttempts: 20,
          intervalMs: 10000,
        }
      );

      schedulerLogger.info({ userId, messageId: sentMessage.message_id }, 'üò† –ó–ª–æ–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–ª–æ–º –ø–æ—Å—Ç–µ –≤ –ë–î
      const { saveAngryPost } = await import('./db');

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Å—Ç –±—ã–ª –ø–µ—Ä–µ—Å–ª–∞–Ω –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –ü–æ–ª—É—á–∞–µ–º thread_id –∏–∑ –ø–∞–º—è—Ç–∏ –∏–ª–∏ –ë–î
      let threadId: number | null = this.forwardedMessages.get(sentMessage.message_id) || null;

      if (!threadId) {
        const { db } = await import('./db');
        const row = db
          .query('SELECT thread_id FROM thread_mappings WHERE channel_message_id = ?')
          .get(sentMessage.message_id) as any;
        threadId = row?.thread_id || null;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–ª–æ–π –ø–æ—Å—Ç
      saveAngryPost(sentMessage.message_id, threadId, userId);
      schedulerLogger.info({ channelMessageId: sentMessage.message_id, threadId, userId }, '–ó–ª–æ–π –ø–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
      saveMessage(userId, finalText, new Date().toISOString());
    } catch (error) {
      throw error;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ—Å—Ç–∞ –≤ 9:00
  async sendMorningMessage(chatId: number) {
    try {
      schedulerLogger.debug({ chatId }, '–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–ø–∏—à–µ—Ç"
      await this.bot.telegram.sendChatAction(this.CHANNEL_ID, 'upload_photo');

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const morningPrompt = readFileSync('assets/prompts/morning-message.md', 'utf-8');
      const morningText = await generateMessage(morningPrompt);
      const cleanedText = cleanLLMText(morningText);

      schedulerLogger.info({ chatId, text: cleanedText }, '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—è–≥—É—à–∫–∏
      let imageBuffer: Buffer | null = null;
      try {
        const imagePrompt = readFileSync('assets/prompts/frog-image-prompt-morning', 'utf-8');
        schedulerLogger.info({ chatId, imagePrompt }, 'üé® –ü—Ä–æ–º–ø—Ç –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        imageBuffer = await generateFrogImage(imagePrompt);
      } catch (imageError) {
        const imgErr = imageError as Error;
        schedulerLogger.error(
          {
            error: imgErr.message,
            stack: imgErr.stack,
            chatId,
          },
          '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
        );
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç "–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º üòâ"
      const captionWithComment = cleanedText + '\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º üòâ';

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç –ë–ï–ó –∫–Ω–æ–ø–æ–∫
      let sentMessage;
      if (imageBuffer) {
        sentMessage = await this.bot.telegram.sendPhoto(
          this.CHANNEL_ID,
          { source: imageBuffer },
          {
            caption: captionWithComment,
            parse_mode: 'HTML',
          }
        );
        schedulerLogger.info(
          {
            chatId,
            messageLength: cleanedText.length,
            imageSize: imageBuffer.length,
          },
          '–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
        );
      } else {
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É —Ä–æ—Ç–∞—Ü–∏–∏
        const imagePath = this.getNextImage(chatId);
        sentMessage = await this.bot.telegram.sendPhoto(
          this.CHANNEL_ID,
          { source: imagePath },
          {
            caption: captionWithComment,
            parse_mode: 'HTML',
          }
        );
        schedulerLogger.info(
          {
            chatId,
            messageLength: cleanedText.length,
            imagePath,
          },
          '–£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–∑ —Ä–æ—Ç–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (fallback)'
        );
      }

      const messageId = sentMessage.message_id;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –ë–î –∫–∞–∫ —É—Ç—Ä–µ–Ω–Ω–∏–π (—Å —Ç–∏–ø–æ–º morning)
      const { saveMorningPost } = await import('./db');
      const postUserId = this.isTestBot() ? this.getTestUserId() : this.getMainUserId();
      saveMorningPost(messageId, postUserId);

      schedulerLogger.info({ messageId, chatId }, 'üíæ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î');

      // –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
      const CHAT_ID = this.getChatId();
      if (CHAT_ID) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        this.sendFirstTaskAsync(
          messageId,
          '–ö–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏! –Ø –∑–¥–µ—Å—å –¥–ª—è —Ç–µ–±—è ü§ó',
          undefined,
          'morning_initial',
          chatId,
          CHAT_ID
        );
      }

      schedulerLogger.info({ chatId }, '–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (e) {
      const error = e as Error;
      schedulerLogger.error({ error: error.message, stack: error.stack, chatId }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
      throw error;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç
  private async handleMorningPostResponse(
    userId: number,
    messageText: string,
    replyToChatId: number,
    messageId: number,
    morningPost: { id: number; channel_message_id: number; user_id: number; created_at: string; current_step: string; last_button_message_id?: number }
  ) {
    const { updateMorningPostStep, updateMorningPostButtonMessage, saveMessage } = await import('./db');
    const { getLastNMessages } = await import('./db');
    const { checkRudeMessage } = await import('./utils/rude-filter');

    schedulerLogger.info(
      {
        userId,
        currentStep: morningPost.current_step,
        messageText: messageText.substring(0, 50),
      },
      'üåÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç'
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –Ω–∞–∂–∞–ª –ª–∏ –æ–Ω –∫–Ω–æ–ø–∫—É)
    saveMessage(userId, messageText, new Date().toISOString(), userId);
    schedulerLogger.debug({ userId, messageText: messageText.substring(0, 50) }, 'üíæ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä—É–±–æ—Å—Ç—å/—Ñ–∏–≥–Ω—é –ë–ï–ó LLM
    const rudeCheck = checkRudeMessage(messageText, userId);
    if (rudeCheck.isRude && rudeCheck.response) {
      await this.sendWithRetry(
        () =>
          this.bot.telegram.sendMessage(replyToChatId, rudeCheck.response!, {
            reply_parameters: { message_id: messageId },
          }),
        {
          chatId: userId,
          messageType: 'morning_rude_response',
          maxAttempts: 5,
          intervalMs: 3000,
        }
      );

      schedulerLogger.info({ userId, messageText }, '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≥—Ä—É–±–æ—Å—Ç—å/—Ñ–∏–≥–Ω—é');
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–≥–∞
    if (morningPost.current_step === 'waiting_user_message') {
      // –®–ê–ì 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

      // –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é üëÄ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await this.bot.telegram.setMessageReaction(replyToChatId, messageId, [{ type: 'emoji', emoji: 'üëÄ' }]);
        schedulerLogger.debug({ userId, messageId }, 'üëÄ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–®–ê–ì 1)');
      } catch (reactionError) {
        schedulerLogger.warn({ reactionError, messageId }, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é üëÄ (–®–ê–ì 1)');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç—å –º–Ω–µ"
      const responseText = '–î–æ–ø–∏—Å–∞–ª? –¢—ã–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É üê∏';
      const keyboard = {
        inline_keyboard: [[{ text: '–û—Ç–≤–µ—Ç—å –º–Ω–µ', callback_data: `morning_respond_${morningPost.channel_message_id}` }]],
      };

      const sentMessage = await this.sendWithRetry(
        () =>
          this.bot.telegram.sendMessage(replyToChatId, responseText, {
            reply_parameters: { message_id: messageId },
            reply_markup: keyboard,
          }),
        {
          chatId: userId,
          messageType: 'morning_step1',
          maxAttempts: 5,
          intervalMs: 3000,
        }
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (sentMessage) {
        updateMorningPostButtonMessage(morningPost.channel_message_id, sentMessage.message_id);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥
      updateMorningPostStep(morningPost.channel_message_id, 'waiting_button_click');

      schedulerLogger.info({ userId }, '‚úÖ –®–ê–ì 1: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π');
    } else if (morningPost.current_step === 'waiting_button_click') {
      // –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é üëÄ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await this.bot.telegram.setMessageReaction(replyToChatId, messageId, [{ type: 'emoji', emoji: 'üëÄ' }]);
        schedulerLogger.debug({ userId, messageId }, 'üëÄ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (waiting_button_click)');
      } catch (reactionError) {
        schedulerLogger.warn({ reactionError, messageId }, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é üëÄ (waiting_button_click)');
      }

      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
      if (morningPost.last_button_message_id) {
        try {
          await this.bot.telegram.deleteMessage(replyToChatId, morningPost.last_button_message_id);
          schedulerLogger.info({ userId, deletedMessageId: morningPost.last_button_message_id }, 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π');
        } catch (error) {
          schedulerLogger.warn({ error, messageId: morningPost.last_button_message_id }, '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π');
        }
      }

      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø–∏—Å–∞—Ç—å, –ø–æ–≤—Ç–æ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
      const responseText = '–î–æ–ø–∏—Å–∞–ª? –¢—ã–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É üê∏';
      const keyboard = {
        inline_keyboard: [[{ text: '–û—Ç–≤–µ—Ç—å –º–Ω–µ', callback_data: `morning_respond_${morningPost.channel_message_id}` }]],
      };

      const sentMessage = await this.sendWithRetry(
        () =>
          this.bot.telegram.sendMessage(replyToChatId, responseText, {
            reply_parameters: { message_id: messageId },
            reply_markup: keyboard,
          }),
        {
          chatId: userId,
          messageType: 'morning_step1_repeat',
          maxAttempts: 5,
          intervalMs: 3000,
        }
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (sentMessage) {
        updateMorningPostButtonMessage(morningPost.channel_message_id, sentMessage.message_id);
      }

      schedulerLogger.info({ userId }, '‚úÖ –®–ê–ì 1: –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π');
    } else if (morningPost.current_step === 'waiting_more_emotions' || morningPost.current_step.startsWith('waiting_more_emotions_')) {
      // –®–ê–ì 2.5: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –±–æ–ª—å—à–µ –æ–± —ç–º–æ—Ü–∏—è—Ö –ø–æ—Å–ª–µ –ø—Ä–æ—Å—å–±—ã

      // –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é üëÄ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await this.bot.telegram.setMessageReaction(replyToChatId, messageId, [{ type: 'emoji', emoji: 'üëÄ' }]);
        schedulerLogger.debug({ userId, messageId }, 'üëÄ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (waiting_more_emotions)');
      } catch (reactionError) {
        schedulerLogger.warn({ reactionError, messageId }, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é üëÄ (waiting_more_emotions)');
      }

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∞–ª–∏–∑—É –∏ –®–ê–ì—É 3
      await this.processMorningStep3(userId, messageText, replyToChatId, messageId, morningPost);
    } else if (morningPost.current_step === 'waiting_more') {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–µ–ª–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

      // –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é üëÄ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await this.bot.telegram.setMessageReaction(replyToChatId, messageId, [{ type: 'emoji', emoji: 'üëÄ' }]);
        schedulerLogger.debug({ userId, messageId }, 'üëÄ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (waiting_more)');
      } catch (reactionError) {
        schedulerLogger.warn({ reactionError, messageId }, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é üëÄ (waiting_more)');
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É –∑–∞–Ω–æ–≤–æ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç—å –º–Ω–µ"
      schedulerLogger.info({ userId, currentStep: morningPost.current_step }, 'üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–µ–ª–∏—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É');

      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
      const { getMorningPost } = await import('./db');
      const currentPost = getMorningPost(morningPost.channel_message_id);
      if (currentPost?.last_button_message_id) {
        try {
          await this.bot.telegram.deleteMessage(replyToChatId, currentPost.last_button_message_id);
          schedulerLogger.info({ userId, deletedMessageId: currentPost.last_button_message_id }, 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π');
        } catch (error) {
          schedulerLogger.warn({ error }, '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π');
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç—å –º–Ω–µ"
      const responseText = '–î–æ–ø–∏—Å–∞–ª? –¢—ã–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É üê∏';

      const sentMessage = await this.sendWithRetry(
        () =>
          this.bot.telegram.sendMessage(replyToChatId, responseText, {
            reply_parameters: { message_id: messageId },
            reply_markup: {
              inline_keyboard: [[{ text: '–û—Ç–≤–µ—Ç—å –º–Ω–µ', callback_data: `morning_respond_${morningPost.channel_message_id}` }]],
            },
          }),
        {
          chatId: userId,
          messageType: 'morning_step1_repeat',
          maxAttempts: 5,
          intervalMs: 3000,
        }
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–Ω–æ–ø–∫–∏
      if (sentMessage) {
        const { updateMorningPostButtonMessage } = await import('./db');
        updateMorningPostButtonMessage(morningPost.channel_message_id, sentMessage.message_id);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥
      const { updateMorningPostStep } = await import('./db');
      updateMorningPostStep(morningPost.channel_message_id, 'waiting_button_click');

      schedulerLogger.info({ userId }, '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞');
    } else if (morningPost.current_step === 'completed') {
      // –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞, –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
      const finalText = '–°–ø–∞—Å–∏–±–æ —á—Ç–æ –¥–µ–ª–∏—à—å—Å—è! –Ø –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ —Ç–µ–±—è —Å–ª—É—à–∞—Ç—å ü§ó';

      await this.sendWithRetry(
        () =>
          this.bot.telegram.sendMessage(replyToChatId, finalText, {
            reply_parameters: { message_id: messageId },
          }),
        {
          chatId: userId,
          messageType: 'morning_completed',
          maxAttempts: 5,
          intervalMs: 3000,
        }
      );

      schedulerLogger.info({ userId }, '‚úÖ –£—Ç—Ä–µ–Ω–Ω—è—è —Å–µ—Å—Å–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å');
    }
  }

  // –®–ê–ì 3: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —ç–º–æ—Ü–∏–π
  private async processMorningStep3(
    userId: number,
    messageText: string,
    replyToChatId: number,
    messageId: number,
    morningPost: { id: number; channel_message_id: number; user_id: number; created_at: string; current_step: string }
  ) {
    const { updateMorningPostStep } = await import('./db');
    const { getLastNMessages } = await import('./db');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —ç—Ç—É —Å–µ—Å—Å–∏—é
    const messages = getLastNMessages(userId, 10);
    const userMessages = messages
      .filter(m => m.author_id === userId)
      .map(m => m.message_text)
      .reverse()
      .join('\n');

    schedulerLogger.info({ userId, messagesCount: messages.length }, '–®–ê–ì 3: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π');

    // –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é üëÄ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ —á–∏—Ç–∞–µ–º
    try {
      await this.bot.telegram.setMessageReaction(replyToChatId, messageId, [{ type: 'emoji', emoji: 'üëÄ' }]);
      schedulerLogger.debug({ userId, messageId }, 'üëÄ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    } catch (reactionError) {
      schedulerLogger.warn({ reactionError, messageId }, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é üëÄ');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º sentiment –∏–∑ current_step
    const sentiment = morningPost.current_step.includes('negative') ? 'negative' : 'positive';

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç sentiment
    let finalPrompt = '';
    if (sentiment === 'negative') {
      finalPrompt = `–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
${userMessages}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏. –ù–µ –ø–æ–≤—Ç–æ—Ä—è—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–ª–æ–≤ - –µ—â–µ —Ä–∞–∑ –∫—Ä–∞—Ç–∫–æ –≤—ã—Ä–∞–∑–∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ —á–µ–ª–æ–≤–µ–∫—É, —á—Ç–æ–±—ã –µ–≥–æ —É—Ç–µ—à–∏—Ç—å –∏–ª–∏ –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
- –î–æ 2 —ç–º–æ–¥–∂–∏
- –¢–µ–ø–ª–æ, –∑–∞–±–æ—Ç–ª–∏–≤–æ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ
- –ö–∞–∫ —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ —Ä–æ–±–æ—Ç
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—â–µ–Ω–∏—è —Ç–∏–ø–∞ "–±—Ä–∞—Ç", "–±—Ä–∞—Ç–∞–Ω", "–±—Ä–æ", "—Å–ª—É—à–∞–π" –∏ —Ç.–ø.
- –ú—É–∂—Å–∫–æ–π —Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—è —Ä–∞–¥ –ø–æ–º–æ—á—å")
- –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏`;
    } else {
      finalPrompt = `–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
${userMessages}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏. –ù–µ –ø–æ–≤—Ç–æ—Ä—è—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–ª–æ–≤ - –ø–æ–∂–µ–ª–∞–π —á–µ–ª–æ–≤–µ–∫—É —á–∞—â–µ –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ —Ö–æ—Ä–æ—à–∏—Ö —ç–º–æ—Ü–∏–π, –ø–æ—Ö–≤–∞–ª–∏ –∏–ª–∏ –µ—â–µ —Ä–∞–∑ –ø–æ—Ä–∞–¥—É–π—Å—è –∑–∞ —á–µ–ª–æ–≤–µ–∫–∞.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –î–æ 200 —Å–∏–º–≤–æ–ª–æ–≤
- –î–æ 2 —ç–º–æ–¥–∂–∏
- –¢–µ–ø–ª–æ, –∑–∞–±–æ—Ç–ª–∏–≤–æ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ
- –ö–∞–∫ —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ —Ä–æ–±–æ—Ç
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—â–µ–Ω–∏—è —Ç–∏–ø–∞ "–±—Ä–∞—Ç", "–±—Ä–∞—Ç–∞–Ω", "–±—Ä–æ", "—Å–ª—É—à–∞–π" –∏ —Ç.–ø.
- –ú—É–∂—Å–∫–æ–π —Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—è —Ä–∞–¥ –∑–∞ —Ç–µ–±—è")
- –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏`;
    }

    const finalResponse = await generateMessage(finalPrompt);
    const cleanedFinalResponse = cleanLLMText(finalResponse);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–∑—É "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –µ—â–µ —á–µ–º-—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è - —è —Ä—è–¥–æ–º ü§ó"
    const fullMessage = `${cleanedFinalResponse}\n\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –µ—â–µ —á–µ–º-—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è - —è —Ä—è–¥–æ–º ü§ó`;

    await this.sendWithRetry(
      () =>
        this.bot.telegram.sendMessage(replyToChatId, fullMessage, {
          reply_parameters: { message_id: messageId },
        }),
      {
        chatId: userId,
        messageType: 'morning_step3',
        maxAttempts: 5,
        intervalMs: 3000,
      }
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –Ω–∞ "waiting_more" —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Å–ª—É—à–∞—Ç—å (—Ä–∞–±–æ—Ç–∞ –ø–æ –∫—Ä—É–≥—É)
    updateMorningPostStep(morningPost.channel_message_id, 'waiting_more');

    schedulerLogger.info({ userId }, '‚úÖ –®–ê–ì 3: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π');
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  public buildSecondPart(json: any, isSimplified: boolean = false): string {
    if (isSimplified) {
      // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
      let message =
        '2. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b>\n\n–í—Å–ø–æ–º–Ω–∏ –∏ –Ω–∞–ø–∏—à–∏ –≤—Å–µ –ø—Ä–∏—è—Ç–Ω–æ–µ –∑–∞ –¥–µ–Ω—å\n–¢—É—Ç —Ç–æ–∂–µ –æ–ø–∏—à–∏ —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏—Å–ø—ã—Ç–∞–ª üòç';
      return message;
    } else {
      // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç
      let message = '2. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b> (—Å–∏—Ç—É–∞—Ü–∏—è+—ç–º–æ—Ü–∏—è)';
      return message;
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async analyzeUserResponse(response: string): Promise<{
    detailed: boolean;
    needsClarification: boolean;
    significant: boolean;
    supportText?: string;
  }> {
    const words = response.split(' ').length;
    const hasEmotions =
      /—Ä–∞–¥–æ—Å—Ç|–≥—Ä—É—Å—Ç|–∑–ª–æ—Å—Ç—å|—Å—Ç—Ä–∞—Ö|—Ç—Ä–µ–≤–æ–≥|—Å–ø–æ–∫–æ–π|—Å—á–∞—Å—Ç|–æ–±–∏–¥|—Ä–∞–∑–æ—á–∞—Ä–æ–≤|–≤–æ—Å—Ç–æ—Ä–≥|—É–¥–∏–≤–ª|—Å—Ç—ã–¥|–≤–∏–Ω|–≥–Ω–µ–≤|—è—Ä–æ—Å—Ç|–ø–∞–Ω–∏–∫|–±–µ—Å–ø–æ–∫–æ–π|—É–º–∏—Ä–æ—Ç–≤–æ—Ä|–±–ª–∞–∂–µ–Ω|–≤–æ—Å—Ö–∏—â|–æ—Ç–≤—Ä–∞—â|–ø—Ä–µ–∑—Ä|–Ω–µ–Ω–∞–≤–∏—Å—Ç|–ª—é–±–æ–≤—å|–Ω–µ–∂–Ω|—Ç–µ–ø–ª|—Ö–æ–ª–æ–¥|–ø—É—Å—Ç|—Ç–æ—Å–∫|–ø–µ—á–∞–ª—å|–≥–æ—Ä–µ|–æ—Ç—á–∞—è–Ω|–±–µ–∑–Ω–∞–¥–µ–∂–Ω|–∞–ø–∞—Ç|—Ä–∞–≤–Ω–æ–¥—É—à|—Å–∫—É–∫|–∏–Ω—Ç–µ—Ä–µ—Å|–∞–∑–∞—Ä—Ç|–≤–æ–æ–¥—É—à–µ–≤–ª|—ç–Ω—Ç—É–∑–∏–∞|–Ω–∞–¥–µ–∂–¥|–≤–µ—Ä|–¥–æ–≤–µ—Ä|—Å–æ–º–Ω–µ–Ω|–ø–æ–¥–æ–∑—Ä–µ–Ω|–Ω–∞—Å—Ç–æ—Ä–æ–∂|—É–≤–µ—Ä–µ–Ω|—Ä–µ—à–∏—Ç–µ–ª—å–Ω|—Å–º–µ–ª|—Ä–æ–±–æ—Å—Ç|–∑–∞—Å—Ç–µ–Ω—á–∏–≤|—Å–º—É—â–µ–Ω|–Ω–µ–ª–æ–≤–∫|–≥–æ—Ä–¥–æ—Å—Ç|–≤—ã—Å–æ–∫–æ–º–µ—Ä|—É–Ω–∏–∂|–æ—Å–∫–æ—Ä–±–ª|–±–ª–∞–≥–æ–¥–∞—Ä–Ω|–ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω|–∑–∞–≤–∏—Å—Ç—å|—Ä–µ–≤–Ω–æ—Å—Ç—å|–∂–∞–ª–æ—Å—Ç—å|—Å–æ—á—É–≤—Å—Ç–≤|—Å–æ—Å—Ç—Ä–∞–¥–∞–Ω|—ç–º–ø–∞—Ç|–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤|–ø–æ–∫–∏–Ω—É—Ç|–Ω—É–∂–Ω|–≤–∞–∂–Ω|–∑–Ω–∞—á–∏–º|–±–µ—Å–ø–æ–º–æ—â–Ω|–±–µ—Å—Å–∏–ª|—Å–∏–ª|–º–æ—â|—ç–Ω–µ—Ä–≥|—É—Å—Ç–∞–ª|–∏—Å—Ç–æ—â|–≤—ã–º–æ—Ç–∞–Ω|–æ–ø—É—Å—Ç–æ—à–µ–Ω/i.test(
        response
      );
    const hasFeelWords = /—á—É–≤—Å—Ç–≤|–æ—â—É—â|—ç–º–æ—Ü|–Ω–∞—Å—Ç—Ä–æ–µ–Ω|—Å–æ—Å—Ç–æ—è–Ω/i.test(response);
    const significantWords =
      /–≤–∞–∂–Ω|—Å–µ—Ä—å–µ–∑–Ω|—Å–ª–æ–∂–Ω|–ø—Ä–æ–±–ª–µ–º|—Ç—è–∂–µ–ª|–Ω–µ–≤—ã–Ω–æ—Å–∏–º|–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ|–∫—Ä–∏–∑–∏—Å|–∫—Ä–∏—Ç–∏—á|–æ–ø–∞—Å–Ω|—É–≥—Ä–æ–∑|–±–µ—Å–ø–æ–∫–æ–∏—Ç|–≤–æ–ª–Ω—É–µ—Ç|—Ç—Ä–µ–≤–æ–∂–∏—Ç|–º—É—á–∞–µ—Ç|—Ç–µ—Ä–∑–∞–µ—Ç|–≥–ª–æ–∂–µ—Ç|–¥–æ–≤–æ–¥|–∏–∑–º–∞—Ç—ã–≤–∞–µ—Ç|–ø–æ–¥–∞–≤–ª—è–µ—Ç|–¥–∞–≤–∏—Ç|–¥—É—à–∏—Ç/i.test(
        response
      );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø–∏—Å–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç–º–æ—Ü–∏–∏
    const emotionsDescribed = hasEmotions || hasFeelWords;

    if (words > 15 && emotionsDescribed) {
      // –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å–∞–ª —ç–º–æ—Ü–∏–∏
      return {
        detailed: true,
        needsClarification: false,
        significant: false,
        supportText: this.getRandomSupportText(),
      };
    } else if (words < 10 && !emotionsDescribed) {
      // –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø–∏—Å–∞–ª —ç–º–æ—Ü–∏–∏ –ò –º–∞–ª–æ –Ω–∞–ø–∏—Å–∞–ª
      return {
        detailed: false,
        needsClarification: true,
        significant: false,
      };
    } else if (significantWords) {
      // –í–∞—Ä–∏–∞–Ω—Ç 3: –ë—ã–ª–æ –∑–Ω–∞—á–∏–º–æ–µ/–≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
      return {
        detailed: false,
        needsClarification: false,
        significant: true,
      };
    } else {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª—é—à–∫–∞–º —Å –±–∞–∑–æ–≤–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
      return {
        detailed: true,
        needsClarification: false,
        significant: false,
        supportText: this.getRandomSupportText(),
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
  public getRandomSupportText(): string {
    const supportTexts = [
      '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è üíö',
      '–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è ü§ó',
      '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ üíõ',
      '–¢—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –ø—Ä–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å —ç—Ç–æ üå±',
      '–¢–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –≤–∞–∂–Ω—ã üíô',
      '–°–ª—ã—à—É —Ç–µ–±—è ü§ç',
      '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ üåø',
    ];
    return supportTexts[Math.floor(Math.random() * supportTexts.length)];
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á –≤ –ë–î
  private determineCurrentStep(post: any): string {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É current_state –∏–∑ –ë–î
    if (post.current_state) {
      return post.current_state;
    }

    // Fallback –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    if (!post.task1_completed) {
      // –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      if (post.bot_schema_message_id && !post.user_schema_message_id) {
        // –ï—Å–ª–∏ —Å—Ö–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª - –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å—Ö–µ–º—É
        return 'waiting_schema';
      } else {
        // –ò–Ω–∞—á–µ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤
        return 'waiting_negative';
      }
    } else if (post.task1_completed && !post.task2_completed) {
      // –ü–µ—Ä–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –≤—Ç–æ—Ä–æ–µ –Ω–µ—Ç - –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–ª—é—à–∫–∏
      return 'waiting_positive';
    } else if (post.task2_completed && !post.task3_completed) {
      // –î–≤–∞ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, —Ç—Ä–µ—Ç—å–µ –Ω–µ—Ç - –∂–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∞–∫—Ç–∏–∫–∏
      return 'waiting_practice';
    } else {
      // –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
      return 'finished';
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
  public async handleInteractiveUserResponse(
    userId: number,
    messageText: string,
    replyToChatId: number,
    messageId: number,
    messageThreadId?: number
  ) {
    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –í–ö–õ–Æ–ß–ï–ù–´ - —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –ª–æ–≥–∏–∫–∏ –∑–∞–¥–∞–Ω–∏–π
    const INTERACTIVE_RESPONSES_ENABLED = true; // –≠—Ç–æ –ù–£–ñ–ù–û –¥–ª—è —Ä–∞–±–æ—Ç—ã –∑–∞–¥–∞–Ω–∏–π!

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∫ –∑–ª–æ–º—É –ø–æ—Å—Ç—É
    if (messageThreadId) {
      const { isAngryPostByThreadId } = await import('./db');
      const isAngryComment = await isAngryPostByThreadId(messageThreadId);

      if (isAngryComment) {
        schedulerLogger.info(
          {
            userId,
            messageThreadId,
            messageText: messageText.substring(0, 50),
          },
          'üò† –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–ª–æ–º—É –ø–æ—Å—Ç—É'
        );

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const responseCount = incrementAngryPostUserResponse(messageThreadId, userId);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
        let responseText = '';

        if (responseCount === 1) {
          // –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç
          responseText = '–Ø —Ä–∞–¥ —Ç–µ–±—è —Å–ª—ã—à–∞—Ç—å! ü§ó\n–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏—è –ø–æ–¥ –≤—á–µ—Ä–∞—à–Ω–∏–º –ø–æ—Å—Ç–æ–º ‚úçüèª';
        } else if (responseCount === 2) {
          // –í—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç
          responseText = '–ë—É–¥—É –∂–¥–∞—Ç—å —Ç–µ–±—è —Ç–∞–º üê∏';
        } else {
          // –¢—Ä–µ—Ç–∏–π –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ - –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º
          schedulerLogger.info(
            { userId, messageThreadId, responseCount },
            'üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –±–æ–ª—å—à–µ 2 —Ä–∞–∑, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º'
          );
          return true;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await this.sendWithRetry(
          () =>
            this.bot.telegram.sendMessage(replyToChatId, responseText, {
              reply_parameters: {
                message_id: messageId,
              },
            }),
          {
            chatId: userId,
            messageType: 'angry_post_response',
            maxAttempts: 5,
            intervalMs: 3000,
          }
        );

        schedulerLogger.info({ userId, responseCount }, '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–ª–æ–º—É –ø–æ—Å—Ç—É');
        return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∫ —É—Ç—Ä–µ–Ω–Ω–µ–º—É –ø–æ—Å—Ç—É
    if (messageThreadId) {
      const { getMorningPost } = await import('./db');

      // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç –ø–æ messageThreadId
      let morningPost = await getMorningPost(messageThreadId);

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∞–ø—Ä—è–º—É—é, –∏—â–µ–º —á–µ—Ä–µ–∑ –º–∞–ø–ø–∏–Ω–≥ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (!morningPost) {
        let mappedChannelId = null;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–∞–º—è—Ç–∏
        for (const [channelId, forwardedId] of this.forwardedMessages.entries()) {
          if (forwardedId === messageThreadId) {
            mappedChannelId = channelId;
            break;
          }
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–∞–º—è—Ç–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
        if (!mappedChannelId) {
          const { getChannelMessageIdByThreadId } = require('./db');
          mappedChannelId = await getChannelMessageIdByThreadId(messageThreadId);
        }

        if (mappedChannelId) {
          morningPost = await getMorningPost(mappedChannelId);
        }
      }

      if (morningPost) {
        schedulerLogger.info(
          {
            userId,
            messageThreadId,
            morningPostId: morningPost.channel_message_id,
            currentStep: morningPost.current_step,
            messageText: messageText.substring(0, 50),
          },
          'üåÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —É—Ç—Ä–µ–Ω–Ω–µ–º—É –ø–æ—Å—Ç—É'
        );

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —É—Ç—Ä–µ–Ω–Ω–µ–º—É –ø–æ—Å—Ç—É
        await this.handleMorningPostResponse(
          userId,
          messageText,
          replyToChatId,
          messageId,
          morningPost
        );

        return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
      }
    }

    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const { getUserIncompletePosts, getInteractivePost } = await import('./db');

    // –ï—Å–ª–∏ –µ—Å—Ç—å messageThreadId, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å ID –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
    let activePost = null;
    let channelMessageId = null;

    if (messageThreadId) {
      // –í —Ç–µ—Å—Ç–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ messageThreadId - —ç—Ç–æ ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      // –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ –º–∞–ø–ø–∏–Ω–≥
      schedulerLogger.debug(
        {
          messageThreadId,
          userId,
          messageText: messageText.substring(0, 50),
        },
        '–ò—â–µ–º –ø–æ—Å—Ç –ø–æ messageThreadId'
      );

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ channelMessageId —á–µ—Ä–µ–∑ –º–∞–ø–ø–∏–Ω–≥ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      let mappedChannelId = null;

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–∞–º—è—Ç–∏
      for (const [channelId, forwardedId] of this.forwardedMessages.entries()) {
        if (forwardedId === messageThreadId) {
          mappedChannelId = channelId;
          break;
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–∞–º—è—Ç–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
      if (!mappedChannelId) {
        const { getChannelMessageIdByThreadId } = require('./db');
        mappedChannelId = getChannelMessageIdByThreadId(messageThreadId);
      }

      if (mappedChannelId) {
        activePost = getInteractivePost(mappedChannelId);
        if (activePost) {
          channelMessageId = mappedChannelId;
          schedulerLogger.info(
            {
              userId,
              channelMessageId,
              messageThreadId,
              foundByMapping: true,
              postData: {
                task1: activePost.task1_completed,
                task2: activePost.task2_completed,
                task3: activePost.task3_completed,
              },
            },
            '–ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç —á–µ—Ä–µ–∑ –º–∞–ø–ø–∏–Ω–≥ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'
          );
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –º–∞–ø–ø–∏–Ω–≥, –ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
      if (!activePost) {
        activePost = getInteractivePost(messageThreadId);
        if (activePost) {
          channelMessageId = messageThreadId;
          schedulerLogger.info(
            {
              userId,
              channelMessageId,
              foundByThreadId: true,
              postData: {
                task1: activePost.task1_completed,
                task2: activePost.task2_completed,
                task3: activePost.task3_completed,
              },
            },
            '–ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç –ø–æ messageThreadId –Ω–∞–ø—Ä—è–º—É—é'
          );
        } else {
          schedulerLogger.warn(
            {
              messageThreadId,
              userId,
              mappedChannelId,
            },
            '–ü–æ—Å—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –Ω–∏ —á–µ—Ä–µ–∑ –º–∞–ø–ø–∏–Ω–≥, –Ω–∏ –Ω–∞–ø—Ä—è–º—É—é'
          );
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ threadId, –∏—â–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!activePost) {
      const incompletePosts = getUserIncompletePosts(userId);

      schedulerLogger.info(
        {
          userId,
          incompletePostsCount: incompletePosts.length,
          messageThreadId,
        },
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      );

      if (incompletePosts.length === 0) {
        // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        schedulerLogger.debug({ userId }, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤');
        return false;
      }

      // –ë–µ—Ä–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
      activePost = incompletePosts[0];
      channelMessageId = activePost.channel_message_id;
    }

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç session –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ë–î –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const session = {
      messageData: activePost.message_data,
      relaxationType: activePost.relaxation_type,
      channelMessageId: channelMessageId,
      currentStep: this.determineCurrentStep(activePost),
    };

    schedulerLogger.info(
      {
        userId,
        step: session.currentStep,
        messageText: messageText.substring(0, 50),
      },
      '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≥—Ä—É–±—ã–π/–±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    try {
      const { checkRudeMessage, resetKeyboardSpamCounter } = await import('./utils/rude-filter');
      const rudeCheck = checkRudeMessage(messageText, userId);

      if (rudeCheck.isRude) {
        schedulerLogger.info(
          { userId, messageText: messageText.substring(0, 50), response: rudeCheck.response },
          '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≥—Ä—É–±—ã–π/–±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç'
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        if (rudeCheck.response) {
          try {
            await this.bot.telegram.sendMessage(replyToChatId, rudeCheck.response, {
              reply_parameters: { message_id: messageId },
            });
          } catch (sendError) {
            schedulerLogger.error({ error: sendError }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≥—Ä—É–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
          }
        }

        // –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –∂–¥–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        return true;
      } else if (!rudeCheck.needsCounter) {
        // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞–±–æ—Ä–∞ –±—É–∫–≤
        resetKeyboardSpamCounter(userId);
      }
    } catch (rudeError) {
      schedulerLogger.error({ error: rudeError }, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä—É–±–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ');
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ —Å –æ–±—ã—á–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    const practiceStates = ['waiting_practice', 'deep_waiting_practice', 'finished', 'completed'];
    const shouldSetReminder = !practiceStates.includes(session.currentStep);

    if (shouldSetReminder) {
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
      this.clearReminder(userId);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
      await this.setIncompleteWorkReminder(userId, channelMessageId);
      const delayMinutes = this.isTestBot() ? 1 : 30;
      schedulerLogger.debug(
        { userId, channelMessageId, delayMinutes },
        `‚è∞ –¢–∞–π–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω (${delayMinutes} –º–∏–Ω –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)`
      );
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—à–µ–ª –¥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É - –æ—Ç–º–µ–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      this.clearReminder(userId);
      schedulerLogger.debug(
        { userId, channelMessageId, currentStep: session.currentStep },
        '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ'
      );
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    const { updateTaskStatus } = await import('./db');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–æ–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π - –æ–∂–∏–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–π
      if (session.currentStep === 'deep_waiting_situations_list') {
        schedulerLogger.info(
          {
            userId,
            channelMessageId,
            messageText: messageText.substring(0, 50),
            scenario: 'deep',
          },
          '–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–∏—Ç—É–∞—Ü–∏–π –≤ –≥–ª—É–±–æ–∫–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏'
        );

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑ messageData
        let supportText = session.messageData?.deep_support?.text;

        // –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        if (!supportText) {
          supportText = '–ü–æ–Ω–∏–º–∞—é, –∫–∞–∫ —Ç–µ–±–µ —Å–µ–π—á–∞—Å –Ω–µ–ø—Ä–æ—Å—Ç–æ';
        }

        // –í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ + –∑–∞–¥–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        const secondTaskText = `<i>${escapeHTML(
          supportText
        )}</i>\n\n<b>–í—ã–±–µ—Ä–∏ 1 —Å–∏—Ç—É–∞—Ü–∏—é, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –∏ –æ–ø–∏—à–∏ –µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ üìù</b>\n\n<i>üí° –¢—ã –º–æ–∂–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–ª–∏ —á—Ç–æ-—Ç–æ –±–æ–ª—å—à–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç</i>`;

        // –ö–Ω–æ–ø–∫–∞ "–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π"
        const emotionsTableKeyboard = {
          inline_keyboard: [[{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }]],
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        const secondTaskMessage = await this.sendWithRetry(
          () =>
            this.bot.telegram.sendMessage(replyToChatId, secondTaskText, {
              parse_mode: 'HTML',
              reply_markup: emotionsTableKeyboard,
              reply_parameters: {
                message_id: messageId,
              },
            }),
          {
            chatId: userId,
            messageType: 'deep_second_task',
            maxAttempts: 10,
            intervalMs: 5000,
            onSuccess: async result => {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Ç–µ–ø–µ—Ä—å –∂–¥–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é
              const { updateInteractivePostState } = await import('./db');
              updateInteractivePostState(channelMessageId, 'deep_waiting_negative', {
                bot_task2_message_id: result.message_id,
                user_task1_message_id: messageId,
              });
            },
          }
        );

        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª—É–±–æ–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
      if (session.currentStep === 'deep_waiting_negative') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ –≥–ª—É–±–æ–∫–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
        schedulerLogger.info(
          {
            userId,
            channelMessageId,
            messageText: messageText.substring(0, 50),
            scenario: 'deep',
          },
          '–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–≥–ª—É–±–æ–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π)'
        );

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã
        const { getDeepWorkHandler } = await import('./handlers/callbacks/deep_work_buttons');
        const deepHandler = getDeepWorkHandler(this.bot, replyToChatId);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏–∫—É
        await deepHandler.analyzeUserResponse(channelMessageId, messageText, userId, messageId);

        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª—É–±–æ–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
      if (session.currentStep === 'deep_waiting_thoughts') {
        const { getDeepWorkHandler } = await import('./handlers/callbacks/deep_work_buttons');
        const deepHandler = getDeepWorkHandler(this.bot, replyToChatId);
        await deepHandler.handleThoughtsResponse(channelMessageId, messageText, userId, messageId);
        return;
      }

      if (session.currentStep === 'deep_waiting_distortions') {
        const { getDeepWorkHandler } = await import('./handlers/callbacks/deep_work_buttons');
        const deepHandler = getDeepWorkHandler(this.bot, replyToChatId);
        await deepHandler.handleDistortionsResponse(channelMessageId, messageText, userId, messageId);
        return;
      }

      if (session.currentStep === 'deep_waiting_harm') {
        const { getDeepWorkHandler } = await import('./handlers/callbacks/deep_work_buttons');
        const deepHandler = getDeepWorkHandler(this.bot, replyToChatId);
        await deepHandler.handleHarmResponse(channelMessageId, messageText, userId, messageId);
        return;
      }

      if (session.currentStep === 'deep_waiting_rational') {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        const sendOptions: any = {
          parse_mode: 'HTML',
          reply_parameters: {
            message_id: messageId,
          },
        };

        const sendOptionsWithButton: any = {
          parse_mode: 'HTML',
          reply_parameters: {
            message_id: messageId,
          },
          reply_markup: {
            inline_keyboard: [[{ text: '–í–ø–µ—Ä–µ–¥ üî•', callback_data: `deep_continue_to_treats_${channelMessageId}` }]],
          },
        };

        await this.sendWithRetry(
          () =>
            this.bot.telegram.sendMessage(
              replyToChatId,
              '<i>üéâ –û—Ç–ª–∏—á–Ω–æ! –°–ª–æ–∂–Ω–∞—è —á–∞—Å—Ç—å –ø–æ–∑–∞–¥–∏!\n' + '–ú–æ–∂–Ω–æ –≤—ã–¥–æ—Ö–Ω—É—Ç—å üòå</i>\n\n' + '–ü–µ—Ä–µ–π–¥–µ–º –∫ –±–æ–ª–µ–µ –ø—Ä–∏—è—Ç–Ω–æ–π ü§ó',
              sendOptionsWithButton
            ),
          {
            chatId: userId,
            messageType: 'deep_rational_complete',
            maxAttempts: 10,
            intervalMs: 5000,
            onSuccess: async () => {
              const { updateInteractivePostState, updateTaskStatus } = await import('./db');
              updateInteractivePostState(channelMessageId, 'deep_waiting_continue_to_treats');
              updateTaskStatus(channelMessageId, 1, true);
            },
          }
        );

        return;
      }

      if (session.currentStep === 'deep_waiting_positive') {
        // –û—Ç–≤–µ—Ç –Ω–∞ –ø–ª—é—à–∫–∏ –≤ –≥–ª—É–±–æ–∫–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å
        schedulerLogger.info(
          {
            userId,
            channelMessageId,
            messageText: messageText.substring(0, 50),
          },
          'üìù –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –ø–ª—é—à–∫–∏ (–≥–ª—É–±–æ–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É'
        );

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Å—á–µ—Ç–∞ —ç–º–æ—Ü–∏–π
        const { countEmotions, getEmotionHelpMessage } = await import('./utils/emotions');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π –≤ –æ—Ç–≤–µ—Ç–µ
        const emotionAnalysis = countEmotions(messageText, 'positive');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π –≤ –≥–ª—É–±–æ–∫–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
        const negativeEmotionsWereRequested = activePost?.current_state === 'schema_waiting_emotions_clarification';

        schedulerLogger.debug(
          {
            userId,
            channelMessageId,
            positiveEmotionsCount: emotionAnalysis.count,
            positiveEmotions: emotionAnalysis.emotions,
            categories: emotionAnalysis.categories,
            negativeEmotionsWereRequested,
            scenario: 'deep',
          },
          '–ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π –≤ –ø–ª—é—à–∫–∞—Ö (–≥–ª—É–±–æ–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π)'
        );

        // –ï—Å–ª–∏ —ç–º–æ—Ü–∏–π –º–∞–ª–æ –ò –º—ã –Ω–µ –ø—Ä–æ—Å–∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç—å
        if (emotionAnalysis.count < 3 && !negativeEmotionsWereRequested) {
          const helpMessage = getEmotionHelpMessage(emotionAnalysis.emotions, 'positive');

          const sendOptions: any = {
            parse_mode: 'HTML',
            reply_parameters: {
              message_id: messageId,
            },
            reply_markup: {
              inline_keyboard: [
                [{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }],
                [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: `skip_positive_emotions_${channelMessageId}` }],
              ],
            },
          };

          try {
            await this.sendWithRetry(() => this.bot.telegram.sendMessage(replyToChatId, helpMessage, sendOptions), {
              chatId: userId,
              messageType: 'positive_emotions_help_deep',
              maxAttempts: 10,
              intervalMs: 5000,
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            const { updateInteractivePostState } = await import('./db');
            updateInteractivePostState(channelMessageId, 'deep_waiting_positive_emotions_clarification', {
              user_task2_message_id: messageId,
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            session.currentStep = 'deep_waiting_positive_emotions_clarification';
            return true;
          } catch (helpError) {
            schedulerLogger.error(
              { error: helpError },
              '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–º–æ—â–∏ —Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏ –≤ –≥–ª—É–±–æ–∫–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π'
            );
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ
          }
        }

        // –ï—Å–ª–∏ —ç–º–æ—Ü–∏–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –±—ã–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ

        // –û—Ç–º–µ—á–∞–µ–º –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
        const { updateTaskStatus } = await import('./db');
        updateTaskStatus(channelMessageId, 2, true);

        let finalMessage = '<i>–í–∞—É! ü§© –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è! –≠—Ç–æ –±—ã–ª–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!</i>\n\n';
        finalMessage += '–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - –≤—Ä–µ–º—è –∑–∞–º–µ–¥–ª–∏—Ç—å—Å—è –∏ –ø–æ–±—ã—Ç—å –≤ –ø–æ–∫–æ–µ ü§ç\n';
        finalMessage += '3. <b>–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</b>\n\n';
        finalMessage +=
          '<blockquote><b>–î—ã—Ö–∞–Ω–∏–µ –ø–æ –∫–≤–∞–¥—Ä–∞—Ç—É:</b>\n–í–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ –¥—ã—Ö–∞–Ω–∏—è –Ω–∞ 4 —Å—á–µ—Ç–∞, –≤—ã–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞ –∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 4 —Å—á–µ—Ç–∞</blockquote>';

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ –∑–∞–¥–∞–Ω–∏—é 3
        const practiceKeyboard = {
          inline_keyboard: [
            [{ text: '‚úÖ –°–¥–µ–ª–∞–ª', callback_data: `pract_done_${channelMessageId}` }],
            [{ text: '‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å', callback_data: `pract_delay_${channelMessageId}` }],
          ],
        };

        const finalOptions: any = {
          parse_mode: 'HTML',
          reply_parameters: {
            message_id: messageId,
          },
          reply_markup: practiceKeyboard,
        };

        // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤–∏–¥–µ–æ
        schedulerLogger.info(
          {
            channelMessageId,
            replyToChatId,
            messageId,
            practiceVideoPath: this.PRACTICE_VIDEO_PATH,
            step: 'before_deep_video_send',
            isTestBot: this.isTestBot(),
            chatId: replyToChatId,
          },
          'üé¨ [DEEP] –ì–æ—Ç–æ–≤–∏–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π'
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π
        const practiceVideo = readFileSync(this.PRACTICE_VIDEO_PATH);
        const thumbnailBuffer = readFileSync(this.PRACTICE_VIDEO_THUMBNAIL_PATH);

        const task3Message = await this.sendWithRetry(
          () =>
            this.bot.telegram.sendVideo(replyToChatId, { source: practiceVideo }, {
              caption: finalMessage,
              parse_mode: 'HTML',
              reply_to_message_id: messageId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º reply_to_message_id –≤–º–µ—Å—Ç–æ reply_parameters
              reply_markup: practiceKeyboard,
              thumbnail: { source: thumbnailBuffer },
            } as any),
          {
            chatId: userId,
            messageType: 'deep_practice_video',
            maxAttempts: 20,
            intervalMs: 10000,
            onSuccess: async result => {
              // –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞
            },
          }
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        saveMessage(userId, finalMessage, new Date().toISOString(), 0);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
        const { updateInteractivePostState } = await import('./db');
        updateInteractivePostState(channelMessageId, 'deep_waiting_practice', {
          bot_task3_message_id: task3Message.message_id,
          user_task2_message_id: messageId,
        });

        // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ 3 –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø—Ä–∞–∫—Ç–∏–∫–∞)
        updateTaskStatus(channelMessageId, 3, true);

        // –û—Ç–º–µ–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—à–µ–ª –¥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏
        this.clearReminder(userId);
        schedulerLogger.debug(
          { userId, channelMessageId },
          '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –æ—Ç–º–µ–Ω–µ–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—à–µ–ª –¥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏ (–≥–ª—É–±–æ–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π)'
        );

        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è deep_waiting_positive_emotions_clarification
      if (session.currentStep === 'deep_waiting_positive_emotions_clarification') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ø–æ–ª–Ω–∏–ª –æ—Ç–≤–µ—Ç –ø—Ä–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –≤ –≥–ª—É–±–æ–∫–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
        schedulerLogger.info(
          {
            userId,
            channelMessageId,
            messageText: messageText.substring(0, 50),
          },
          '–ü–æ–ª—É—á–µ–Ω –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ (–≥–ª—É–±–æ–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π)'
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        const { getUserByChatId } = await import('./db');
        const user = getUserByChatId(userId);
        if (user) {
          saveMessage(userId, messageText, new Date().toISOString(), user.id);
        }

        // –û—Ç–º–µ—á–∞–µ–º –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
        const { updateTaskStatus } = await import('./db');
        updateTaskStatus(channelMessageId, 2, true);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { updateInteractivePostState } = await import('./db');
        updateInteractivePostState(channelMessageId, 'deep_waiting_practice', {
          user_positive_emotions_clarification_message_id: messageId,
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å —Å –æ—Å–æ–±—ã–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        let finalMessage = '<i>–í–∞—É! ü§© –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è! –≠—Ç–æ –±—ã–ª–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ!</i>\n\n';
        finalMessage += '–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ - –≤—Ä–µ–º—è –∑–∞–º–µ–¥–ª–∏—Ç—å—Å—è –∏ –ø–æ–±—ã—Ç—å –≤ –ø–æ–∫–æ–µ ü§ç\n';
        finalMessage += '3. <b>–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</b>\n\n';
        finalMessage +=
          '<blockquote><b>–î—ã—Ö–∞–Ω–∏–µ –ø–æ –∫–≤–∞–¥—Ä–∞—Ç—É:</b>\n–í–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ –¥—ã—Ö–∞–Ω–∏—è –Ω–∞ 4 —Å—á–µ—Ç–∞, –≤—ã–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞ –∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 4 —Å—á–µ—Ç–∞</blockquote>';

        const practiceKeyboard = {
          inline_keyboard: [
            [{ text: '‚úÖ –°–¥–µ–ª–∞–ª', callback_data: `pract_done_${channelMessageId}` }],
            [{ text: '‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å', callback_data: `pract_delay_${channelMessageId}` }],
          ],
        };

        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π
          const practiceVideo = readFileSync(this.PRACTICE_VIDEO_PATH);
          const thumbnailBuffer = readFileSync(this.PRACTICE_VIDEO_THUMBNAIL_PATH);

          const task3Message = await this.sendWithRetry(
            () =>
              this.bot.telegram.sendVideo(replyToChatId, { source: practiceVideo }, {
                caption: finalMessage,
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
                reply_markup: practiceKeyboard,
                thumbnail: { source: thumbnailBuffer },
              } as any),
            {
              chatId: userId,
              messageType: 'deep_practice_video_after_positive_clarification',
              maxAttempts: 20,
              intervalMs: 10000,
            }
          );

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          saveMessage(userId, finalMessage, new Date().toISOString(), 0);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
          updateInteractivePostState(channelMessageId, 'deep_waiting_practice', {
            bot_task3_message_id: task3Message.message_id,
          });

          // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ 3 –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
          updateTaskStatus(channelMessageId, 3, true);

          // –û—Ç–º–µ–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ
          this.clearReminder(userId);
          schedulerLogger.debug(
            { userId, channelMessageId },
            '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—à–µ–ª –¥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏ (–≥–ª—É–±–æ–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–π)'
          );

          return true;
        } catch (practiceError) {
          schedulerLogger.error(
            { error: practiceError },
            '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π (–≥–ª—É–±–æ–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π)'
          );
          return false;
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è deep_waiting_practice
      if (session.currentStep === 'deep_waiting_practice') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π (–≥–ª—É–±–æ–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π)
        schedulerLogger.info(
          { userId, messageText: messageText.substring(0, 50) },
          '–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ (–≥–ª—É–±–æ–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π)'
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        const { updateInteractivePostState } = await import('./db');
        const { getInteractivePost } = await import('./db');
        const post = getInteractivePost(channelMessageId);

        if (!post?.practice_reminder_sent) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
          try {
            await this.sendWithRetry(
              () =>
                this.bot.telegram.sendMessage(
                  userId,
                  '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üåü –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –∏ –Ω–∞–∂–º–∏ "–°–¥–µ–ª–∞–ª" –ø–æ—Å–ª–µ –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è'
                ),
              {
                chatId: userId,
                messageType: 'deep_practice_reminder',
                maxAttempts: 5,
                intervalMs: 3000,
              }
            );

            // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            updateInteractivePostState(channelMessageId, 'deep_waiting_practice', {
              practice_reminder_sent: true,
            });

            schedulerLogger.info(
              { channelMessageId },
              '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É (–≥–ª—É–±–æ–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π)'
            );
          } catch (error) {
            schedulerLogger.error({ error }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–µ (–≥–ª—É–±–æ–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π)');
          }
        } else {
          // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
          schedulerLogger.debug(
            { userId },
            '–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–≥–ª—É–±–æ–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π)'
          );
        }

        return true; // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–∞–∑–±–æ—Ä–∞ –ø–æ —Å—Ö–µ–º–µ
      if (session.currentStep === 'schema_waiting_trigger') {
        const { getDeepWorkHandler } = await import('./handlers/callbacks/deep_work_buttons');
        const deepHandler = getDeepWorkHandler(this.bot, replyToChatId);
        await deepHandler.handleTriggerResponse(channelMessageId, messageText, userId, messageId);
        return;
      }

      if (session.currentStep === 'schema_waiting_thoughts') {
        const { getDeepWorkHandler } = await import('./handlers/callbacks/deep_work_buttons');
        const deepHandler = getDeepWorkHandler(this.bot, replyToChatId);
        await deepHandler.handleSchemaThoughtsResponse(channelMessageId, messageText, userId, messageId);
        return;
      }

      if (session.currentStep === 'schema_waiting_emotions') {
        const { getDeepWorkHandler } = await import('./handlers/callbacks/deep_work_buttons');
        const deepHandler = getDeepWorkHandler(this.bot, replyToChatId);
        await deepHandler.handleSchemaEmotionsResponse(channelMessageId, messageText, userId, messageId);
        return;
      }

      if (session.currentStep === 'schema_waiting_emotions_clarification') {
        const { getDeepWorkHandler } = await import('./handlers/callbacks/deep_work_buttons');
        const deepHandler = getDeepWorkHandler(this.bot, replyToChatId);
        await deepHandler.handleSchemaEmotionsClarificationResponse(channelMessageId, messageText, userId, messageId);
        return;
      }

      if (session.currentStep === 'schema_waiting_behavior') {
        const { getDeepWorkHandler } = await import('./handlers/callbacks/deep_work_buttons');
        const deepHandler = getDeepWorkHandler(this.bot, replyToChatId);
        await deepHandler.handleSchemaBehaviorResponse(channelMessageId, messageText, userId, messageId);
        return;
      }

      if (session.currentStep === 'schema_waiting_correction') {
        const { getDeepWorkHandler } = await import('./handlers/callbacks/deep_work_buttons');
        const deepHandler = getDeepWorkHandler(this.bot, replyToChatId);
        await deepHandler.handleSchemaCorrectionResponse(channelMessageId, messageText, userId, messageId);
        return;
      }

      if (session.currentStep === 'waiting_negative') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        schedulerLogger.info(
          {
            userId,
            channelMessageId,
            messageText: messageText.substring(0, 50),
          },
          '–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ'
        );

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ë–î
        const { updateInteractivePostState, updateTaskStatus } = await import('./db');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        updateInteractivePostState(channelMessageId, 'waiting_negative', {
          user_task1_message_id: messageId,
        });

        // –°—Ä–∞–∑—É –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —ç–º–æ—Ü–∏–π
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Å—á–µ—Ç–∞ —ç–º–æ—Ü–∏–π
        const { countEmotions, getEmotionHelpMessage } = await import('./utils/emotions');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ—Ü–∏–π –≤ –æ—Ç–≤–µ—Ç–µ
        const emotionAnalysis = countEmotions(messageText, 'negative');

        schedulerLogger.debug(
          {
            userId,
            channelMessageId,
            emotionsCount: emotionAnalysis.count,
            emotions: emotionAnalysis.emotions,
            categories: emotionAnalysis.categories,
          },
          '–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –≤ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        );

        // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 3 —ç–º–æ—Ü–∏–π - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç—å
        if (emotionAnalysis.count < 3) {
          const helpMessage = getEmotionHelpMessage(emotionAnalysis.emotions, 'negative');

          const sendOptions: any = {
            parse_mode: 'HTML',
            reply_parameters: {
              message_id: messageId,
            },
            reply_markup: {
              inline_keyboard: [
                [{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }],
                [{ text: '–í –¥—Ä—É–≥–æ–π —Ä–∞–∑', callback_data: `skip_neg_${channelMessageId}` }],
              ],
            },
          };

          try {
            const helpMessageResult = await this.sendWithRetry(
              () => this.bot.telegram.sendMessage(replyToChatId, helpMessage, sendOptions),
              {
                chatId: userId,
                messageType: 'emotions_help',
                maxAttempts: 10,
                intervalMs: 5000,
              }
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            updateInteractivePostState(channelMessageId, 'waiting_emotions_clarification', {
              user_schema_message_id: messageId,
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            session.currentStep = 'waiting_emotions_clarification';
            return true;
          } catch (helpError) {
            schedulerLogger.error({ error: helpError }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–º–æ—â–∏ —Å —ç–º–æ—Ü–∏—è–º–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–ª—é—à–∫–∞–º–∏');
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
          }
        }

        // –ï—Å–ª–∏ —ç–º–æ—Ü–∏–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª—é—à–∫–∏
        try {
          // –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
          updateTaskStatus(channelMessageId, 1, true);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª—é—à–∫–∏ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
          const fallbackText =
            '2. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b>\n\n–í—Å–ø–æ–º–Ω–∏ –∏ –Ω–∞–ø–∏—à–∏ –≤—Å–µ –ø—Ä–∏—è—Ç–Ω–æ–µ –∑–∞ –¥–µ–Ω—å\n–¢—É—Ç —Ç–æ–∂–µ –æ–ø–∏—à–∏ —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏—Å–ø—ã—Ç–∞–ª üòç';

          const fallbackMessage = await this.sendWithRetry(
            () =>
              this.bot.telegram.sendMessage(replyToChatId, fallbackText, {
                parse_mode: 'HTML',
                reply_parameters: { message_id: messageId },
                reply_markup: {
                  inline_keyboard: [[{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }]],
                },
              }),
            {
              chatId: userId,
              messageType: 'positive_task',
              maxAttempts: 5,
              intervalMs: 3000,
            }
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          updateInteractivePostState(channelMessageId, 'waiting_positive', {
            bot_task2_message_id: fallbackMessage.message_id,
          });

          session.currentStep = 'waiting_positive';
          return true;
        } catch (fallbackError2) {
          schedulerLogger.error({ error: fallbackError2 }, '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª—é—à–∫–∏');
          return false;
        }
      } else if (session.currentStep === 'waiting_emotions') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —ç–º–æ—Ü–∏–∏
        schedulerLogger.info(
          {
            userId,
            channelMessageId,
            messageText: messageText.substring(0, 50),
          },
          '–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —ç–º–æ—Ü–∏–∏'
        );

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Å—á–µ—Ç–∞ —ç–º–æ—Ü–∏–π
        const { countEmotions, getEmotionHelpMessage } = await import('./utils/emotions');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ—Ü–∏–π –≤ –æ—Ç–≤–µ—Ç–µ
        const emotionAnalysis = countEmotions(messageText, 'negative');

        schedulerLogger.debug(
          {
            userId,
            channelMessageId,
            emotionsCount: emotionAnalysis.count,
            emotions: emotionAnalysis.emotions,
            categories: emotionAnalysis.categories,
          },
          '–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –≤ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        );

        // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 3 —ç–º–æ—Ü–∏–π - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç—å
        if (emotionAnalysis.count < 3) {
          const helpMessage = getEmotionHelpMessage(emotionAnalysis.emotions, 'negative');

          const sendOptions: any = {
            parse_mode: 'HTML',
            reply_parameters: {
              message_id: messageId,
            },
            reply_markup: {
              inline_keyboard: [
                [{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }],
                [{ text: '–í –¥—Ä—É–≥–æ–π —Ä–∞–∑', callback_data: `skip_neg_${channelMessageId}` }],
              ],
            },
          };

          try {
            const helpMessageResult = await this.sendWithRetry(
              () => this.bot.telegram.sendMessage(replyToChatId, helpMessage, sendOptions),
              {
                chatId: userId,
                messageType: 'emotions_help',
                maxAttempts: 10,
                intervalMs: 5000,
              }
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            const { updateInteractivePostState } = await import('./db');
            updateInteractivePostState(channelMessageId, 'waiting_emotions_clarification', {
              user_schema_message_id: messageId,
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            session.currentStep = 'waiting_emotions_clarification';
            return true;
          } catch (helpError) {
            schedulerLogger.error({ error: helpError }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–º–æ—â–∏ —Å —ç–º–æ—Ü–∏—è–º–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–ª—é—à–∫–∞–º–∏');
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ –∫ –ø–ª—é—à–∫–∞–º
          }
        }

        // –ï—Å–ª–∏ —ç–º–æ—Ü–∏–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ

        // –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
        updateTaskStatus(channelMessageId, 1, true);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { updateInteractivePostState } = await import('./db');
        updateInteractivePostState(channelMessageId, 'waiting_positive', {
          user_schema_message_id: messageId,
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª—é—à–∫–∏ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
        const supportText = this.getRandomSupportText();
        const plushkiText = `<i>${supportText}</i>\n\n2. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b>\n\n–í—Å–ø–æ–º–Ω–∏ –∏ –Ω–∞–ø–∏—à–∏ –≤—Å–µ –ø—Ä–∏—è—Ç–Ω–æ–µ –∑–∞ –¥–µ–Ω—å\n–¢—É—Ç —Ç–æ–∂–µ –æ–ø–∏—à–∏ —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏—Å–ø—ã—Ç–∞–ª üòç`;

        const sendOptions: any = {
          parse_mode: 'HTML',
          reply_parameters: {
            message_id: messageId,
          },
          reply_markup: {
            inline_keyboard: [[{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }]],
          },
        };

        try {
          const task2Message = await this.sendWithRetry(
            () => this.bot.telegram.sendMessage(replyToChatId, plushkiText, sendOptions),
            {
              chatId: userId,
              messageType: 'plushki_task',
              maxAttempts: 10,
              intervalMs: 5000,
              onSuccess: async result => {
                saveMessage(userId, plushkiText, new Date().toISOString(), 0);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª—é—à–∫–∞–º–∏
                updateInteractivePostState(channelMessageId, 'waiting_positive', {
                  bot_task2_message_id: result.message_id,
                });
              },
            }
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Ç–µ–ø–µ—Ä—å –∂–¥–µ–º –ø–ª—é—à–∫–∏
          session.currentStep = 'waiting_positive';
          return true;
        } catch (plushkiError) {
          schedulerLogger.error({ error: plushkiError }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª—é—à–µ–∫');
          return false;
        }
      } else if (session.currentStep === 'waiting_emotions_clarification') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ø–æ–ª–Ω–∏–ª –æ—Ç–≤–µ—Ç –ø—Ä–æ —ç–º–æ—Ü–∏–∏
        schedulerLogger.info(
          {
            userId,
            channelMessageId,
            messageText: messageText.substring(0, 50),
          },
          '–ü–æ–ª—É—á–µ–Ω –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–æ —ç–º–æ—Ü–∏–∏'
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        const { getUserByChatId } = await import('./db');
        const user = getUserByChatId(userId);
        if (user) {
          saveMessage(userId, messageText, new Date().toISOString(), user.id);
        }

        // –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
        updateTaskStatus(channelMessageId, 1, true);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { updateInteractivePostState } = await import('./db');
        updateInteractivePostState(channelMessageId, 'waiting_positive', {
          user_emotions_clarification_message_id: messageId,
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª—é—à–∫–∏ —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        const emotionsSupportTexts = [
          '–¢–µ–ø–µ—Ä—å —Ç—ã –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞–µ—à—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏ üôåüèª',
          '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–∞–∑–≤–∞–ª –Ω–µ–ø—Ä–æ—Å—Ç—ã–µ —ç–º–æ—Ü–∏–∏ ü©∂',
          '–¢—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ —Å–º–æ–≥ —ç—Ç–æ –æ–ø–∏—Å–∞—Ç—å üåü',
          '–í–∞–∂–Ω–æ, —á—Ç–æ —Ç—ã –æ—Å–æ–∑–Ω–∞–µ—à—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞, –¥–∞–∂–µ –∫–æ–≥–¥–∞ —ç—Ç–æ —Å–æ–≤—Å–µ–º –Ω–µ–ø—Ä–æ—Å—Ç–æ ‚ù§Ô∏è‚Äçü©π',
          '–•–æ—Ä–æ—à–æ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–∑–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏ ‚ú®',
          '–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –Ω–µ–ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–µ–π üéØ',
          '–° –∫–∞–∂–¥—ã–º —Ä–∞–∑–æ–º —Ç—ã –≤—Å–µ –ª—É—á—à–µ —Ä–∞–∑–±–∏—Ä–∞–µ—à—å—Å—è –≤ —Å–≤–æ–∏—Ö —ç–º–æ—Ü–∏—è—Ö üéâ',
          '–¢—ã —É—á–∏—à—å—Å—è –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ–±—è - —ç—Ç–æ —Ü–µ–Ω–Ω–æ! –Ø —Å —Ç–æ–±–æ–π ü´Ç',
          '–¢—ã –¥–µ–ª–∞–µ—à—å –≤–∞–∂–Ω—ã–µ —à–∞–≥–∏ –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è üë£',
          '–Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π! –¢—ã —Å–º–æ–≥ –Ω–∞–∑–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏ ü§ç',
          '–ú–æ–ª–æ–¥–µ—Ü! –¢–µ–ø–µ—Ä—å —ç–º–æ—Ü–∏–∏ —Å—Ç–∞–ª–∏ –ø–æ–Ω—è—Ç–Ω–µ–µ üîÆ',
          '–¢—ã –ø—Ä–æ–¥–µ–ª–∞–ª –≤–∞–∂–Ω—É—é —Ä–∞–±–æ—Ç—É —Å —á—É–≤—Å—Ç–≤–∞–º–∏ üí™üèª',
          '–¢—ã —É—á–∏—à—å—Å—è —Å–ª—ã—à–∞—Ç—å —Å–µ–±—è - —ç—Ç–æ –≤–∞–∂–Ω–æ üëÇüèª',
          '–£—Ñ—Ñ.. –Ω–µ–ø—Ä–æ—Å—Ç–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–¥–µ–ª–∞–Ω–∞ —Å –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏! –¢—ã –º–æ–ª–æ–¥–µ—Ü ‚ù£Ô∏è',
          '–¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –±–ª–∏–∂–µ –∫ —Å–µ–±–µ ü§≤üèª',
          '–ö–∞–∂–¥–∞—è –Ω–∞–∑–≤–∞–Ω–Ω–∞—è —ç–º–æ—Ü–∏—è - —ç—Ç–æ –ø–æ–±–µ–¥–∞ üèÜ',
          '–¢—ã —Å–º–æ–≥! –ò —ç—Ç–æ –æ—á–µ–Ω—å —Ü–µ–Ω–Ω–æ üíé',
          '–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è! –≠—Ç–æ –±—ã–ª –≤–∞–∂–Ω—ã–π —à–∞–≥ üëèüèª',
          '–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π',
          '–¢—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è! –Ø –≤ —Ç–µ–±—è –≤–µ—Ä—é üå±',
          '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª—Å—è –∏ –Ω–∞–∑–≤–∞–ª —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ ü§ç',
          '–Ø –≤–∏–∂—É —Ç–≤–æ–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è. –¢—ã —Å–º–æ–≥ –∏—Ö –æ–∑–≤—É—á–∏—Ç—å ü´∂üèª',
          '–≠—Ç–æ –±—ã–ª–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ, –Ω–æ —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è üíö',
          '–¢–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –≤–∞–∂–Ω—ã. –•–æ—Ä–æ—à–æ, —á—Ç–æ —Ç—ã –∏—Ö –Ω–∞–∑–≤–∞–ª üïäÔ∏è',
          '–ü–æ–Ω–∏–º–∞—é, –∫–∞–∫ —ç—Ç–æ —Å–ª–æ–∂–Ω–æ. –¢—ã –º–æ–ª–æ–¥–µ—Ü üíú',
          '–Ø —Ä—è–¥–æ–º. –¢—ã —Å–º–æ–≥ –Ω–∞–∑–≤–∞—Ç—å —Ç–æ, —á—Ç–æ —Ç—Ä–µ–≤–æ–∂–∏—Ç ü§≤üèª',
          '–≠—Ç–æ —Ç—Ä–µ–±–æ–≤–∞–ª–æ —Å–º–µ–ª–æ—Å—Ç–∏. –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è üå±',
          '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç—å üí´',
          '–¢—ã –ø—Ä–æ–¥–µ–ª–∞–ª –Ω–µ–ø—Ä–æ—Å—Ç—É—é —Ä–∞–±–æ—Ç—É —Å —ç–º–æ—Ü–∏—è–º–∏ üåä',
          '–Ø —Å–ª—ã—à—É —Ç–µ–±—è. –¢—ã —Å–º–æ–≥ —ç—Ç–æ –≤—ã—Ä–∞–∑–∏—Ç—å üëêüèª',
        ];
        const randomSupportText = emotionsSupportTexts[Math.floor(Math.random() * emotionsSupportTexts.length)];
        const plushkiText = `<i>${randomSupportText}</i>\n\n2. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b>\n\n–í—Å–ø–æ–º–Ω–∏ –∏ –Ω–∞–ø–∏—à–∏ –≤—Å–µ –ø—Ä–∏—è—Ç–Ω–æ–µ –∑–∞ –¥–µ–Ω—å\n–¢—É—Ç —Ç–æ–∂–µ –æ–ø–∏—à–∏ —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏—Å–ø—ã—Ç–∞–ª üòç`;

        const sendOptions: any = {
          parse_mode: 'HTML',
          reply_parameters: {
            message_id: messageId,
          },
          reply_markup: {
            inline_keyboard: [[{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }]],
          },
        };

        try {
          const task2Message = await this.sendWithRetry(
            () => this.bot.telegram.sendMessage(replyToChatId, plushkiText, sendOptions),
            {
              chatId: userId,
              messageType: 'plushki_after_clarification',
              maxAttempts: 10,
              intervalMs: 5000,
            }
          );

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
          saveMessage(userId, plushkiText, new Date().toISOString(), 0);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
          updateInteractivePostState(channelMessageId, 'waiting_positive', {
            bot_task2_message_id: task2Message.message_id,
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Ç–µ–ø–µ—Ä—å –∂–¥–µ–º –ø–ª—é—à–∫–∏
          session.currentStep = 'waiting_positive';
          return true;
        } catch (plushkiError) {
          schedulerLogger.error({ error: plushkiError }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª—é—à–µ–∫ –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è');
          return false;
        }
      } else if (session.currentStep === 'waiting_schema') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å—Ö–µ–º—É —Ä–∞–∑–±–æ—Ä–∞
        schedulerLogger.info(
          {
            userId,
            channelMessageId,
            messageText: messageText.substring(0, 50),
          },
          '–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ö–µ–º—É —Ä–∞–∑–±–æ—Ä–∞'
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å—Ö–µ–º—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const { updateInteractivePostState } = await import('./db');
        updateInteractivePostState(channelMessageId, 'waiting_positive', {
          user_schema_message_id: messageId,
        });

        // –¢–µ–ø–µ—Ä—å –æ—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
        updateTaskStatus(channelMessageId, 1, true);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ + –ø–ª—é—à–∫–∏ (–≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å—Ö–µ–º—ã –Ω–µ—Ç)
        const supportText = this.getRandomSupportText();
        const responseText = `<i>${supportText}</i>\n\n${this.buildSecondPart(session.messageData, true)}`;

        const sendOptions: any = {
          parse_mode: 'HTML',
          reply_parameters: {
            message_id: messageId,
          },
        };

        try {
          const task2Message = await this.sendWithRetry(
            () => this.bot.telegram.sendMessage(replyToChatId, responseText, sendOptions),
            {
              chatId: userId,
              messageType: 'plushki_after_schema',
              maxAttempts: 10,
              intervalMs: 5000,
              onSuccess: async result => {
                saveMessage(userId, responseText, new Date().toISOString(), 0);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª—é—à–∫–∞–º–∏
                updateInteractivePostState(channelMessageId, 'waiting_positive', {
                  bot_task2_message_id: result.message_id,
                });
              },
            }
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Ç–µ–ø–µ—Ä—å –∂–¥–µ–º –ø–ª—é—à–∫–∏
          session.currentStep = 'waiting_positive';
          return true;
        } catch (plushkiError) {
          schedulerLogger.error({ error: plushkiError }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª—é—à–µ–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback');

          // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–ª—é—à–∫–∏ –±–µ–∑ –¥–æ–ø. —Ç–µ–∫—Å—Ç–∞
          try {
            const fallbackText = '2. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b> (—Å–∏—Ç—É–∞—Ü–∏—è+—ç–º–æ—Ü–∏—è)';
            const fallbackMessage = await this.sendWithRetry(
              () =>
                this.bot.telegram.sendMessage(replyToChatId, fallbackText, {
                  parse_mode: 'HTML',
                  reply_parameters: { message_id: messageId },
                }),
              {
                chatId: userId,
                messageType: 'plushki_fallback',
                maxAttempts: 5,
                intervalMs: 3000,
              }
            );

            updateInteractivePostState(channelMessageId, 'waiting_positive', {
              bot_task2_message_id: fallbackMessage.message_id,
            });

            session.currentStep = 'waiting_positive';
            return true;
          } catch (criticalError) {
            schedulerLogger.error(
              { error: criticalError },
              '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ fallback –ø–ª—é—à–µ–∫'
            );
            return false;
          }
        }
      } else if (session.currentStep === 'waiting_positive') {
        // –û—Ç–≤–µ—Ç –Ω–∞ –ø–ª—é—à–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å
        schedulerLogger.info(
          {
            userId,
            currentStep: session.currentStep,
            channelMessageId,
            messageText: messageText.substring(0, 50),
            replyToChatId,
            messageId,
            activePost: {
              task1: activePost?.task1_completed,
              task2: activePost?.task2_completed,
              task3: activePost?.task3_completed,
              current_state: activePost?.current_state,
            },
          },
          'üìù –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –ø–ª—é—à–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ 3'
        );

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥—Å—á–µ—Ç–∞ —ç–º–æ—Ü–∏–π
        const { countEmotions, getEmotionHelpMessage } = await import('./utils/emotions');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π –≤ –æ—Ç–≤–µ—Ç–µ
        const emotionAnalysis = countEmotions(messageText, 'positive');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π
        const negativeEmotionsWereRequested =
          activePost?.current_state === 'waiting_emotions_clarification' || activePost?.bot_help_message_id;

        schedulerLogger.debug(
          {
            userId,
            channelMessageId,
            positiveEmotionsCount: emotionAnalysis.count,
            positiveEmotions: emotionAnalysis.emotions,
            categories: emotionAnalysis.categories,
            negativeEmotionsWereRequested,
          },
          '–ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π –≤ –ø–ª—é—à–∫–∞—Ö'
        );

        // –ï—Å–ª–∏ —ç–º–æ—Ü–∏–π –º–∞–ª–æ –ò –º—ã –Ω–µ –ø—Ä–æ—Å–∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç—å
        if (emotionAnalysis.count < 3 && !negativeEmotionsWereRequested) {
          const helpMessage = getEmotionHelpMessage(emotionAnalysis.emotions, 'positive');

          const sendOptions: any = {
            parse_mode: 'HTML',
            reply_parameters: {
              message_id: messageId,
            },
            reply_markup: {
              inline_keyboard: [
                [{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }],
                [{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: `skip_positive_emotions_${channelMessageId}` }],
              ],
            },
          };

          try {
            await this.sendWithRetry(() => this.bot.telegram.sendMessage(replyToChatId, helpMessage, sendOptions), {
              chatId: userId,
              messageType: 'positive_emotions_help',
              maxAttempts: 10,
              intervalMs: 5000,
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            const { updateInteractivePostState } = await import('./db');
            updateInteractivePostState(channelMessageId, 'waiting_positive_emotions_clarification', {
              user_task2_message_id: messageId,
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            session.currentStep = 'waiting_positive_emotions_clarification';
            return true;
          } catch (helpError) {
            schedulerLogger.error(
              { error: helpError },
              '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–º–æ—â–∏ —Å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π'
            );
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ
          }
        }

        // –ï—Å–ª–∏ —ç–º–æ—Ü–∏–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –±—ã–ª–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ

        // –û—Ç–º–µ—á–∞–µ–º –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
        updateTaskStatus(channelMessageId, 2, true);

        schedulerLogger.debug(
          {
            channelMessageId,
            step: 'after_task2_update',
          },
          '‚úÖ –í—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ'
        );

        let finalMessage = '–£ –Ω–∞—Å –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥\n\n';
        finalMessage += '3. <b>–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</b>\n\n';
        finalMessage +=
          '<blockquote><b>–î—ã—Ö–∞–Ω–∏–µ –ø–æ –∫–≤–∞–¥—Ä–∞—Ç—É:</b>\n–í–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ –¥—ã—Ö–∞–Ω–∏—è –Ω–∞ 4 —Å—á–µ—Ç–∞, –≤—ã–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞ –∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 4 —Å—á–µ—Ç–∞</blockquote>';

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ –∑–∞–¥–∞–Ω–∏—é 3
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º channelMessageId –Ω–∞–ø—Ä—è–º—É—é, –∫–∞–∫ –≤ –≥–ª—É–±–æ–∫–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
        if (!channelMessageId || channelMessageId === 0) {
          schedulerLogger.error(
            {
              channelMessageId,
              sessionData: session,
              activePost: activePost ? { id: activePost.channel_message_id } : null,
            },
            '‚ùå channelMessageId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Ä–∞–≤–µ–Ω 0!'
          );
          // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ activePost
          if (activePost && activePost.channel_message_id) {
            channelMessageId = activePost.channel_message_id;
          }
        }

        schedulerLogger.debug(
          {
            sessionChannelMessageId: session.channelMessageId,
            channelMessageId: channelMessageId,
            finalChannelId: channelMessageId,
            step: 'prepare_practice_keyboard',
          },
          'üî¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ID –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∞–∫—Ç–∏–∫–∏'
        );

        const practiceKeyboard = {
          inline_keyboard: [
            [{ text: '‚úÖ –°–¥–µ–ª–∞–ª', callback_data: `pract_done_${channelMessageId}` }],
            [{ text: '‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å', callback_data: `pract_delay_${channelMessageId}` }],
          ],
        };

        const finalOptions: any = {
          parse_mode: 'HTML',
          reply_parameters: {
            message_id: messageId,
          },
          reply_markup: practiceKeyboard,
        };

        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≥—Ä—É–ø–ø —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –Ω–µ –Ω—É–∂–µ–Ω message_thread_id
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ reply_to_message_id –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—ã—à–µ

        schedulerLogger.info(
          {
            channelMessageId,
            replyToChatId,
            messageId,
            practiceVideoPath: this.PRACTICE_VIDEO_PATH,
            keyboardData: practiceKeyboard,
            step: 'before_video_send',
            isTestBot: this.isTestBot(),
            chatId: replyToChatId,
          },
          'üé¨ –ì–æ—Ç–æ–≤–∏–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π'
        );

        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
          const practiceVideo = readFileSync(this.PRACTICE_VIDEO_PATH);
          const thumbnailBuffer = readFileSync(this.PRACTICE_VIDEO_THUMBNAIL_PATH);

          const task3Message = await this.sendWithRetry(
            () =>
              this.bot.telegram.sendVideo(replyToChatId, { source: practiceVideo }, {
                caption: finalMessage,
                parse_mode: 'HTML',
                reply_to_message_id: messageId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º reply_to_message_id –≤–º–µ—Å—Ç–æ reply_parameters
                reply_markup: practiceKeyboard,
                thumbnail: { source: thumbnailBuffer },
              } as any),
            {
              chatId: userId,
              messageType: 'practice_video',
              maxAttempts: 20, // –î–ª—è –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫
              intervalMs: 10000, // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
              onSuccess: async result => {
                schedulerLogger.info(
                  {
                    channelMessageId,
                    task3MessageId: result.message_id,
                    step: 'video_sent_success',
                  },
                  '‚úÖ –í–∏–¥–µ–æ —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
                );

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                saveMessage(userId, finalMessage, new Date().toISOString(), 0);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
                const { updateInteractivePostState } = await import('./db');
                updateInteractivePostState(channelMessageId, 'waiting_practice', {
                  bot_task3_message_id: result.message_id,
                  user_task2_message_id: messageId,
                });

                // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ 3 –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø—Ä–∞–∫—Ç–∏–∫–∞)
                updateTaskStatus(channelMessageId, 3, true);

                // –û—Ç–º–µ–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ
                this.clearReminder(userId);
                schedulerLogger.debug(
                  { userId, channelMessageId },
                  '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –æ—Ç–º–µ–Ω–µ–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—à–µ–ª –¥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏'
                );
              },
            }
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
          session.currentStep = 'waiting_practice';
          return true;
        } catch (practiceError) {
          schedulerLogger.error(
            {
              error: practiceError,
              errorMessage: (practiceError as Error).message,
              errorStack: (practiceError as Error).stack,
              errorDetails: JSON.stringify(practiceError),
              channelMessageId,
              replyToChatId,
              messageId,
              videoPath: this.PRACTICE_VIDEO_PATH,
              isTestBot: this.isTestBot(),
              step: 'video_send_error',
            },
            '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º fallback'
          );

          // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
          try {
            const fallbackFinalText =
              '–£ –Ω–∞—Å –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥\n\n3. <b>–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</b>\n\n<blockquote><b>–î—ã—Ö–∞–Ω–∏–µ –ø–æ –∫–≤–∞–¥—Ä–∞—Ç—É:</b>\n–í–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ –¥—ã—Ö–∞–Ω–∏—è –Ω–∞ 4 —Å—á–µ—Ç–∞, –≤—ã–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞ –∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 4 —Å—á–µ—Ç–∞</blockquote>\n\n–û—Ç–º–µ—Ç—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –≤ —ç—Ç–æ–π –≤–µ—Ç–∫–µ.';

            // –í fallback —Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            const fallbackVideo = readFileSync(this.PRACTICE_VIDEO_PATH);
            const fallbackThumbnail = readFileSync(this.PRACTICE_VIDEO_THUMBNAIL_PATH);

            await this.sendWithRetry(
              () =>
                this.bot.telegram.sendVideo(replyToChatId, { source: fallbackVideo }, {
                  caption: fallbackFinalText,
                  parse_mode: 'HTML',
                  reply_to_message_id: messageId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º reply_to_message_id –≤–º–µ—Å—Ç–æ reply_parameters
                  thumbnail: { source: fallbackThumbnail },
                } as any),
              {
                chatId: userId,
                messageType: 'practice_video_fallback',
                maxAttempts: 5,
                intervalMs: 3000,
              }
            );

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ
            session.currentStep = 'waiting_practice';
            return true;
          } catch (criticalError) {
            schedulerLogger.error(
              { error: criticalError },
              '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ fallback —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
            );
            return false;
          }
        }
      } else if (session.currentStep === 'waiting_positive_emotions_clarification') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ø–æ–ª–Ω–∏–ª –æ—Ç–≤–µ—Ç –ø—Ä–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏
        schedulerLogger.info(
          {
            userId,
            channelMessageId,
            messageText: messageText.substring(0, 50),
          },
          '–ü–æ–ª—É—á–µ–Ω –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏'
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        const { getUserByChatId } = await import('./db');
        const user = getUserByChatId(userId);
        if (user) {
          saveMessage(userId, messageText, new Date().toISOString(), user.id);
        }

        // –û—Ç–º–µ—á–∞–µ–º –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
        updateTaskStatus(channelMessageId, 2, true);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { updateInteractivePostState } = await import('./db');
        updateInteractivePostState(channelMessageId, 'waiting_practice', {
          user_positive_emotions_clarification_message_id: messageId,
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å
        let finalMessage = '–£ –Ω–∞—Å –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥\n\n';
        finalMessage += '3. <b>–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</b>\n\n';
        finalMessage +=
          '<blockquote><b>–î—ã—Ö–∞–Ω–∏–µ –ø–æ –∫–≤–∞–¥—Ä–∞—Ç—É:</b>\n–í–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ –¥—ã—Ö–∞–Ω–∏—è –Ω–∞ 4 —Å—á–µ—Ç–∞, –≤—ã–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞ –∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 4 —Å—á–µ—Ç–∞</blockquote>';

        const practiceKeyboard = {
          inline_keyboard: [
            [{ text: '‚úÖ –°–¥–µ–ª–∞–ª', callback_data: `pract_done_${channelMessageId}` }],
            [{ text: '‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å', callback_data: `pract_delay_${channelMessageId}` }],
          ],
        };

        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π
          const practiceVideo = readFileSync(this.PRACTICE_VIDEO_PATH);
          const thumbnailBuffer = readFileSync(this.PRACTICE_VIDEO_THUMBNAIL_PATH);

          const practiceResult = await this.sendWithRetry(
            () =>
              this.bot.telegram.sendVideo(replyToChatId, { source: practiceVideo }, {
                caption: finalMessage,
                parse_mode: 'HTML',
                reply_to_message_id: messageId,
                reply_markup: practiceKeyboard,
                thumbnail: { source: thumbnailBuffer },
              } as any),
            {
              chatId: userId,
              messageType: 'practice_video_after_positive_clarification',
              maxAttempts: 20,
              intervalMs: 10000,
            }
          );

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          saveMessage(userId, finalMessage, new Date().toISOString(), 0);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
          updateInteractivePostState(channelMessageId, 'waiting_practice', {
            bot_task3_message_id: practiceResult.message_id,
          });

          // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ 3 –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
          updateTaskStatus(channelMessageId, 3, true);

          // –û—Ç–º–µ–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ
          this.clearReminder(userId);
          schedulerLogger.debug({ userId, channelMessageId }, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—à–µ–ª –¥–æ –ø—Ä–∞–∫—Ç–∏–∫–∏');

          return true;
        } catch (practiceError) {
          schedulerLogger.error({ error: practiceError }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π');
          return false;
        }
      } else if (session.currentStep === 'waiting_practice') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        schedulerLogger.info(
          { userId, messageText: messageText.substring(0, 50) },
          '–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏'
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        const { updateInteractivePostState } = await import('./db');
        const { getInteractivePost } = await import('./db');
        const post = getInteractivePost(channelMessageId);

        if (!post?.practice_reminder_sent) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
          try {
            await this.sendWithRetry(
              () =>
                this.bot.telegram.sendMessage(replyToChatId, '–í—ã–ø–æ–ª–Ω–∏ –ø—Ä–∞–∫—Ç–∏–∫—É –∏ –Ω–∞–∂–º–∏ "–°–¥–µ–ª–∞–ª" –ø–æ—Å–ª–µ –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', {
                  reply_parameters: {
                    message_id: messageId,
                  },
                }),
              {
                chatId: userId,
                messageType: 'practice_reminder',
                maxAttempts: 5,
                intervalMs: 3000,
              }
            );

            // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            updateInteractivePostState(channelMessageId, 'waiting_practice', {
              practice_reminder_sent: true,
            });

            schedulerLogger.info({ channelMessageId }, '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É');
          } catch (error) {
            schedulerLogger.error({ error }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–µ');
          }
        } else {
          // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
          schedulerLogger.debug({ userId }, '–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        }

        return true; // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      }

      return true; // –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
    } catch (error) {
      schedulerLogger.error({ error, userId }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞');
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
  public async checkUncompletedTasks() {
    try {
      schedulerLogger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞...');

      const db = await import('./db');
      const { restoreUncompletedDialogs } = await import('./interactive-tracker');

      // –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
      await restoreUncompletedDialogs(this.bot);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—è current_state
      const query = db.db.query(`
        SELECT DISTINCT ip.*, u.chat_id as user_chat_id
        FROM interactive_posts ip
        JOIN users u ON ip.user_id = u.chat_id
        WHERE (ip.task1_completed = 0 OR ip.task2_completed = 0 OR ip.task3_completed = 0)
        AND ip.created_at > datetime('now', '-7 days')
        ORDER BY ip.created_at DESC
      `);

      const incompletePosts = query.all() as any[];

      schedulerLogger.info(
        {
          count: incompletePosts.length,
          posts: incompletePosts.map(p => ({
            channelMessageId: p.channel_message_id,
            userId: p.user_id,
            task1: p.task1_completed,
            task2: p.task2_completed,
            task3: p.task3_completed,
            created: p.created_at,
          })),
        },
        `–ù–∞–π–¥–µ–Ω–æ ${incompletePosts.length} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π`
      );

      for (const post of incompletePosts) {
        try {
          // –ü–∞—Ä—Å–∏–º message_data
          if (post.message_data && typeof post.message_data === 'string') {
            post.message_data = JSON.parse(post.message_data);
          }

          const userId = post.user_id;
          const channelMessageId = post.channel_message_id;

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
          const messageLinksQuery = db.db.query(`
            SELECT * FROM message_links
            WHERE channel_message_id = ? AND message_type = 'user'
            ORDER BY created_at DESC
            LIMIT 1
          `);
          const lastUserLink = messageLinksQuery.get(channelMessageId) as any;

          if (!lastUserLink) {
            // Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
            const msgQuery = db.db.query(`
              SELECT m.* FROM messages m
              JOIN users u ON m.user_id = u.id
              WHERE u.chat_id = ? AND m.author_id = ?
              ORDER BY m.sent_time DESC
              LIMIT 1
            `);
            const lastUserMsg = msgQuery.get(userId, userId) as any;

            schedulerLogger.debug(
              {
                userId,
                channelMessageId,
                lastUserMsg: lastUserMsg
                  ? {
                      text: lastUserMsg.message_text?.substring(0, 50),
                      time: lastUserMsg.sent_time,
                    }
                  : null,
              },
              '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)'
            );

            if (!lastUserMsg) {
              schedulerLogger.debug({ userId }, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø–∏—Å–∞–ª - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
              continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
            const postTime = new Date(post.created_at).getTime();
            const msgTime = new Date(lastUserMsg.sent_time).getTime();

            if (msgTime > postTime) {
              // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –ø–∏—Å–∞–ª –ø–æ—Å–ª–µ –ø–æ—Å—Ç–∞
              const currentStep = this.determineCurrentStep(post);

              schedulerLogger.info(
                {
                  userId,
                  channelMessageId,
                  currentStep,
                  lastMessage: lastUserMsg.message_text.substring(0, 50),
                },
                'üì® –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º'
              );

              // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
              const CHAT_ID = this.getChatId();
              if (CHAT_ID) {
                await this.sendPendingResponse(userId, post, currentStep, CHAT_ID, channelMessageId);

                // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å API
                await new Promise(resolve => setTimeout(resolve, 1000));
              }
            }
          } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            const postTime = new Date(post.created_at).getTime();
            const msgTime = new Date(lastUserLink.created_at).getTime();

            schedulerLogger.debug(
              {
                userId,
                channelMessageId,
                messageId: lastUserLink.message_id,
                messageType: lastUserLink.message_type,
                time: lastUserLink.created_at,
              },
              '–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É'
            );

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ current_state –∏–ª–∏ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏
            const currentStep = post.current_state || this.determineCurrentStep(post);

            schedulerLogger.info(
              {
                userId,
                channelMessageId,
                currentStep,
                messageId: lastUserLink.message_id,
              },
              'üì® –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)'
            );

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
            const CHAT_ID = this.getChatId();
            if (CHAT_ID) {
              await this.sendPendingResponse(userId, post, currentStep, CHAT_ID, channelMessageId);

              // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å API
              await new Promise(resolve => setTimeout(resolve, 1000));
            }
          }
        } catch (error) {
          schedulerLogger.error(
            {
              error,
              postId: post.channel_message_id,
            },
            '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞'
          );
        }
      }

      schedulerLogger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      schedulerLogger.error({ error }, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  private async sendPendingResponse(
    userId: number,
    post: any,
    currentStep: string,
    chatId: number,
    channelMessageId: number
  ) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    // –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≥—Ä—É–ø–ø—É
    if (userId === this.getMainUserId()) {
      chatId = -1002496122257; // –û—Å–Ω–æ–≤–Ω–∞—è –≥—Ä—É–ø–ø–∞
    }

    // –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç—Ä–µ–¥
    let threadId: number | undefined;

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–∞–º—è—Ç–∏
    threadId = this.forwardedMessages.get(channelMessageId);

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–∞–º—è—Ç–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
    if (!threadId) {
      const { db } = await import('./db');
      const row = db
        .query('SELECT thread_id FROM thread_mappings WHERE channel_message_id = ?')
        .get(channelMessageId) as any;
      if (row?.thread_id) {
        threadId = row.thread_id;
      }
    }

    if (!threadId) {
      schedulerLogger.warn(
        {
          userId,
          channelMessageId,
        },
        '‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω thread_id –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ–±—â–∏–π —á–∞—Ç'
      );
    }

    try {
      const { updateTaskStatus } = await import('./db');

      if (currentStep === 'waiting_negative') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–æ –±–æ—Ç –Ω–µ —É—Å–ø–µ–ª –æ—Ç–≤–µ—Ç–∏—Ç—å
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É —Ä–∞–∑–±–æ—Ä–∞ —Å–∏—Ç—É–∞—Ü–∏–∏
        const responseText = `–î–∞–≤–∞–π <b>—Ä–∞–∑–ª–æ–∂–∏–º</b> –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Å–∏—Ç—É–∞—Ü–∏—é <b>–ø–æ —Å—Ö–µ–º–µ</b>:
üóì –¢—Ä–∏–≥–≥–µ—Ä - –ú—ã—Å–ª–∏ - –≠–º–æ—Ü–∏–∏ - –û—â—É—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ - –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∏–ª–∏ –∏–º–ø—É–ª—å—Å –∫ –¥–µ–π—Å—Ç–≤–∏—é`;

        const sendOptions: any = {
          parse_mode: 'HTML',
        };

        // –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º reply_to_message_id —Å ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        // –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if (threadId) {
          sendOptions.reply_to_message_id = threadId;
        }

        await this.sendWithRetry(() => this.bot.telegram.sendMessage(chatId, responseText, sendOptions), {
          chatId: userId,
          messageType: 'pending_schema_response',
          maxAttempts: 10,
          intervalMs: 5000,
        });

        // –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å—Ö–µ–º—É

        schedulerLogger.info(
          {
            userId,
            channelMessageId,
            threadId,
            hasThread: !!threadId,
          },
          '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ö–µ–º–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
        );
      } else if (currentStep === 'waiting_positive') {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç—å–µ –∑–∞–¥–∞–Ω–∏–µ
        let finalMessage = '–£ –Ω–∞—Å –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥\n\n';
        // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É —Å –≤–∏–¥–µ–æ
        finalMessage += '3. <b>–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</b>\n\n';
        finalMessage +=
          '<blockquote><b>–î—ã—Ö–∞–Ω–∏–µ –ø–æ –∫–≤–∞–¥—Ä–∞—Ç—É:</b>\n–í–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ –¥—ã—Ö–∞–Ω–∏—è –Ω–∞ 4 —Å—á–µ—Ç–∞, –≤—ã–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞ –∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 4 —Å—á–µ—Ç–∞</blockquote>';

        const practiceKeyboard = {
          inline_keyboard: [
            [{ text: '‚úÖ –°–¥–µ–ª–∞–ª', callback_data: `pract_done_${channelMessageId}` }],
            [{ text: '‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å', callback_data: `pract_delay_${channelMessageId}` }],
          ],
        };

        const sendOptions: any = {
          parse_mode: 'HTML',
          reply_markup: practiceKeyboard,
        };

        // –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç–∞–º –∏–∑ –∫–∞–Ω–∞–ª–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º message_thread_id
        // –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π
        const practiceVideoBuffer = readFileSync(this.PRACTICE_VIDEO_PATH);
        const thumbnailBuffer = readFileSync(this.PRACTICE_VIDEO_THUMBNAIL_PATH);

        // –î–ª—è –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º reply_to_message_id –≤–º–µ—Å—Ç–æ reply_parameters
        const videoOptions: any = {
          caption: finalMessage,
          parse_mode: sendOptions.parse_mode,
          reply_markup: sendOptions.reply_markup,
          thumbnail: { source: thumbnailBuffer },
        };
        if (sendOptions.reply_parameters?.message_id) {
          videoOptions.reply_to_message_id = sendOptions.reply_parameters.message_id;
        }
        await this.sendWithRetry(
          () => this.bot.telegram.sendVideo(chatId, { source: practiceVideoBuffer }, videoOptions),
          {
            chatId: userId,
            messageType: 'pending_practice_video',
            maxAttempts: 20,
            intervalMs: 10000,
          }
        );

        updateTaskStatus(channelMessageId, 2, true);

        schedulerLogger.info(
          {
            userId,
            channelMessageId,
            threadId,
            hasThread: !!threadId,
          },
          '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç—Ä–µ—Ç—å–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞'
        );
      }
    } catch (error) {
      schedulerLogger.error({ error, userId }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞');
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
  destroy() {
    logger.info('Stop scheduler...');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cron jobs
    if (this.dailyCronJob) {
      this.dailyCronJob.stop();
      this.dailyCronJob = null;
      logger.info('Daily cron job stopped');
    }

    if (this.morningCheckCronJob) {
      this.morningCheckCronJob.stop();
      this.morningCheckCronJob = null;
      logger.info('Morning check cron job stopped');
    }

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for (const [, timeout] of this.reminderTimeouts.entries()) {
      clearTimeout(timeout);
    }
    this.reminderTimeouts.clear();

    logger.info('Scheduler stopped');
  }
}
