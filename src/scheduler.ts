import { Telegraf } from "telegraf";
import {
  saveMessage,
  getUserResponseStats,
  getLastNBotMessages,
  addUser,
  saveUserImageIndex,
  getUserImageIndex,
  clearUserTokens,
  getAllUsers,
} from "./db";
import fs from "fs";
import path from "path";
import { CalendarService } from "./calendar";
import { generateMessage } from "./llm";
import { readFileSync } from "fs";
import { formatCalendarEvents } from "./calendar";
import * as cron from "node-cron";

const HOURS = 60 * 60 * 1000;

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è HTML (Telegram)
function escapeHTML(text: string): string {
  return text
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;");
}

export class Scheduler {
  private bot: Telegraf;
  private reminderTimeouts: Map<number, NodeJS.Timeout> = new Map();
  private users: Set<number> = new Set();
  private imageFiles: string[] = [];
  public readonly CHANNEL_ID = -1002405993986;
  // private readonly REMINDER_USER_ID = 5153477378; // –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–µ–ø–µ—Ä—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º chatId
  private calendarService: CalendarService;
  private dailyCronJob: cron.ScheduledTask | null = null;

  constructor(bot: Telegraf, calendarService: CalendarService) {
    this.bot = bot;
    this.calendarService = calendarService;
    this.loadImages();
    this.loadUsers();
    this.initializeDailySchedule();
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  private loadImages() {
    const imagesDir = path.join(process.cwd(), "images");
    const files = fs.readdirSync(imagesDir);
    this.imageFiles = files
      .filter(
        (file) =>
          file.toLowerCase().endsWith(".jpg") ||
          file.toLowerCase().endsWith(".jpeg") ||
          file.toLowerCase().endsWith(".png")
      )
      .map((file) => path.join(imagesDir, file));

    console.log("üì∏ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫:", this.imageFiles.length);
    console.log("üì∏ –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫:", this.imageFiles);
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  private loadUsers() {
    try {
      const users = getAllUsers();
      this.users.clear();
      for (const user of users) {
        this.users.add(user.chat_id);
      }
      console.log("üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã:", this.users.size);
      console.log("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", Array.from(this.users));
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã:", error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –∫—Ä—É–≥—É
  public getNextImage(chatId: number): string {
    const userImage = getUserImageIndex(chatId);
    let currentImageIndex = userImage ? userImage.image_index : 0;
    const image = this.imageFiles[currentImageIndex];
    console.log("üîÑ –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:", currentImageIndex);
    console.log("üñºÔ∏è –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞:", image);
    currentImageIndex = (currentImageIndex + 1) % this.imageFiles.length;
    saveUserImageIndex(chatId, currentImageIndex);
    return image;
  }

  // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
  addUser(chatId: number) {
    this.users.add(chatId);
    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)
    addUser(chatId, "");
    console.log("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω:", chatId);
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–ª—ë—Ç–∞/–∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –≤ —Å–æ–±—ã—Ç–∏—è—Ö
  private hasFlightEvent(events: any[]): boolean {
    return events.some((e) =>
      /–ø–µ—Ä–µ–ª[–µ—ë]—Ç|–∞—ç—Ä–æ–ø–æ—Ä—Ç|flight|airport/i.test(e.summary || "")
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
  private buildScheduledMessageFromHF(json: any): string {
    let n = 1;
    const parts: string[] = [];
    // –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–µ–∫—Å—Ç
    parts.push(`<i>${escapeHTML(json.encouragement.text)}</i>`);

    // 1. –í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π (—Ä–∞–Ω–¥–æ–º–Ω–æ)
    const showNegative = Math.random() < 0.5;
    if (showNegative) {
      let block = `${n++}. <b>–í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π</b>`;
      if (json.negative_part?.additional_text) {
        block += `\n<blockquote>${escapeHTML(
          json.negative_part.additional_text
        )}</blockquote>`;
      }
      parts.push(block);
    }

    // 2. –ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏ (–±–µ–∑ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –ø—É–Ω–∫—Ç–æ–º)
    let plushki = `${n++}. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b>`;
    if (json.positive_part?.additional_text) {
      plushki += `\n<blockquote>${escapeHTML(
        json.positive_part.additional_text
      )}</blockquote>`;
    }
    parts.push(plushki);

    // 3. –ß—É–≤—Å—Ç–≤–∞ –∏ —ç–º–æ—Ü–∏–∏
    let feels = `${n++}. –ö–∞–∫–∏–µ <b>—á—É–≤—Å—Ç–≤–∞</b> –∏ <b>—ç–º–æ—Ü–∏–∏</b> —Å–µ–≥–æ–¥–Ω—è –∏—Å–ø—ã—Ç—ã–≤–∞–ª?`;
    if (json.feels_and_emotions?.additional_text) {
      feels += `\n<blockquote>${escapeHTML(
        json.feels_and_emotions.additional_text
      )}</blockquote>`;
    }
    parts.push(feels);

    // 4. –†–µ–π—Ç–∏–Ω–≥ –¥–Ω—è
    parts.push(`${n++}. <b>–†–µ–π—Ç–∏–Ω–≥ –¥–Ω—è</b>: –æ—Ç 1 –¥–æ 10`);

    // 5. –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ç–µ–ª–∞ –∏–ª–∏ –î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ (—Ä–∞–Ω–¥–æ–º–Ω–æ)
    if (Math.random() < 0.5) {
      parts.push(
        `${n++}. <b>–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ç–µ–ª–∞</b>\n–û—Ç –ò—Ä–∏–Ω—ã üëâüèª clck.ru/3LmcNv üëàüèª –∏–ª–∏ —Å–≤–æ–µ`
      );
    } else {
      parts.push(`${n++}. <b>–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</b>`);
    }

    return parts.filter(Boolean).join("\n\n").trim();
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  public async generateScheduledMessage(chatId: number): Promise<string> {
    const userExists = await this.checkUserExists(chatId);
    if (!userExists) {
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –î–æ–±–∞–≤–ª—è—é...`);
      addUser(chatId, "");
    }

    // Get events for the evening
    const now = new Date();
    const evening = new Date(now);
    evening.setHours(18, 0, 0, 0);
    const tomorrow = new Date(now);
    tomorrow.setDate(now.getDate() + 1);

    let events: any[] = [];
    let eventsStr = "";
    try {
      events = await this.calendarService.getEvents(
        evening.toISOString(),
        tomorrow.toISOString()
      );
      if (events && events.length > 0) {
        eventsStr =
          "\nüóìÔ∏è –°–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:\n" +
          formatCalendarEvents(events, {
            locale: "ru-RU",
            showDate: true,
            showBusy: true,
            showLocation: true,
            showDescription: true,
            showLink: true,
          });
        console.log("üóìÔ∏è –°–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:", eventsStr);
      }
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è:", err);
      events = [];
      eventsStr = "";
      clearUserTokens(chatId); // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    const dateTimeStr = now.toLocaleDateString("ru-RU", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
    let previousMessagesBlock = "";

    const lastMsgs = getLastNBotMessages(chatId, 3);
    if (lastMsgs && lastMsgs.length > 0) {
      // –°–æ–æ–±—â–µ–Ω–∏—è –∏–¥—É—Ç –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º, –Ω–∞–¥–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
      const ordered = lastMsgs.slice().reverse();
      previousMessagesBlock =
        "\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:" +
        ordered.map((m, i) => `\n${i + 1}. ${m.message_text}`).join("");
      console.log(
        "üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:",
        previousMessagesBlock
      );
    } else {
      console.log(
        "üîÑ –ù–µ –ø—Ä–∏–ª–æ–∂–∏–ª–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        chatId,
        lastMsgs
      );
    }

    let promptBase = readFileSync(
      "assets/prompts/scheduled-message.md",
      "utf-8"
    );
    let prompt =
      promptBase +
      `\n\n–°–µ–≥–æ–¥–Ω—è: ${dateTimeStr}.` +
      eventsStr +
      previousMessagesBlock;
    if (this.hasFlightEvent(events || [])) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–ª—ë—Ç ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ HF, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 555 —Å–∏–º–≤–æ–ª–∞–º–∏
      prompt += "\n–°–µ–≥–æ–¥–Ω—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–ª—ë—Ç –∏–ª–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç.";
      let text = await generateMessage(prompt);
      if (text.length > 555) text = text.slice(0, 552) + "...";
      // --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ encouragement + flight ---
      let jsonText = text.replace(/```json|```/gi, "").trim();
      if (jsonText.startsWith('"') && jsonText.endsWith('"')) {
        jsonText = jsonText.slice(1, -1);
      }
      jsonText = jsonText.replace(/\\"/g, '"').replace(/\"/g, '"');
      let json: any;
      try {
        json = JSON.parse(jsonText);
        if (typeof json === "string") {
          json = JSON.parse(json); // –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—Å, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞
        }
        if (
          json &&
          typeof json === "object" &&
          json.encouragement &&
          json.flight &&
          json.flight.additional_task
        ) {
          // –¢–æ–ª—å–∫–æ encouragement –∏ flight
          const encouragement = `<i>${escapeHTML(json.encouragement.text)}</i>`;
          const flight = escapeHTML(json.flight.additional_task);
          const message = `${encouragement}\n\n${flight}`;
          saveMessage(chatId, message, new Date().toISOString());
          return message;
        }
      } catch {}
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ encouragement, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
      try {
        json = JSON.parse(jsonText);
        if (json && json.encouragement && json.encouragement.text) {
          const encouragement = `<i>${escapeHTML(json.encouragement.text)}</i>`;
          saveMessage(chatId, encouragement, new Date().toISOString());
          return encouragement;
        }
      } catch {}
      // Fallback –¥–ª—è –ø–µ—Ä–µ–ª—ë—Ç–∞
      const fallbackFlight =
        "–ö–∞–∂–µ—Ç—Å—è —á–∞—Ç–∏–∫ –Ω–µ —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å - –Ω–µ–≥–æ–¥—è–π!\n–ö–∞–π—Ñ–æ–≤–æ–≥–æ –ø–æ–ª–µ—Ç–∞ :) –î–∞–≤–∞–π –ø–æ–∫–∞ —Ç—ã –±—É–¥–µ—à—å –ª–µ—Ç–µ—Ç—å —Ç—ã –ø–æ–¥—É–º–∞–µ—à—å –æ –ø—Ä–∏—è—Ç–Ω–æ–º, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –≤—Å–µ, —á—Ç–æ —Ç–µ–±—è —Ä–∞–¥—É–µ—Ç, –ø—Ä–∏–Ω–æ—Å–∏—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ... –º–æ–∂–Ω–æ –Ω–∞—Ñ–∞–Ω—Ç–∞–∑–∏—Ä–æ–≤–∞—Ç—å) –ì–ª–∞–≤–Ω–æ–µ –ø–æ—Å—Ç—Ä–∞–π—Å—è –ø—Ä–∏ —ç—Ç–æ–º –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ ‚ô•";
      saveMessage(chatId, fallbackFlight, new Date().toISOString());
      return fallbackFlight;
    } else {
      // –û–±—ã—á–Ω—ã–π –¥–µ–Ω—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ø—É–Ω–∫—Ç–∞–º–∏
      let jsonText = await generateMessage(prompt);
      if (jsonText === "HF_JSON_ERROR") {
        const fallback = readFileSync("assets/fallback_text", "utf-8");
        return fallback;
      }
      // –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º markdown-–±–ª–æ–∫–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      jsonText = jsonText.replace(/```json|```/gi, "").trim();
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–∞–≤—ã—á–∫–∞–º–∏, —É–±–∏—Ä–∞–µ–º –∏—Ö
      if (jsonText.startsWith('"') && jsonText.endsWith('"')) {
        jsonText = jsonText.slice(1, -1);
      }
      // –ó–∞–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
      jsonText = jsonText.replace(/\\"/g, '"').replace(/\"/g, '"');
      let json: any;
      try {
        json = JSON.parse(jsonText);
        if (typeof json === "string") {
          json = JSON.parse(json); // –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—Å, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞—è
        if (
          !json ||
          typeof json !== "object" ||
          !json.encouragement ||
          !json.negative_part ||
          !json.positive_part ||
          !("feels_and_emotions" in json)
        ) {
          throw new Error("Invalid structure");
        }
      } catch {
        // fallback –≤—Å–µ–≥–¥–∞
        const fallback = readFileSync("assets/fallback_text", "utf-8");
        return fallback;
      }
      let message = this.buildScheduledMessageFromHF(json);

      return message;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
  async sendDailyMessage(chatId: number) {
    try {
      console.log("üì§ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª");
      console.log(" ID –∫–∞–Ω–∞–ª–∞:", this.CHANNEL_ID);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–ø–∏—à–µ—Ç" (—Ä–µ–∞–∫—Ü–∏—è)
      await this.bot.telegram.sendChatAction(this.CHANNEL_ID, "upload_photo");
      const message = await this.generateScheduledMessage(chatId);
      console.log("üì§ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", message);
      const imagePath = this.getNextImage(chatId);
      console.log("üì§ –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ:", imagePath);
      const caption =
        message.length > 1024 ? message.slice(0, 1020) + "..." : message;
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
      await this.bot.telegram.sendPhoto(
        this.CHANNEL_ID,
        { source: imagePath },
        {
          caption,
          parse_mode: "HTML",
        }
      );
      // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      if (message.length > 1024) {
        await this.bot.telegram.sendMessage(this.CHANNEL_ID, message, {
          parse_mode: "HTML",
        });
      }
      console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª");
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const sentTime = new Date().toISOString();
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–ª—è chatId=${chatId}...`);
      saveMessage(chatId, message, sentTime);
      console.log("üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!");
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1.5 —á–∞—Å–∞
      this.setReminder(chatId, sentTime);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      console.error("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", JSON.stringify(error, null, 2));
    }
  }

  // –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  async sendDailyMessagesToAll(adminChatId: number) {
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞—é –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${this.users.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    
    let successCount = 0;
    let errorCount = 0;
    const errors: string[] = [];

    if (!this.users || this.users.size === 0) {
      await this.bot.telegram.sendMessage(
        adminChatId,
        "‚ùóÔ∏è–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–±–µ."
      );
      await this.sendDailyMessage(adminChatId);
      console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–¥–Ω–æ–º—É —Å yield –¥–ª—è event loop
    for (const chatId of this.users) {
      try {
        await this.sendDailyMessage(chatId);
        successCount++;
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId} (${successCount}/${this.users.size})`);
        
        // –î–∞–µ–º event loop –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏
        // –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ cron job
        await new Promise(resolve => setImmediate(resolve));
        
      } catch (error) {
        errorCount++;
        const errorMsg = `–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}: ${error}`;
        errors.push(errorMsg);
        console.error(`‚ùå ${errorMsg}`);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
    const reportMessage = `üìä –û—Ç—á–µ—Ç –æ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ:
‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}
‚ùå –û—à–∏–±–æ–∫: ${errorCount}
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.users.size}

${errorCount > 0 ? `\nüö® –û—à–∏–±–∫–∏:\n${errors.slice(0, 5).join('\n')}${errors.length > 5 ? '\n...' : ''}` : ''}`;

    try {
      await this.bot.telegram.sendMessage(adminChatId, reportMessage);
    } catch (adminError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É:', adminError);
    }

    console.log(`üìä –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
  private async checkUserExists(chatId: number): Promise<boolean> {
    const { db } = await import("./db");
    const row = db.query("SELECT 1 FROM users WHERE chat_id = ?").get(chatId);
    return !!row;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  async setReminder(chatId: number, sentBotMsgTime: string) {
    const timeout = setTimeout(async () => {
      const stats = getUserResponseStats(chatId);
      if (
        !stats ||
        !stats.last_response_time ||
        new Date(stats.last_response_time) < new Date(sentBotMsgTime)
      ) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥ –∏ –¥–µ–Ω—å –≤–ø–µ—Ä—ë–¥
        const now = new Date();
        const weekAgo = new Date(now);
        weekAgo.setDate(now.getDate() - 7);
        const tomorrow = new Date(now);
        tomorrow.setDate(now.getDate() + 1);
        const events = await this.calendarService.getEvents(
          weekAgo.toISOString(),
          tomorrow.toISOString()
        );
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞—Ä—è–∂–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)
        const importantEvents = (events || []).filter((event: any) => {
          const summary = (event.summary || "").toLowerCase();
          // –ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ —Å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
          const neutralWords = [
            "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            "–¥–µ–ª–æ",
            "–≤—Å—Ç—Ä–µ—á–∞",
            "meeting",
            "call",
            "appointment",
          ];
          if (!summary) return false;
          return !neutralWords.some((word) => summary.includes(word));
        });
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        let prompt =
          "–°–æ—Å—Ç–∞–≤—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è –µ–≥–æ –Ω–µ–¥–∞–≤–Ω–∏–µ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n";
        if (importantEvents.length > 0) {
          prompt += "–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:\n";
          prompt += importantEvents
            .map((event: any) => {
              const start = event.start.dateTime || event.start.date;
              const time = event.start.dateTime
                ? new Date(event.start.dateTime).toLocaleString()
                : "–í–µ—Å—å –¥–µ–Ω—å";
              return `‚Ä¢ ${event.summary} (${time})`;
            })
            .join("\n");
        } else {
          prompt += "–ù–µ—Ç —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.";
        }
        prompt +=
          "\n–ü–æ–∂–µ–ª–∞–π —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ –º—è–≥–∫–æ –Ω–∞–ø–æ–º–Ω–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.";
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        const reminderText = await generateMessage(prompt);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ chatId
        await this.bot.telegram.sendMessage(chatId, reminderText);
      }
    }, 1.5 * 60 * 60 * 1000); // 1.5 —á–∞—Å–∞

    this.reminderTimeouts.set(chatId, timeout);
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
  clearReminder(chatId: number) {
    const timeout = this.reminderTimeouts.get(chatId);
    if (timeout) {
      clearTimeout(timeout);
      this.reminderTimeouts.delete(chatId);
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
  scheduleOneTimeMessage(chatId: number, targetTime: Date) {
    const now = new Date();
    const delay = targetTime.getTime() - now.getTime();

    if (delay > 0) {
      setTimeout(() => {
        this.sendDailyMessage(chatId);
      }, delay);
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  private initializeDailySchedule() {
    console.log(
      "üïê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é cron..."
    );
    this.startDailyCronJob();
  }

  // –ó–∞–ø—É—Å–∫ cron job –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ 19:30
  private startDailyCronJob() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π job, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (this.dailyCronJob) {
      console.log("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π cron job...");
      this.dailyCronJob.stop();
      this.dailyCronJob.destroy();
      this.dailyCronJob = null;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const now = new Date();
    const moscowTime = new Date().toLocaleString('ru-RU', { 
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit', 
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    console.log(`üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ: ${moscowTime}`);
    console.log(`üïê –°–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è: ${now.toISOString()}`);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π cron job: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:30
    // –§–æ—Ä–º–∞—Ç: "–º–∏–Ω—É—Ç—ã —á–∞—Å—ã * * *" (30 19 * * * = 19:30 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
    this.dailyCronJob = cron.schedule(
      "30 19 * * *",
      async () => {
        const startTime = new Date();
        const startTimeMoscow = startTime.toLocaleString('ru-RU', { 
          timeZone: 'Europe/Moscow',
          year: 'numeric',
          month: '2-digit', 
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit'
        });
        
        console.log("=".repeat(60));
        console.log(`üöÄ [CRON] –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –†–ê–°–°–´–õ–ö–ò`);
        console.log(`üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (–ú–°–ö): ${startTimeMoscow}`);
        console.log(`üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (UTC): ${startTime.toISOString()}`);
        console.log(`üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.users.size}`);
        console.log(`üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${Array.from(this.users).join(', ')}`);
        console.log("=".repeat(60));
        
        try {
          const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
          console.log(`üîç ADMIN_CHAT_ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${adminChatId}`);
          
          if (!adminChatId) {
            throw new Error('ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
          }
          
          console.log(`üì§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${this.users.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
          await this.sendDailyMessagesToAll(adminChatId);
          
          const endTime = new Date();
          const duration = endTime.getTime() - startTime.getTime();
          console.log(`‚úÖ [CRON] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration}ms`);
          
        } catch (error) {
          const endTime = new Date();
          const duration = endTime.getTime() - startTime.getTime();
          console.error("=".repeat(60));
          console.error(`‚ùå [CRON] –û–®–ò–ë–ö–ê –í –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –†–ê–°–°–´–õ–ö–ï`);
          console.error(`‚ùå –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
          console.error(`‚ùå –û—à–∏–±–∫–∞:`, error);
          console.error(`‚ùå Stack trace:`, error instanceof Error ? error.stack : '–ù–µ—Ç stack trace');
          console.error("=".repeat(60));
          
          // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ
          try {
            const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
            if (adminChatId) {
              await this.bot.telegram.sendMessage(
                adminChatId,
                `üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ!\n\n` +
                `‚è∞ –í—Ä–µ–º—è: ${startTimeMoscow}\n` +
                `‚ùå –û—à–∏–±–∫–∞: ${error}\n` +
                `‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}ms\n\n` +
                `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.`
              );
            }
          } catch (notifyError) {
            console.error('‚ùå [CRON] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞:', notifyError);
          }
        }
      },
      {
        timezone: "Europe/Moscow", // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        scheduled: true, // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞
      }
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ cron job –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
    if (this.dailyCronJob) {
      console.log("‚úÖ Cron job –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ 19:30 (–ú–°–ö) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω");
      console.log(`üìÖ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –±—É–¥–µ—Ç –≤ 19:30 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏`);
      console.log(`üîß Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: "30 19 * * *"`);
      console.log(`üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Europe/Moscow`);
    } else {
      console.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Cron job –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω!");
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  public getSchedulerStatus() {
    const isRunning = this.dailyCronJob ? true : false;
    const usersCount = this.users.size;
    const usersList = Array.from(this.users);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
    const now = new Date();
    const moscowTime = now.toLocaleString('ru-RU', { 
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit', 
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    
    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    const nextRun = new Date();
    nextRun.setHours(19, 30, 0, 0);
    if (nextRun <= now) {
      nextRun.setDate(nextRun.getDate() + 1);
    }
    
    const nextRunMoscow = nextRun.toLocaleString('ru-RU', { 
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit', 
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });

    return {
      isRunning,
      usersCount,
      usersList,
      cronExpression: "30 19 * * *",
      timezone: "Europe/Moscow",
      description: "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 19:30 –ú–°–ö",
      currentTime: moscowTime,
      nextRunTime: nextRunMoscow,
      adminChatId: Number(process.env.ADMIN_CHAT_ID || 0),
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
  destroy() {
    console.log("üîÑ –û—á–∏—Å—Ç–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...");

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cron job
    if (this.dailyCronJob) {
      this.dailyCronJob.stop();
      this.dailyCronJob = null;
      console.log("‚è∞ Cron job –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for (const [chatId, timeout] of this.reminderTimeouts.entries()) {
      clearTimeout(timeout);
    }
    this.reminderTimeouts.clear();

    console.log("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—á–∏—â–µ–Ω");
  }
}
