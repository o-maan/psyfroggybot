import fs, { readFileSync } from 'fs';
import * as cron from 'node-cron';
import path from 'path';
import { Telegraf } from 'telegraf';
import { CalendarService, formatCalendarEvents, getUserTodayEvents } from './calendar';
import {
  addUser,
  clearUserTokens,
  getAllUsers,
  getLastBotMessage,
  getLastNBotMessages,
  getLastUserMessage,
  getUserImageIndex,
  getUserResponseStats,
  saveMessage,
  saveUserImageIndex,
} from './db';
import { generateFrogImage, generateFrogPrompt, generateMessage } from './llm';
import { botLogger, calendarLogger, databaseLogger, logger, schedulerLogger } from './logger';

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è HTML (Telegram)
function escapeHTML(text: string): string {
  return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ <think>...</think> –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM
function removeThinkTags(text: string): string {
  // –ò—â–µ–º –æ—Ç –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è </think>
  const lastThinkClose = text.lastIndexOf('</think>');
  if (lastThinkClose !== -1) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ <think> –≤ –Ω–∞—á–∞–ª–µ
    if (text.trim().startsWith('<think>')) {
      // –£–¥–∞–ª—è–µ–º –≤—Å—ë –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ </think>
      return text.substring(lastThinkClose + 8).trim();
    }
  }
  return text;
}

export class Scheduler {
  private bot: Telegraf;
  private reminderTimeouts: Map<number, NodeJS.Timeout> = new Map();
  private users: Set<number> = new Set();
  private imageFiles: string[] = [];
  public readonly CHANNEL_ID = -1002405993986;
  // private readonly REMINDER_USER_ID = 5153477378; // –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–µ–ø–µ—Ä—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º chatId
  private calendarService: CalendarService;
  private dailyCronJob: cron.ScheduledTask | null = null;

  constructor(bot: Telegraf, calendarService: CalendarService) {
    this.bot = bot;
    this.calendarService = calendarService;
    this.loadImages();
    this.loadUsers();
    this.initializeDailySchedule();
  }

  // –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  getCalendarService(): CalendarService {
    return this.calendarService;
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
  private loadImages() {
    const imagesDir = path.join(process.cwd(), 'images');
    const files = fs.readdirSync(imagesDir);
    this.imageFiles = files
      .filter(
        file =>
          file.toLowerCase().endsWith('.jpg') ||
          file.toLowerCase().endsWith('.jpeg') ||
          file.toLowerCase().endsWith('.png')
      )
      .map(file => path.join(imagesDir, file));

    logger.info({ imageCount: this.imageFiles.length }, `üñºÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.imageFiles.length} –∫–∞—Ä—Ç–∏–Ω–æ–∫`);
  }

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  private loadUsers() {
    try {
      const users = getAllUsers();
      this.users.clear();
      for (const user of users) {
        this.users.add(user.chat_id);
      }
      logger.info({ usersCount: this.users.size }, `üöÄ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.users.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã`);
    } catch (e) {
      const error = e as Error;
      schedulerLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –∫—Ä—É–≥—É
  public getNextImage(chatId: number): string {
    const userImage = getUserImageIndex(chatId);
    let currentImageIndex = userImage ? userImage.image_index : 0;
    const image = this.imageFiles[currentImageIndex];
    // –£–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
    currentImageIndex = (currentImageIndex + 1) % this.imageFiles.length;
    saveUserImageIndex(chatId, currentImageIndex);
    return image;
  }

  // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
  addUser(chatId: number) {
    this.users.add(chatId);
    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)
    addUser(chatId, '');
    schedulerLogger.debug({ chatId }, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫');
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ LLM –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  private async detectUserBusy(events: any[]): Promise<{ probably_busy: boolean; busy_reason: string | null }> {
    try {
      const detectPrompt = readFileSync('assets/prompts/detect-busy.md', 'utf-8');

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
      let eventsDescription = '';
      if (events.length > 0) {
        eventsDescription = '–°–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Å–µ–≥–æ–¥–Ω—è:\n';
        events.forEach((event, index) => {
          eventsDescription += `${index + 1}. ${event.summary || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;

          // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
          if (event.start) {
            const startDate = new Date(event.start.dateTime || event.start.date);
            const endDate = event.end ? new Date(event.end.dateTime || event.end.date) : null;

            if (event.start.date && !event.start.dateTime) {
              eventsDescription += `   - –í–µ—Å—å –¥–µ–Ω—å\n`;
            } else {
              eventsDescription += `   - –í—Ä–µ–º—è: ${startDate.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit',
              })}`;
              if (endDate) {
                eventsDescription += ` - ${endDate.toLocaleTimeString('ru-RU', {
                  hour: '2-digit',
                  minute: '2-digit',
                })}`;
              }
              eventsDescription += '\n';
            }
          }

          // –°—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
          if (event.transparency) {
            eventsDescription += `   - –°—Ç–∞—Ç—É—Å: ${event.transparency === 'transparent' ? '–°–≤–æ–±–æ–¥–µ–Ω' : '–ó–∞–Ω—è—Ç'}\n`;
          }

          // –ú–µ—Å—Ç–æ
          if (event.location) {
            eventsDescription += `   - –ú–µ—Å—Ç–æ: ${event.location}\n`;
          }

          eventsDescription += '\n';
        });
      } else {
        eventsDescription = '–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ';
      }

      const fullPrompt = detectPrompt + '\n\n' + eventsDescription;

      let response = await generateMessage(fullPrompt);

      if (response === 'HF_JSON_ERROR') {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –∑–∞–Ω—è—Ç
        return { probably_busy: false, busy_reason: null };
      }

      // –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ <think>...</think> –∏–∑ –æ—Ç–≤–µ—Ç–∞
      response = removeThinkTags(response);

      try {
        const result = JSON.parse(response.replace(/```json|```/gi, '').trim());
        return {
          probably_busy: result.probably_busy || false,
          busy_reason: result.busy_reason || null,
        };
      } catch {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–µ –∑–∞–Ω—è—Ç
        return { probably_busy: false, busy_reason: null };
      }
    } catch (error) {
      schedulerLogger.error({ error }, '–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return { probably_busy: false, busy_reason: null };
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
  private buildScheduledMessageFromHF(json: any): string {
    let n = 1;
    const parts: string[] = [];
    // –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–µ–∫—Å—Ç
    parts.push(`<i>${escapeHTML(json.encouragement.text)}</i>`);

    // 1. –í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π (—Ä–∞–Ω–¥–æ–º–Ω–æ)
    const showNegative = Math.random() < 0.5;
    if (showNegative) {
      let block = `${n++}. <b>–í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π</b>`;
      if (json.negative_part?.additional_text) {
        block += `\n<blockquote>${escapeHTML(json.negative_part.additional_text)}</blockquote>`;
      }
      parts.push(block);
    }

    // 2. –ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏ (–±–µ–∑ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –ø—É–Ω–∫—Ç–æ–º)
    let plushki = `${n++}. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b>`;
    if (json.positive_part?.additional_text) {
      plushki += `\n<blockquote>${escapeHTML(json.positive_part.additional_text)}</blockquote>`;
    }
    parts.push(plushki);

    // 3. –ß—É–≤—Å—Ç–≤–∞ –∏ —ç–º–æ—Ü–∏–∏
    let feels = `${n++}. –ö–∞–∫–∏–µ <b>—á—É–≤—Å—Ç–≤–∞</b> –∏ <b>—ç–º–æ—Ü–∏–∏</b> —Å–µ–≥–æ–¥–Ω—è –∏—Å–ø—ã—Ç—ã–≤–∞–ª?`;
    if (json.feels_and_emotions?.additional_text) {
      feels += `\n<blockquote>${escapeHTML(json.feels_and_emotions.additional_text)}</blockquote>`;
    }
    parts.push(feels);

    // 4. –†–µ–π—Ç–∏–Ω–≥ –¥–Ω—è
    parts.push(`${n++}. <b>–†–µ–π—Ç–∏–Ω–≥ –¥–Ω—è</b>: –æ—Ç 1 –¥–æ 10`);

    // 5. –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ç–µ–ª–∞ –∏–ª–∏ –î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ (—Ä–∞–Ω–¥–æ–º–Ω–æ)
    if (Math.random() < 0.5) {
      parts.push(`${n++}. <b>–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ç–µ–ª–∞</b>\n–û—Ç –ò—Ä–∏–Ω—ã üëâüèª clck.ru/3LmcNv üëàüèª –∏–ª–∏ —Å–≤–æ–µ`);
    } else {
      parts.push(`${n++}. <b>–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</b>`);
    }

    return parts.filter(Boolean).join('\n\n').trim();
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  public async generateScheduledMessage(chatId: number): Promise<string> {
    const userExists = await this.checkUserExists(chatId);
    if (!userExists) {
      databaseLogger.info({ chatId }, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º');
      addUser(chatId, '');
    }

    // Get events for the evening
    const now = new Date();
    const evening = new Date(now);
    evening.setHours(18, 0, 0, 0);
    const tomorrow = new Date(now);
    tomorrow.setDate(now.getDate() + 1);

    let events: any[] = [];
    let eventsStr = '';
    try {
      events = await this.calendarService.getEvents(evening.toISOString(), tomorrow.toISOString());
      if (events && events.length > 0) {
        eventsStr =
          '\nüóìÔ∏è –°–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:\n' +
          formatCalendarEvents(events, {
            locale: 'ru-RU',
            showDate: true,
            showBusy: true,
            showLocation: true,
            showDescription: true,
            showLink: true,
          });
        // –£–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      }
    } catch (e) {
      const error = e as Error;
      calendarLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
      events = [];
      eventsStr = '';
      clearUserTokens(chatId); // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    const dateTimeStr = now.toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
    let previousMessagesBlock = '';

    const lastMsgs = getLastNBotMessages(chatId, 3);
    if (lastMsgs && lastMsgs.length > 0) {
      // –°–æ–æ–±—â–µ–Ω–∏—è –∏–¥—É—Ç –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º, –Ω–∞–¥–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
      const ordered = lastMsgs.slice().reverse();
      previousMessagesBlock =
        '\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:' + ordered.map((m, i) => `\n${i + 1}. ${m.message_text}`).join('');
      // –£–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    } else {
      // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    const busyStatus = await this.detectUserBusy(events || []);
    const promptPath = busyStatus.probably_busy
      ? 'assets/prompts/scheduled-message-flight.md'
      : 'assets/prompts/scheduled-message.md';

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    schedulerLogger.info(
      {
        chatId,
        probably_busy: busyStatus.probably_busy,
        busy_reason: busyStatus.busy_reason,
        promptPath,
        eventsCount: events?.length || 0,
      },
      `üîç –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞: ${busyStatus.probably_busy ? 'BUSY' : 'NORMAL'}`
    );

    let promptBase = readFileSync(promptPath, 'utf-8');

    let prompt = promptBase + `\n\n–°–µ–≥–æ–¥–Ω—è: ${dateTimeStr}.` + eventsStr + previousMessagesBlock;
    if (busyStatus.probably_busy) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω—è—Ç ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ HF, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 555 —Å–∏–º–≤–æ–ª–∞–º–∏
      schedulerLogger.info(
        { chatId, busy_reason: busyStatus.busy_reason },
        '‚úàÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω—è—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç'
      );
      let text = await generateMessage(prompt);
      schedulerLogger.info({ chatId, textLength: text?.length || 0 }, `üìù LLM –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: ${text}`);

      // –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ <think>...</think>
      text = removeThinkTags(text);

      if (text.length > 555) text = text.slice(0, 552) + '...';
      // --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –ø—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å JSON –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ encouragement + flight ---
      let jsonText = text.replace(/```json|```/gi, '').trim();
      if (jsonText.startsWith('"') && jsonText.endsWith('"')) {
        jsonText = jsonText.slice(1, -1);
      }
      jsonText = jsonText.replace(/\\"/g, '"').replace(/\"/g, '"');
      let json: any;
      try {
        json = JSON.parse(jsonText);
        if (typeof json === 'string') {
          json = JSON.parse(json); // –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—Å, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞
        }
        if (json && typeof json === 'object' && json.encouragement && json.flight && json.flight.additional_task) {
          // –¢–æ–ª—å–∫–æ encouragement –∏ flight
          const encouragement = `<i>${escapeHTML(json.encouragement.text)}</i>`;
          const flight = escapeHTML(json.flight.additional_task);
          const message = `${encouragement}\n\n${flight}`;
          saveMessage(chatId, message, new Date().toISOString());
          return message;
        }
      } catch {}
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ encouragement, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
      try {
        json = JSON.parse(jsonText);
        if (json && json.encouragement && json.encouragement.text) {
          const encouragement = `<i>${escapeHTML(json.encouragement.text)}</i>`;
          saveMessage(chatId, encouragement, new Date().toISOString());
          return encouragement;
        }
      } catch {}
      // Fallback –¥–ª—è –∑–∞–Ω—è—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const fallbackBusy =
        '–ö–∞–∂–µ—Ç—Å—è —á–∞—Ç–∏–∫ –Ω–µ —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å - –Ω–µ–≥–æ–¥—è–π!\n\n–ö–∞–π—Ñ–æ–≤–æ–≥–æ –¥–Ω—è :) –î–∞–≤–∞–π –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Å–≤–æ–±–æ–¥–Ω–∞—è –º–∏–Ω—É—Ç–∫–∞ –ø–æ–¥—É–º–∞–µ—à—å –æ –ø—Ä–∏—è—Ç–Ω–æ–º, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –≤—Å–µ, —á—Ç–æ —Ç–µ–±—è —Ä–∞–¥—É–µ—Ç, –ø—Ä–∏–Ω–æ—Å–∏—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ... –º–æ–∂–Ω–æ –Ω–∞—Ñ–∞–Ω—Ç–∞–∑–∏—Ä–æ–≤–∞—Ç—å)\n\n–ì–ª–∞–≤–Ω–æ–µ –ø–æ—Å—Ç—Ä–∞–π—Å—è –ø—Ä–∏ —ç—Ç–æ–º –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ ‚ô•';
      saveMessage(chatId, fallbackBusy, new Date().toISOString());
      return fallbackBusy;
    } else {
      // –û–±—ã—á–Ω—ã–π –¥–µ–Ω—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –ø—É–Ω–∫—Ç–∞–º–∏
      schedulerLogger.info({ chatId }, 'üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–Ω—è—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç');
      let jsonText = await generateMessage(prompt);
      schedulerLogger.info({ chatId, jsonLength: jsonText?.length || 0 }, `üìù LLM –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: ${jsonText}`);

      if (jsonText === 'HF_JSON_ERROR') {
        schedulerLogger.warn({ chatId }, '‚ùå LLM –≤–µ—Ä–Ω—É–ª HF_JSON_ERROR');
        const fallback = readFileSync('assets/fallback_text', 'utf-8');
        return fallback;
      }

      // –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ <think>...</think>
      jsonText = removeThinkTags(jsonText);

      // –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º markdown-–±–ª–æ–∫–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      jsonText = jsonText.replace(/```json|```/gi, '').trim();
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–∞–≤—ã—á–∫–∞–º–∏, —É–±–∏—Ä–∞–µ–º –∏—Ö
      if (jsonText.startsWith('"') && jsonText.endsWith('"')) {
        jsonText = jsonText.slice(1, -1);
      }
      // –ó–∞–º–µ–Ω—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
      jsonText = jsonText.replace(/\\"/g, '"').replace(/\"/g, '"');
      let json: any;
      try {
        json = JSON.parse(jsonText);
        if (typeof json === 'string') {
          json = JSON.parse(json); // –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—Å, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–Ω–∞—è
        if (
          !json ||
          typeof json !== 'object' ||
          !json.encouragement ||
          !json.negative_part ||
          !json.positive_part ||
          !('feels_and_emotions' in json)
        ) {
          throw new Error('Invalid structure');
        }
      } catch {
        // fallback –≤—Å–µ–≥–¥–∞
        schedulerLogger.warn({ chatId }, '‚ùå JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        const fallback = readFileSync('assets/fallback_text', 'utf-8');
        return fallback;
      }
      let message = this.buildScheduledMessageFromHF(json);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
      if (message.length > 1024) {
        schedulerLogger.warn(
          { 
            chatId, 
            messageLength: message.length,
            overflow: message.length - 1024 
          }, 
          `‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram –Ω–∞ ${message.length - 1024} —Å–∏–º–≤–æ–ª–æ–≤!`
        );
      }

      return message;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
  async sendDailyMessage(chatId: number) {
    try {
      schedulerLogger.debug({ chatId }, '–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–ø–∏—à–µ—Ç" (—Ä–µ–∞–∫—Ü–∏—è)
      await this.bot.telegram.sendChatAction(this.CHANNEL_ID, 'upload_photo');
      const message = await this.generateScheduledMessage(chatId);

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const calendarEvents = await getUserTodayEvents(chatId);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—è–≥—É—à–∫–∏
      let imageBuffer: Buffer | null = null;
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const lastUserMessage = getLastUserMessage(chatId);
        const userMessageText = lastUserMessage?.message_text || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ—Ç–≤–µ—á–∞–ª';
        const lastBotMessage = getLastBotMessage(chatId);
        const botMessageText = lastBotMessage?.message_text || '–ë–æ—Ç –µ—â–µ –Ω–µ –æ—Ç–≤–µ—á–∞–ª';

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const imagePrompt = await generateFrogPrompt(userMessageText, calendarEvents || undefined, botMessageText);

        schedulerLogger.info({ chatId, imagePrompt }, `üé® –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: "${imagePrompt}"`);
        imageBuffer = await generateFrogImage(imagePrompt);
      } catch (imageError) {
        const imgErr = imageError as Error;
        schedulerLogger.error(
          {
            error: imgErr.message,
            stack: imgErr.stack,
            chatId,
          },
          '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
        );
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (message.length > 1024) {
        schedulerLogger.error(
          { 
            chatId, 
            messageLength: message.length,
            overflow: message.length - 1024,
            message: message.substring(0, 200) + '...' 
          }, 
          `‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ ${message.length - 1024} —Å–∏–º–≤–æ–ª–æ–≤!`
        );
      }
      
      const caption = message.length > 1024 ? message.slice(0, 1020) + '...' : message;

      if (imageBuffer) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await this.bot.telegram.sendPhoto(
          this.CHANNEL_ID,
          { source: imageBuffer },
          {
            caption,
            parse_mode: 'HTML',
          }
        );
        schedulerLogger.info(
          {
            chatId,
            messageLength: message.length,
            imageSize: imageBuffer.length,
          },
          '–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
        );
      } else {
        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É —Ä–æ—Ç–∞—Ü–∏–∏
        const imagePath = this.getNextImage(chatId);
        await this.bot.telegram.sendPhoto(
          this.CHANNEL_ID,
          { source: imagePath },
          {
            caption,
            parse_mode: 'HTML',
          }
        );
        schedulerLogger.info(
          {
            chatId,
            messageLength: message.length,
            imagePath,
          },
          '–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–∑ —Ä–æ—Ç–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (fallback)'
        );
      }

      // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
      if (message.length > 1024) {
        await this.bot.telegram.sendMessage(this.CHANNEL_ID, message, {
          parse_mode: 'HTML',
        });
      }
      const sentTime = new Date().toISOString();
      saveMessage(chatId, message, sentTime);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1.5 —á–∞—Å–∞
      this.setReminder(chatId, sentTime);
    } catch (e) {
      const error = e as Error;
      schedulerLogger.error({ error: error.message, stack: error.stack, chatId }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }

  // –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  async sendDailyMessagesToAll(adminChatId: number) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–µ–≥–æ–¥–Ω—è
    const lastDailyRun = await this.getLastDailyRunTime();
    const now = new Date();
    const todayStart = new Date(now);
    todayStart.setHours(0, 0, 0, 0);
    
    if (lastDailyRun && lastDailyRun >= todayStart) {
      const lastRunStr = lastDailyRun.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
      schedulerLogger.warn(
        { lastRun: lastRunStr, todayStart: todayStart.toISOString() },
        '‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É'
      );
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –ø–æ–ø—ã—Ç–∫–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      try {
        await this.bot.telegram.sendMessage(
          adminChatId,
          `‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n` +
          `üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞: <code>${lastRunStr}</code>\n` +
          `üö´ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è`,
          { parse_mode: 'HTML' }
        );
      } catch (e) {
        schedulerLogger.error(e as Error, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω—É');
      }
      
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    await this.saveLastDailyRunTime(now);
    
    schedulerLogger.info(
      { usersCount: this.users.size },
      `üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è ${this.users.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`
    );

    let successCount = 0;
    let errorCount = 0;
    const errors: string[] = [];

    if (!this.users || this.users.size === 0) {
      await this.bot.telegram.sendMessage(adminChatId, '‚ùóÔ∏è–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–±–µ.');
      await this.sendDailyMessage(adminChatId);
      schedulerLogger.warn('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É');
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–¥–Ω–æ–º—É —Å yield –¥–ª—è event loop
    for (const chatId of this.users) {
      try {
        await this.sendDailyMessage(chatId);
        successCount++;
        schedulerLogger.info('messageGenerated', chatId, 0, 0); // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É

        // –î–∞–µ–º event loop –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏
        // –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ cron job
        await new Promise(resolve => setImmediate(resolve));
      } catch (error) {
        errorCount++;
        const errorMsg = `–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}: ${error}`;
        errors.push(errorMsg);
        logger.error(`–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`, error as Error);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É
    const reportMessage = `üìä –û—Ç—á–µ—Ç –æ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ:
‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}
‚ùå –û—à–∏–±–æ–∫: ${errorCount}
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${this.users.size}

${errorCount > 0 ? `\nüö® –û—à–∏–±–∫–∏:\n${errors.slice(0, 5).join('\n')}${errors.length > 5 ? '\n...' : ''}` : ''}`;

    try {
      await this.bot.telegram.sendMessage(adminChatId, reportMessage);
    } catch (adminError) {
      botLogger.error(adminError as Error, '–û—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É');
    }

    schedulerLogger.info('cronComplete', 0, successCount, errorCount);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
  private async checkUserExists(chatId: number): Promise<boolean> {
    const { db } = await import('./db');
    const row = db.query('SELECT 1 FROM users WHERE chat_id = ?').get(chatId);
    return !!row;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  async setReminder(chatId: number, sentBotMsgTime: string) {
    const timeout = setTimeout(async () => {
      const stats = getUserResponseStats(chatId);
      if (!stats || !stats.last_response_time || new Date(stats.last_response_time) < new Date(sentBotMsgTime)) {
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥ –∏ –¥–µ–Ω—å –≤–ø–µ—Ä—ë–¥
        const now = new Date();
        const weekAgo = new Date(now);
        weekAgo.setDate(now.getDate() - 7);
        const tomorrow = new Date(now);
        tomorrow.setDate(now.getDate() + 1);
        const events = await this.calendarService.getEvents(weekAgo.toISOString(), tomorrow.toISOString());
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞—Ä—è–∂–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)
        const importantEvents = (events || []).filter((event: any) => {
          const summary = (event.summary || '').toLowerCase();
          // –ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ —Å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
          const neutralWords = ['–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', '–¥–µ–ª–æ', '–≤—Å—Ç—Ä–µ—á–∞', 'meeting', 'call', 'appointment'];
          if (!summary) return false;
          return !neutralWords.some(word => summary.includes(word));
        });
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        let prompt =
          '–°–æ—Å—Ç–∞–≤—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è –µ–≥–æ –Ω–µ–¥–∞–≤–Ω–∏–µ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n';
        if (importantEvents.length > 0) {
          prompt += '–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:\n';
          prompt += importantEvents
            .map((event: any) => {
              const start = event.start.dateTime || event.start.date;
              const time = event.start.dateTime ? new Date(event.start.dateTime).toLocaleString() : '–í–µ—Å—å –¥–µ–Ω—å';
              return `‚Ä¢ ${event.summary} (${time})`;
            })
            .join('\n');
        } else {
          prompt += '–ù–µ—Ç —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.';
        }
        prompt += '\n–ü–æ–∂–µ–ª–∞–π —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ –º—è–≥–∫–æ –Ω–∞–ø–æ–º–Ω–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.';
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        const reminderText = await generateMessage(prompt);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ chatId
        await this.bot.telegram.sendMessage(chatId, reminderText);
      }
    }, 1.5 * 60 * 60 * 1000); // 1.5 —á–∞—Å–∞

    this.reminderTimeouts.set(chatId, timeout);
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
  clearReminder(chatId: number) {
    const timeout = this.reminderTimeouts.get(chatId);
    if (timeout) {
      clearTimeout(timeout);
      this.reminderTimeouts.delete(chatId);
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
  scheduleOneTimeMessage(chatId: number, targetTime: Date) {
    const now = new Date();
    const delay = targetTime.getTime() - now.getTime();

    if (delay > 0) {
      setTimeout(() => {
        this.sendDailyMessage(chatId);
      }, delay);
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  private initializeDailySchedule() {
    logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    this.startDailyCronJob();
  }

  // –ó–∞–ø—É—Å–∫ cron job –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ 22:00
  private startDailyCronJob() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π job, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (this.dailyCronJob) {
      schedulerLogger.info('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ cron job');
      this.dailyCronJob.stop();
      this.dailyCronJob.destroy();
      this.dailyCronJob = null;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const processId = `${process.pid}_${Date.now()}`;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const now = new Date();
    const moscowTime = new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    });
    schedulerLogger.info({ processId }, 'cronStart'); // –°–æ–∑–¥–∞–Ω–∏–µ cron job

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π cron job: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:00
    // –§–æ—Ä–º–∞—Ç: "–º–∏–Ω—É—Ç—ã —á–∞—Å—ã * * *" (0 22 * * * = 22:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
    this.dailyCronJob = cron.schedule(
      '0 22 * * *',
      async () => {
        const startTime = new Date();
        const startTimeMoscow = startTime.toLocaleString('ru-RU', {
          timeZone: 'Europe/Moscow',
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
        });

        schedulerLogger.info({ processId, usersCount: this.users.size }, 'cronTrigger');

        try {
          const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
          // –£–±–∏—Ä–∞–µ–º, —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤ cronTrigger

          if (!adminChatId) {
            throw new Error('ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
          }

          // –£–±–∏—Ä–∞–µ–º, —É–∂–µ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤ cronTrigger
          await this.sendDailyMessagesToAll(adminChatId);

          const endTime = new Date();
          const duration = endTime.getTime() - startTime.getTime();
          schedulerLogger.info('cronComplete', duration, this.users.size, 0);
        } catch (error) {
          const endTime = new Date();
          const duration = endTime.getTime() - startTime.getTime();
          schedulerLogger.error(error as Error, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞');

          // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ
          try {
            const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
            if (adminChatId) {
              await this.bot.telegram.sendMessage(
                adminChatId,
                `üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ!\n\n` +
                  `‚è∞ –í—Ä–µ–º—è: ${startTimeMoscow}\n` +
                  `‚ùå –û—à–∏–±–∫–∞: ${error}\n` +
                  `‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}ms\n\n` +
                  `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.`
              );
            }
          } catch (notifyError) {
            logger.error('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ–± –æ—à–∏–±–∫–µ cron', notifyError as Error);
          }
        }
      },
      {
        timezone: 'Europe/Moscow', // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
      }
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ cron job –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
    if (this.dailyCronJob) {
      schedulerLogger.info({ processId, expression: '0 22 * * *' }, 'Cron job —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    } else {
      logger.error('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫', new Error('Cron job –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω'));
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  public getSchedulerStatus() {
    const isRunning = this.dailyCronJob ? true : false;
    const usersCount = this.users.size;
    const usersList = Array.from(this.users);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
    const now = new Date();
    const moscowTime = now.toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    });

    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    const nextRun = new Date();
    nextRun.setHours(22, 0, 0, 0);
    if (nextRun <= now) {
      nextRun.setDate(nextRun.getDate() + 1);
    }

    const nextRunMoscow = nextRun.toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });

    return {
      isRunning,
      usersCount,
      usersList,
      cronExpression: '0 22 * * *',
      timezone: 'Europe/Moscow',
      description: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 22:00 –ú–°–ö',
      currentTime: moscowTime,
      nextRunTime: nextRunMoscow,
      adminChatId: Number(process.env.ADMIN_CHAT_ID || 0),
    };
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
  private async getLastDailyRunTime(): Promise<Date | null> {
    try {
      const { db } = await import('./db');
      const row = db.query(`
        SELECT value FROM system_settings WHERE key = 'last_daily_run'
      `).get() as { value: string } | undefined;
      
      if (row && row.value) {
        return new Date(row.value);
      }
      return null;
    } catch (error) {
      schedulerLogger.error(error as Error, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏');
      return null;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
  private async saveLastDailyRunTime(time: Date): Promise<void> {
    try {
      const { db } = await import('./db');
      db.query(`
        INSERT OR REPLACE INTO system_settings (key, value) 
        VALUES ('last_daily_run', ?)
      `).run(time.toISOString());
    } catch (error) {
      schedulerLogger.error(error as Error, '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏');
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
  destroy() {
    logger.info('Stop scheduler...');

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cron job
    if (this.dailyCronJob) {
      this.dailyCronJob.stop();
      this.dailyCronJob = null;
      logger.info('Cron jobs stopped');
    }

    // –û—á–∏—â–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for (const [, timeout] of this.reminderTimeouts.entries()) {
      clearTimeout(timeout);
    }
    this.reminderTimeouts.clear();

    logger.info('Scheduler stopped');
  }
}
