import { generateMessage } from '../llm';
import { botLogger } from '../logger';
import { db } from '../db';
import { cleanLLMText } from './clean-llm-text';

interface DayRatingSupportWords {
  rating1: string; // üò©
  rating2: string; // üòî
  rating3: string; // üòê
  rating4: string; // üòä
  rating5: string; // ü§©
}


// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫ –û–î–ù–ò–ú –∑–∞–ø—Ä–æ—Å–æ–º
export async function generateDayRatingSupportWords(): Promise<DayRatingSupportWords> {
  const defaults = getDefaultSupportWords();

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
    const { readFileSync } = await import('fs');
    const prompt = readFileSync('assets/prompts/day-rating-support-words.md', 'utf-8');

    // –î–µ–ª–∞–µ–º –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –∫ LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    const response = await generateMessage(prompt);

    if (response === 'HF_JSON_ERROR') {
      botLogger.warn('LLM –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –¥–ª—è —Å–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç—ã');
      return defaults;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const { extractJsonFromLLM } = await import('./extract-json-from-llm');
    const jsonText = extractJsonFromLLM(response);

    // –ü–∞—Ä—Å–∏–º JSON
    const parsed = JSON.parse(jsonText);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
    const supportWords: DayRatingSupportWords = { ...defaults };

    for (const key of ['rating1', 'rating2', 'rating3', 'rating4', 'rating5']) {
      if (parsed[key] && typeof parsed[key] === 'string') {
        const cleaned = cleanLLMText(parsed[key]);
        const maxLength = key === 'rating1' || key === 'rating2' ? 100 : 50;

        if (cleaned.length > 0 && cleaned.length <= maxLength) {
          supportWords[key as keyof DayRatingSupportWords] = cleaned;
        } else {
          botLogger.warn({ key, length: cleaned.length, maxLength }, '–°–ª–æ–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –¥–ª–∏–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç');
        }
      }
    }

    return supportWords;
  } catch (error) {
    botLogger.error({ error }, '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç—ã');
    return defaults;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã –¥–ª—è 1-2 —Ñ—Ä–∞–∑
export function getDefaultSupportWords(): DayRatingSupportWords {
  return {
    rating1: '–°–ª–æ–∂–Ω—ã–π –¥–µ–Ω—å –ø–æ–∑–∞–¥–∏. –û–±–Ω–∏–º–∞—é –∫—Ä–µ–ø–∫–æ ü§ó',
    rating2: '–°–µ–≥–æ–¥–Ω—è –±—ã–ª–æ —Ç—è–∂–µ–ª–æ. –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ª—É—á—à–µ üíö', 
    rating3: '–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å. –ò —Ç–∞–∫–∏–µ –¥–Ω–∏ –Ω—É–∂–Ω—ã üåø',
    rating4: '–•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å! –†–∞–¥ –∑–∞ —Ç–µ–±—è üå∏',
    rating5: '–°—É–ø–µ—Ä –¥–µ–Ω—å! –¢—ã —Å–∏—è–µ—à—å ‚ú®'
  };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
export async function getDayRatingSupportWord(channelMessageId: number, rating: number): Promise<string> {
  try {
    const query = db.query(`
      SELECT message_data FROM interactive_posts WHERE channel_message_id = ?
    `);
    const post = query.get(channelMessageId) as any;
    
    if (post?.message_data) {
      const messageData = JSON.parse(post.message_data);
      const supportWords = messageData.day_rating_support;
      
      if (supportWords) {
        const key = `rating${rating}` as keyof DayRatingSupportWords;
        return supportWords[key] || getDefaultSupportWord(rating);
      }
    }
  } catch (error) {
    botLogger.error({ error, channelMessageId, rating }, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
  }
  
  return getDefaultSupportWord(rating);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
function getDefaultSupportWord(rating: number): string {
  const defaults = getDefaultSupportWords();
  const key = `rating${rating}` as keyof DayRatingSupportWords;
  return defaults[key] || '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É üíö';
}