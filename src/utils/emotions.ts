// –°–ø–∏—Å–∫–∏ —ç–º–æ—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
export const NEGATIVE_EMOTIONS = {
  –ì–†–£–°–¢–¨: [
    '–ø–µ—á–∞–ª—å', '—Å–∫—É–∫–∞', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ', '–ª–µ–Ω—å', '—Ç–æ—Å–∫–∞', '–æ—Ç—Ä–µ—à–µ–Ω–Ω–æ—Å—Ç—å', 
    '–∂–∞–ª–æ—Å—Ç—å', '–±–æ–ª—å', '–≥–æ—Ä–µ—á—å', '—Å–∫–æ—Ä–±—å', '–±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å', '—Å–æ–∂–∞–ª–µ–Ω–∏–µ', 
    '–ø–æ—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å', '–æ–∑–∞–¥–∞—á–µ–Ω–Ω–æ—Å—Ç—å', '–Ω–µ–¥–æ—É–º–µ–Ω–∏–µ', '–ø–æ—Ç—Ä—è—Å–µ–Ω–∏–µ', '–æ–ø—É—Å—Ç–æ—à–µ–Ω–∏–µ', 
    '–∑–∞–≥–Ω–∞–Ω–Ω–æ—Å—Ç—å', '–æ—Ç—á—É–∂–¥–µ–Ω–Ω–æ—Å—Ç—å', '–≥—Ä—É—Å—Ç—å', '–≥—Ä—É—Å—Ç–Ω–æ', '–≥—Ä—É—â—É', 
    '–≥—Ä—É—Å—Ç–∏–ª', '–≥—Ä—É—Å—Ç–∏–ª–∞', '–ø–æ–≥—Ä—É—Å—Ç–Ω–µ–ª', '–ø–æ–≥—Ä—É—Å—Ç–Ω–µ–ª–∞'
  ],
  –ì–ù–ï–í: [
    '–∑–ª–æ—Å—Ç—å', '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ', '—è—Ä–æ—Å—Ç—å', '–Ω–µ–Ω–∞–≤–∏—Å—Ç—å', '–Ω–µ–≥–æ–¥–æ–≤–∞–Ω–∏–µ', 
    '–ø—Ä–µ–∑—Ä–µ–Ω–∏–µ', '–æ–±–∏–¥–∞', '—Ä–µ–≤–Ω–æ—Å—Ç—å', '—É—è–∑–≤–ª–µ–Ω–Ω–æ—Å—Ç—å', '–¥–æ—Å–∞–¥–∞', 
    '–∑–∞–≤–∏—Å—Ç—å', '–Ω–µ–ø—Ä–∏—è–∑–Ω—å', '–≤–æ–∑–º—É—â–µ–Ω–∏–µ', '–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ', '–∏—Å—Ç–µ—Ä–∏—è', 
    '–±–µ—à–µ–Ω—Å—Ç–≤–æ', '–Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ', '–±—Ä–µ–∑–≥–ª–∏–≤–æ—Å—Ç—å', '–≥–Ω–µ–≤', '–∑–ª–∏–ª—Å—è', 
    '–∑–ª–∏–ª–∞—Å—å', '–∑–ª–æ–π', '–∑–ª–∞—è', '—Ä–∞–∑–æ–∑–ª–∏–ª—Å—è', '—Ä–∞–∑–æ–∑–ª–∏–ª–∞—Å—å', '—Ä–∞–∑–æ–∑–ª–∏–ª–æ',
    '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω', '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∞', '—Ä–∞–∑–¥—Ä–∞–∂–∞–ª–æ', '–±–µ—Å–∏—Ç', '–±–µ—Å–∏–ª–æ'
  ],
  –°–¢–†–ê–•: [
    '–∏—Å–ø—É–≥', '–±–æ—è–∑–Ω—å', '–æ—Ü–µ–ø–µ–Ω–µ–Ω–∏–µ', '—É–∂–∞—Å', '—Ç—Ä–µ–≤–æ–≥–∞', '–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ', 
    '–æ–ø–∞—Å–µ–Ω–∏–µ', '—É–Ω–∏–∂–µ–Ω–∏–µ', '–∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '—Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å', '–æ—Ç—á–∞—è–Ω–∏–µ', 
    '—Å—Ç—ã–¥', '–≤–∏–Ω–∞', '–Ω–µ—Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '—Å–º—É—â–µ–Ω–∏–µ', '–∑–∞—Å—Ç–µ–Ω—á–∏–≤–æ—Å—Ç—å', 
    '–ø–æ–¥–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å', '–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å', '–ø–∞–Ω–∏–∫–∞', '–æ—à–∞—Ä–∞—à–µ–Ω–Ω–æ—Å—Ç—å', '—Å—Ç—Ä–∞—Ö',
    '—Å—Ç—Ä–∞—à–Ω–æ', '–±–æ—é—Å—å', '–±–æ—è–ª—Å—è', '–±–æ—è–ª–∞—Å—å', '–∏—Å–ø—É–≥–∞–ª—Å—è', '–∏—Å–ø—É–≥–∞–ª–∞—Å—å',
    '—Ç—Ä–µ–≤–æ–∂–Ω–æ', '–±–µ—Å–ø–æ–∫–æ—é—Å—å', '–≤–æ–ª–Ω—É—é—Å—å', '–≤–æ–ª–Ω–æ–≤–∞–ª—Å—è', '–≤–æ–ª–Ω–æ–≤–∞–ª–∞—Å—å',
    '—Å—Ç—ã–¥–Ω–æ', '–≤–∏–Ω–æ–≤–∞—Ç', '–≤–∏–Ω–æ–≤–∞—Ç–∞'
  ]
};

export const POSITIVE_EMOTIONS = {
  –†–ê–î–û–°–¢–¨: [
    '—Å—á–∞—Å—Ç—å–µ', '–≤–æ—Å—Ç–æ—Ä–≥', '–ª–∏–∫–æ–≤–∞–Ω–∏–µ', '—É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ', '—É–≤–ª–µ—á–µ–Ω–∏–µ', 
    '–∏–Ω—Ç–µ—Ä–µ—Å', '–∑–∞–±–æ—Ç–∞', '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ', '–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ', '—Ä–∞–¥–æ—Å—Ç—å', 
    '–ø—Ä–∏–Ω—è—Ç–∏–µ', '–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ', '–ø—Ä–∏–ø–æ–¥–Ω—è—Ç–æ—Å—Ç—å', '–Ω–∞–¥–µ–∂–¥–∞', '–≤–µ—Ä–∞', 
    '–∏–∑—É–º–ª–µ–Ω–∏–µ', '—Ä–∞–¥—É—é—Å—å', '–ø–æ—Ä–∞–¥–æ–≤–∞–ª–æ', '–æ–±—Ä–∞–¥–æ–≤–∞–ª–æ', '—Ä–∞–¥–æ—Å—Ç–Ω–æ',
    '—Å—á–∞—Å—Ç–ª–∏–≤', '—Å—á–∞—Å—Ç–ª–∏–≤–∞', '—Ä–∞–¥', '—Ä–∞–¥–∞', '–¥–æ–≤–æ–ª–µ–Ω', '–¥–æ–≤–æ–ª—å–Ω–∞'
  ],
  –õ–Æ–ë–û–í–¨: [
    '–Ω–µ–∂–Ω–æ—Å—Ç—å', '—Ç–µ–ø–ª–æ—Ç–∞', '–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å', '–±–ª–∞–∂–µ–Ω—Å—Ç–≤–æ', '–¥–æ–≤–µ—Ä–∏–µ', 
    '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', '—Å–∏–º–ø–∞—Ç–∏—è', '–ª—é–±–æ–≤—å –∫ —Å–µ–±–µ', '–≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ', 
    '—É–≤–∞–∂–µ–Ω–∏–µ', '–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ', '–∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å', '–¥—Ä—É–∂–µ–ª—é–±–∏–µ', '–¥–æ–±—Ä–æ—Ç–∞', 
    '—Å–æ—á—É–≤—Å—Ç–≤–∏–µ', '–±–ª–∞–≥–æ—Å—Ç–Ω–æ—Å—Ç—å', '–≥–æ—Ä–¥–æ—Å—Ç—å', '—Å–∞–º–æ—Ü–µ–Ω–Ω–æ—Å—Ç—å', '–≤–ª—é–±–ª–µ–Ω–Ω–æ—Å—Ç—å', 
    '–ª—é–±–æ–≤—å', '–ª—é–±–ª—é', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '–æ–±–æ–∂–∞—é', '–≤–æ—Å—Ö–∏—â–∞—é—Å—å', '–≥–æ—Ä–∂—É—Å—å',
    '–±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω', '–±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞', '—Å–ø–æ–∫–æ–µ–Ω', '—Å–ø–æ–∫–æ–π–Ω–∞'
  ]
};

// –í—Å–µ —ç–º–æ—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
const ALL_EMOTIONS = [
  ...Object.values(NEGATIVE_EMOTIONS).flat(),
  ...Object.values(POSITIVE_EMOTIONS).flat()
];

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
function normalizeText(text: string): string {
  return text.toLowerCase().trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–Ω—è —ç–º–æ—Ü–∏–∏
function getEmotionRoot(emotion: string): string {
  // –°–ª–æ–≤–∞—Ä—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å—Ö–æ–∂–∏—Ö —ç–º–æ—Ü–∏–π
  const roots: { [key: string]: string[] } = {
    '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ': ['—Ä–∞–∑–¥—Ä–∞–∂'],
    '–≥—Ä—É—Å—Ç—å': ['–≥—Ä—É—Å—Ç', '–≥—Ä—É—â'],
    '–∑–ª–æ—Å—Ç—å': ['–∑–ª', '–∑–ª–æ–±'],
    '—Å—Ç—Ä–∞—Ö': ['—Å—Ç—Ä–∞—Ö', '—Å—Ç—Ä–∞—à'],
    '—Ç—Ä–µ–≤–æ–≥–∞': ['—Ç—Ä–µ–≤–æ–≥', '—Ç—Ä–µ–≤–æ–∂'],
    '–≤–∏–Ω–∞': ['–≤–∏–Ω', '–≤–∏–Ω–æ–≤'],
    '—Å—Ç—ã–¥': ['—Å—Ç—ã–¥'],
    '–±–æ–ª—å': ['–±–æ–ª—å', '–±–æ–ª'],
    '—Ä–∞–¥–æ—Å—Ç—å': ['—Ä–∞–¥'],
    '—Å—á–∞—Å—Ç—å–µ': ['—Å—á–∞—Å—Ç'],
    '–ª—é–±–æ–≤—å': ['–ª—é–±', '–ª—é–±–æ–≤'],
    '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ': ['—Å–ø–æ–∫–æ–π', '—Å–ø–æ–∫'],
    '–≥–Ω–µ–≤': ['–≥–Ω–µ–≤'],
    '—è—Ä–æ—Å—Ç—å': ['—è—Ä–æ—Å—Ç'],
    '–Ω–µ–Ω–∞–≤–∏—Å—Ç—å': ['–Ω–µ–Ω–∞–≤–∏–¥', '–Ω–µ–Ω–∞–≤–∏—Å—Ç'],
    '–æ–±–∏–¥–∞': ['–æ–±–∏–¥', '–æ–±–∏–∂'],
    '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ': ['—Ä–∞–∑–æ—á–∞—Ä'],
    '–ø–µ—á–∞–ª—å': ['–ø–µ—á–∞–ª—å'],
    '—Ç–æ—Å–∫–∞': ['—Ç–æ—Å–∫'],
    '–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ': ['–±–µ—Å–ø–æ–∫–æ–π', '–±–µ—Å–ø–æ–∫'],
    '–≤–æ–ª–Ω–µ–Ω–∏–µ': ['–≤–æ–ª–Ω'],
    '–∏—Å–ø—É–≥': ['–∏—Å–ø—É–≥', '–ø—É–≥'],
    '—É–∂–∞—Å': ['—É–∂–∞—Å'],
    '–æ—Ç—á–∞—è–Ω–∏–µ': ['–æ—Ç—á–∞—è'],
    '–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å': ['–±–ª–∞–≥–æ–¥–∞—Ä'],
    '–≤–æ—Å—Ç–æ—Ä–≥': ['–≤–æ—Å—Ç–æ—Ä–≥', '–≤–æ—Å—Ç–æ—Ä–∂'],
    '–≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ': ['–≤–æ—Å—Ö–∏—â', '–≤–æ—Å—Ö–∏—Ç'],
    '–≥–æ—Ä–¥–æ—Å—Ç—å': ['–≥–æ—Ä–¥', '–≥–æ—Ä–∂'],
    '–¥–æ–≤–µ—Ä–∏–µ': ['–¥–æ–≤–µ—Ä'],
    '—É–≤–∞–∂–µ–Ω–∏–µ': ['—É–≤–∞–∂'],
    '—Å–∏–º–ø–∞—Ç–∏—è': ['—Å–∏–º–ø–∞—Ç'],
    '–Ω–µ–∂–Ω–æ—Å—Ç—å': ['–Ω–µ–∂–Ω'],
    '—Ç–µ–ø–ª–æ—Ç–∞': ['—Ç–µ–ø–ª'],
    '—É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ': ['—É–º–∏—Ä–æ—Ç–≤–æ—Ä', '–º–∏—Ä'],
    '–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ': ['–≤–æ–∑–±—É–∂–¥'],
    '–∏–Ω—Ç–µ—Ä–µ—Å': ['–∏–Ω—Ç–µ—Ä–µ—Å'],
    '–Ω–∞–¥–µ–∂–¥–∞': ['–Ω–∞–¥–µ–∂–¥', '–Ω–∞–¥–µ–∂']
  };
  
  // –ò—â–µ–º, –∫ –∫–∞–∫–æ–º—É –∫–æ—Ä–Ω—é –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç–º–æ—Ü–∏—è
  for (const [baseEmotion, rootPatterns] of Object.entries(roots)) {
    for (const pattern of rootPatterns) {
      if (emotion.includes(pattern)) {
        return baseEmotion;
      }
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É —ç–º–æ—Ü–∏—é
  return emotion;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —ç–º–æ—Ü–∏–π –≤ —Ç–µ–∫—Å—Ç–µ
export function countEmotions(text: string, emotionType: 'negative' | 'positive' | 'all' = 'all'): {
  count: number;
  emotions: string[];
  categories: { [key: string]: string[] };
} {
  const normalizedText = normalizeText(text);
  const words = normalizedText.split(/\s+/);
  const foundEmotions: string[] = [];
  const categories: { [key: string]: string[] } = {};
  const foundRoots = new Set<string>(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π —ç–º–æ—Ü–∏–π
  
  let emotionsToCheck: { [key: string]: string[] };
  
  if (emotionType === 'negative') {
    emotionsToCheck = NEGATIVE_EMOTIONS;
  } else if (emotionType === 'positive') {
    emotionsToCheck = POSITIVE_EMOTIONS;
  } else {
    emotionsToCheck = { ...NEGATIVE_EMOTIONS, ...POSITIVE_EMOTIONS };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç–µ
  for (const word of words) {
    for (const [category, emotions] of Object.entries(emotionsToCheck)) {
      for (const emotion of emotions) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –µ—Å–ª–∏ —Å–ª–æ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ—Ü–∏—é –∫–∞–∫ –∫–æ—Ä–µ–Ω—å
        if (word === emotion || (word.includes(emotion) && emotion.length > 3)) {
          const emotionRoot = getEmotionRoot(emotion);
          
          if (!foundRoots.has(emotionRoot)) {
            foundRoots.add(emotionRoot);
            foundEmotions.push(emotion);
            if (!categories[category]) {
              categories[category] = [];
            }
            categories[category].push(emotion);
          }
        }
      }
    }
  }
  
  return {
    count: foundRoots.size, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä Set –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ—Ä–Ω–µ–π
    emotions: foundEmotions,
    categories
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π
export function getPredominantNegativeCategory(text: string): string | null {
  const result = countEmotions(text, 'negative');
  
  if (result.count === 0) return null;
  
  // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç–º–æ—Ü–∏–π
  let maxCount = 0;
  let predominantCategory = null;
  
  for (const [category, emotions] of Object.entries(result.categories)) {
    if (emotions.length > maxCount) {
      maxCount = emotions.length;
      predominantCategory = category;
    }
  }
  
  return predominantCategory;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏ —Å —ç–º–æ—Ü–∏—è–º–∏
export function getEmotionHelpMessage(emotions: string[], emotionType: 'negative' | 'positive'): string {
  const emotionCategories = emotionType === 'negative' ? NEGATIVE_EMOTIONS : POSITIVE_EMOTIONS;
  const foundCategories = new Set<string>();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–ø–æ–º—è–Ω—É—Ç—ã
  for (const emotion of emotions) {
    for (const [category, categoryEmotions] of Object.entries(emotionCategories)) {
      if (categoryEmotions.some(e => emotion.includes(e) || e.includes(emotion))) {
        foundCategories.add(category);
      }
    }
  }
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π
  if (emotionType === 'negative') {
    // –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –æ–ø–∏—Å–∞–ª —ç–º–æ—Ü–∏–∏
    if (emotions.length === 0) {
      return '<i>–í–∞–∂–Ω–æ —É—á–∏—Ç—å—Å—è –Ω–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏ üòíüòçüò´</i>\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥—É–º–∞–π.. —Ç–æ, —á—Ç–æ —Ç—ã –æ–ø–∏—Å–∞–ª –±–æ–ª—å—à–µ –ø—Ä–æ –≥—Ä—É—Å—Ç—å, —Å—Ç—Ä–∞—Ö –∏–ª–∏ –∑–ª–æ—Å—Ç—å (–≥–Ω–µ–≤)? –ò –ø–æ—Å–º–æ—Ç—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–æ–Ω–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ\n–ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ —Ç—ã –æ—â—É—Ç–∏–ª?';
    }
    
    const categoriesArray = Array.from(foundCategories);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏
    const hasGuilt = emotions.some(e => e.includes('–≤–∏–Ω') || e.includes('—Å—Ç—ã–¥'));
    const hasPain = emotions.some(e => e.includes('–±–æ–ª—å'));
    
    if (hasGuilt) {
      return '–°—Ç—ã–¥ –∏ –≤–∏–Ω–∞ —á–∞—Å—Ç–æ –∏–¥—É—Ç —Å –¥—Ä—É–≥–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏, –ø–æ—Å–º–æ—Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫—É "—Å—Ç—Ä–∞—Ö" –∏ "–≥—Ä—É—Å—Ç—å" –≤ —Ç–∞–±–ª–∏—Ü–µ, —á—Ç–æ –º–æ–∂–µ—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç—å?';
    }
    
    if (hasPain) {
      return '–ß—Ç–æ –∑–∞ —Ç–≤–æ–µ–π –±–æ–ª—å—é? –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ –∫–æ–ª–æ–Ω–∫–∏ "–≥—Ä—É—Å—Ç—å" –∏ "–≥–Ω–µ–≤", –∫–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ —Ç—ã –µ—â–µ –º–æ–∂–µ—à—å –Ω–∞–∑–≤–∞—Ç—å?';
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if (categoriesArray.length === 1) {
      const category = categoriesArray[0].toLowerCase();
      switch (category) {
        case '–≥—Ä—É—Å—Ç—å':
          return '–ü–æ—Å–º–æ—Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫—É "–≥—Ä—É—Å—Ç—å" –≤ —Ç–∞–±–ª–∏—Ü–µ —ç–º–æ—Ü–∏–π –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –æ–ø–∏—Å–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–µ–µ';
        case '–≥–Ω–µ–≤':
          return '–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç—å - –ø–æ—Å–º–æ—Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫—É "–≥–Ω–µ–≤" –≤ —Ç–∞–±–ª–∏—Ü–µ, —á—Ç–æ –µ—â–µ –º–æ–∂–µ—à—å –Ω–∞–∑–≤–∞—Ç—å?';
        case '—Å—Ç—Ä–∞—Ö':
          return '–í —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ "—Å—Ç—Ä–∞—Ö" - –ø–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫–∏–µ –µ—â–µ —ç–º–æ—Ü–∏–∏ –º–æ–≥—É—Ç –æ–ø–∏—Å–∞—Ç—å —Ç–≤–æ–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è?';
      }
    } else if (categoriesArray.length >= 2) {
      const categoriesStr = categoriesArray.map(c => `"${c.toLowerCase()}"`).join(' –∏ ');
      return `–¢—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç, –ø–æ–¥—Å–º–æ—Ç—Ä–µ–≤ —ç–º–æ—Ü–∏–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö ${categoriesStr}`;
    }
  }
  
  // –î–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π
  if (emotionType === 'positive') {
    if (emotions.length === 0) {
      return '–î–∞–≤–∞–π –æ–ø–∏—à–µ–º, —á—Ç–æ —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª ‚ù§Ô∏è‚Äçüî•\n–ú–æ–∂–Ω–æ –ø–æ–¥—Å–º–æ—Ç—Ä–µ—Ç—å —ç–º–æ—Ü–∏–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ "—Ä–∞–¥–æ—Å—Ç—å" –∏ "–ª—é–±–æ–≤—å"';
    } else {
      return '–î–∞–≤–∞–π —Ä–∞—Å—à–∏—Ä–∏–º –Ω–∞—à—É –ø–∞–ª–∏—Ç—Ä—É —ç–º–æ—Ü–∏–π üôÉ\n–í —Ç–∞–±–ª–∏—Ü–µ –Ω–∞–π–¥–∏ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –∫—Ä–∞—Å–æ—á–Ω–µ–µ –æ–ø–∏—à—É—Ç —Ç–æ, —á—Ç–æ —Ç—ã –∏—Å–ø—ã—Ç–∞–ª <i>(—Å–º–æ—Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏ "—Ä–∞–¥–æ—Å—Ç—å" –∏ "–ª—é–±–æ–≤—å")</i>';
    }
  }
  
  return '';
}