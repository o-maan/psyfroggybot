import { botLogger } from '../logger';
import { readFileSync } from 'fs';
import path from 'path';

interface RudeResponse {
  isRude: boolean;
  response?: string;
  needsCounter?: boolean;
}

// –°—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –±—É–∫–≤ (–≤ –ø–∞–º—è—Ç–∏)
const keyboardSpamCounter = new Map<number, number>();

// –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
setInterval(() => {
  keyboardSpamCounter.clear();
}, 30 * 60 * 1000);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –ø—Ä–æ–º–ø—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
const rudePhrasesData = loadRudePhrases();

function loadRudePhrases(): Map<string, { phrases: Set<string>, response: string }> {
  try {
    const promptPath = path.join(process.cwd(), 'assets', 'prompts', 'wtf');
    const content = readFileSync(promptPath, 'utf-8');
    const lines = content.split('\n');
    
    const categories = new Map<string, { phrases: Set<string>, response: string }>();
    let currentCategory = '';
    let currentResponse = '';
    let collectingPhrases = false;
    let skipUntilCategory = false;
    
    for (const line of lines) {
      const trimmed = line.trim();
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
      if (!trimmed || trimmed === '---') {
        skipUntilCategory = false;
        continue;
      }
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è –¥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      if (trimmed.includes('–ü–†–Ø–ú–´–ï –û–¢–ö–ê–ó–´') || trimmed.includes('–ì–†–£–ë–´–ï –ü–û–°–õ–ê–ù–ò–Ø')) {
        skipUntilCategory = true;
        continue;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ—Ç–≤–µ—Ç - –∏—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "–ö–ê–¢–ï–ì–û–†–ò–Ø - "–æ—Ç–≤–µ—Ç""
      if (!trimmed.startsWith('-') && trimmed.includes(' - "') && trimmed.endsWith('"')) {
        // –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
        const cleanLine = trimmed.replace(/^[üö´‚è≠Ô∏èüñïüò§üôÑüé≠ü§¨üéØüò©]+\s*/, '');
        const match = cleanLine.match(/^(.+?)\s*-\s*"(.+)"$/);
        if (match) {
          currentCategory = match[1].trim();
          currentResponse = match[2];
          categories.set(currentCategory, { phrases: new Set(), response: currentResponse });
          collectingPhrases = true;
          skipUntilCategory = false;
          continue;
        }
      }
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤)
      if (trimmed.startsWith('"') && trimmed.endsWith('"') && !trimmed.includes(' - ')) {
        // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        continue;
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º —Ñ—Ä–∞–∑—ã
      if (collectingPhrases && trimmed.startsWith('-') && !skipUntilCategory) {
        const phrasesLine = trimmed.substring(1).trim();
        // –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ñ—Ä–∞–∑–∞–º–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
        const phrases = phrasesLine.match(/"[^"]+"/g);
        if (phrases) {
          const categoryData = categories.get(currentCategory);
          if (categoryData) {
            phrases.forEach(phrase => {
              // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ Set
              categoryData.phrases.add(phrase.slice(1, -1).toLowerCase());
            });
          }
        }
      } else if (collectingPhrases && !trimmed.startsWith('-') && !trimmed.startsWith('"')) {
        // –ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ —Ñ—Ä–∞–∑
        collectingPhrases = false;
      }
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    botLogger.info({ categoriesCount: categories.size }, '–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ø—Ä–æ–º–ø—Ç–∞');
    categories.forEach((data, category) => {
      botLogger.debug({ category, phrasesCount: data.phrases.size, response: data.response }, '–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è');
    });
    
    // –ü–∞—Ä—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –æ–±–∑—ã–≤–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
    if (!categories.has('–ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ï –û–°–ö–û–†–ë–õ–ï–ù–ò–Ø')) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑ –ø—Ä–æ–º–ø—Ç–∞ –æ–±–∑—ã–≤–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å "—Ç—ã"
      const intellectualInsults = ['—Ç—ã —Ç—É–ø–æ–π', '—Ç—ã —Ç—É–ø–∏—Ü–∞', '—Ç—ã —Ç—É–ø–µ–Ω—å', '—Ç—ã —Ç—É–ø–∞–∫',
        '—Ç—ã –¥–µ–±–∏–ª', '—Ç—ã –¥–µ–±–∏–ª–æ–∏–¥', '—Ç—ã –¥—ç–±–∏–ª', '—Ç—ã –∏–¥–∏–æ—Ç', '—Ç—ã –∏–¥–∏–æ—Ç–∏–Ω–∞', '—Ç—ã –∏–¥–∏–æ—Ç–∏—â–µ',
        '—Ç—ã –¥—É—Ä–∞–∫', '—Ç—ã –¥—É—Ä–µ–Ω—å', '—Ç—ã –¥—É—Ä–∞—á–æ–∫', '—Ç—ã –∫—Ä–µ—Ç–∏–Ω', '—Ç—ã –∫—Ä–µ—Ç–∏–Ω–æ–∏–¥', '—Ç—ã –∫—Ä–µ—Ç–∏–Ω–∏—â–µ',
        '—Ç—ã –∏–º–±–µ—Ü–∏–ª', '—Ç—ã –æ–ª–∏–≥–æ—Ñ—Ä–µ–Ω', '—Ç—ã –¥–∞—É–Ω', '—Ç—ã –æ—Ç—Å—Ç–∞–ª—ã–π', '—Ç—ã —É–º—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç—Å—Ç–∞–ª—ã–π',
        '—Ç—ã –Ω–µ–¥–æ—Ä–∞–∑–≤–∏—Ç—ã–π', '—Ç—ã —Å–ª–∞–±–æ—É–º–Ω—ã–π', '—Ç—ã —Ç–æ—Ä–º–æ–∑', '—Ç—ã —Ç—É–≥–æ–¥—É–º', '—Ç—ã –±–µ—Å—Ç–æ–ª–∫–æ–≤—ã–π',
        '—Ç—ã –±–µ–∑–º–æ–∑–≥–ª—ã–π', '—Ç—ã –ø—É—Å—Ç–æ–≥–æ–ª–æ–≤—ã–π'];
      
      const rudeInsults = ['—Ç—ã –º—É–¥–∞–∫', '—Ç—ã –º—É–¥–∏–ª–∞', '—Ç—ã –º—É–¥–ª–æ', '—Ç—ã –º—É–¥–æ–∑–≤–æ–Ω',
        '—Ç—ã –∫–æ–∑–µ–ª', '—Ç—ã –∫–æ–∑–ª–∏–Ω–∞', '—Ç—ã –∫–æ–∑–ª—è—Ä–∞', '—Ç—ã –∫–æ–∑–ª–∏—â–µ',
        '—Ç—ã –≥–æ–≤–Ω—é–∫', '—Ç—ã –≥–æ–≤–Ω–∞—Ä—å', '—Ç—ã –≥–æ–≤–Ω–æ–µ–¥',
        '—Ç—ã –≥–∞–Ω–¥–æ–Ω', '—Ç—ã –ø–∏–¥–æ—Ä', '—Ç—ã –ø–∏–¥—Ä–∏–ª–∞', '—Ç—ã –ø–µ–¥—Ä–∏–ª–∞',
        '—Ç—ã —É–±–ª—é–¥–æ–∫', '—Ç—ã –≤—ã–±–ª—è–¥–æ–∫', '—Ç—ã –µ–±–∞–Ω–∞—Ç', '—Ç—ã –µ–±–∞–Ω–∞—à–∫–∞',
        '—Ç—ã –¥–æ–ª–±–æ–µ–±', '—Ç—ã –¥–æ–ª–±–∞–Ω—É—Ç—ã–π', '—Ç—ã –µ–±–∞–Ω—É—Ç—ã–π',
        '—Ç—ã —Ö—É–µ—Å–æ—Å', '—Ç—ã —Ö—É–π–ª–æ', '—Ç—ã —Ö—É–µ–ø–ª–µ—Ç', '—Ç—ã —Ö—É–µ–ø—É—Ç–∞–ª–æ',
        '—Ç—ã –ø–∏–¥–æ—Ä–∞—Å', '—Ç—ã –ø–µ—Ç—É—Ö', '—Ç—ã –ø–µ—Ç—É—à–∞—Ä–∞',
        '—Ç—ã —É–µ–±–∞–Ω', '—Ç—ã —É–µ–±–æ–∫', '—Ç—ã —É–µ–±–∏—â–µ',
        '—Ç—ã –ø–∏–∑–¥–∞–±–æ–ª', '—Ç—ã –ø–∏–∑–¥–æ–±–æ–ª', '—Ç—ã –ø—Ä–∏–¥—É—Ä–æ–∫', '—Ç—ã –±–ª—è–¥–∏–Ω–∞', 
        '—Ç—ã —É—ë–±–æ–∫', '—Ç—ã —É—à–ª–µ–ø–æ–∫', '—Ç—ã —É—à–ª—ë–ø–æ–∫'];
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±–∑—ã–≤–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å "—Ç—ã" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –û–ë–ó–´–í–ê–¢–ï–õ–¨–°–¢–í–ê
      const existingPhrases = categories.get('–û–ë–ó–´–í–ê–¢–ï–õ–¨–°–¢–í–ê')?.phrases || new Set();
      [...intellectualInsults, ...rudeInsults].forEach(phrase => {
        existingPhrases.add(phrase.toLowerCase());
      });
      
      if (categories.has('–û–ë–ó–´–í–ê–¢–ï–õ–¨–°–¢–í–ê')) {
        categories.get('–û–ë–ó–´–í–ê–¢–ï–õ–¨–°–¢–í–ê')!.phrases = existingPhrases;
      }
    }
    
    // –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –¥–æ–±–∞–≤–∏–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Ä—É—á–Ω—É—é
    if (categories.size < 10) {
      // –û–î–ù–û–°–õ–û–ñ–ù–´–ï –ù–ï–¢
      categories.set('–û–î–ù–û–°–õ–û–ñ–ù–´–ï –ù–ï–¢', {
        phrases: new Set(['–Ω–µ—Ç', '–Ω–µ', '–Ω–µ–∞', '–Ω–µ-–∞', '–Ω–µ–µ–µ', '–Ω–µ–µ–µ—Ç', '–Ω–∞–π–Ω', '–Ω–æ—É', 'no', 'nope', 'nah']),
        response: '–ö–≤–∞! –î–∞–≤–∞–π –≤—Å–µ-—Ç–∞–∫–∏ –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º'
      });
      
      // –ù–ï –•–û–ß–£
      categories.set('–ù–ï –•–û–ß–£/–ù–ï –ë–£–î–£', {
        phrases: new Set(['–Ω–µ —Ö–æ—á—É', '–Ω–µ –±—É–¥—É', '–Ω–µ —Å—Ç–∞–Ω—É', '–Ω–µ —Å–æ–±–∏—Ä–∞—é—Å—å']),
        response: '–ü–æ–Ω–∏–º–∞—é, –Ω–µ –≤—Å–µ–≥–¥–∞ —Ö–æ—á–µ—Ç—Å—è, –Ω–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å'
      });
      
      // –û–¢–°–¢–ê–ù–¨/–û–¢–í–ê–õ–ò
      categories.set('–û–¢–°–¢–ê–ù–¨/–û–¢–í–ê–õ–ò', {
        phrases: new Set(['–æ—Ç–≤–∞–ª–∏', '–æ—Ç—Å—Ç–∞–Ω—å', '–æ—Ç—Ü–µ–ø–∏—Å—å', '–æ—Ç–≤—è–∂–∏—Å—å', 
                         '–æ—Ç–≤–∞–ª–∏ –æ—Ç –º–µ–Ω—è', '–æ—Ç—Å—Ç–∞–Ω—å –æ—Ç –º–µ–Ω—è',
                         '–æ—Ç–≤–∞–ª–∏ —Å–æ —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏', '–æ—Ç—Å—Ç–∞–Ω—å —Å–æ —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏',
                         '–æ—Ç–≤–∞–ª–∏ –æ—Ç –º–µ–Ω—è —Å–æ —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏', '–æ—Ç—Å—Ç–∞–Ω—å –æ—Ç –º–µ–Ω—è —Å–æ —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏']),
        response: '–Ø —Ç—É—Ç —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ. –ú–æ–∂–µ—Ç —Ç–µ–±–µ –Ω—É–∂–µ–Ω –Ω–µ–±–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤'
      });
      
      // –ò–î–ò –ö–£–î–ê –ü–û–î–ê–õ–¨–®–ï
      categories.set('–ò–î–ò –ö–£–î–ê –ü–û–î–ê–õ–¨–®–ï', {
        phrases: new Set(['–∏–¥–∏ –Ω–∞—Ö—É–π', '–∏–¥–∏ –Ω–∞ —Ö—É–π', '–∏–¥–∏ –Ω–∞—Ö', '–∏–¥–∏–Ω–∞—Ö', '–ø–æ—à–µ–ª –Ω–∞—Ö—É–π', 
                         '–ø–æ—à–µ–ª –Ω–∞ —Ö—É–π', '–ø–æ—à–µ–ª –Ω–∞—Ö', '–∏–¥–∏ –Ω–∞—Ö–µ—Ä', '–ø–æ—à–µ–ª –Ω–∞—Ö–µ—Ä']),
        response: '–î–∞–≤–∞–π –∏—Å–∫—É–ø–∞–µ–º—Å—è –≤ –±–æ–ª–æ—Ç–µ - –≥–æ–≤–æ—Ä—è—Ç, –ø–ª–∞–≤–∞–Ω–∏–µ —Å–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å üòÅ'
      });
      
      // –û–ë–ó–´–í–ê–¢–ï–õ–¨–°–¢–í–ê (–±–µ–∑ "—Ç—ã")
      categories.set('–û–ë–ó–´–í–ê–¢–ï–õ–¨–°–¢–í–ê', {
        phrases: new Set(['—Ç—É–ø–æ–π', '—Ç—É–ø–∏—Ü–∞', '—Ç—É–ø–µ–Ω—å', '—Ç—É–ø–∞–∫', '–¥–µ–±–∏–ª', '–¥–µ–±–∏–ª–æ–∏–¥', 
                         '–∏–¥–∏–æ—Ç', '–∏–¥–∏–æ—Ç–∏–Ω–∞', '–¥—É—Ä–∞–∫', '–¥—É—Ä–µ–Ω—å', '–∫—Ä–µ—Ç–∏–Ω', '–∏–º–±–µ—Ü–∏–ª',
                         '–º—É–¥–∞–∫', '–º—É–¥–∏–ª–∞', '–º—É–¥–ª–æ', '–∫–æ–∑–µ–ª', '–∫–æ–∑–ª–∏–Ω–∞', '–≥–æ–≤–Ω—é–∫',
                         '–≥–∞–Ω–¥–æ–Ω', '–ø–∏–¥–æ—Ä', '–ø–∏–¥—Ä–∏–ª–∞', '—É–±–ª—é–¥–æ–∫', '–µ–±–∞–Ω–∞—Ç', '–¥–æ–ª–±–æ–µ–±',
                         '—Ö—É–µ—Å–æ—Å', '—Ö—É–π–ª–æ', '–ø–∏–¥–æ—Ä–∞—Å', '–ø–µ—Ç—É—Ö', '–ª–æ—Ö', '–ª–æ—à–∞—Ä–∞', '–ª—É–∑–µ—Ä',
                         '–Ω–µ—É–¥–∞—á–Ω–∏–∫', '—Å–ª–∞–±–∞–∫', '—É—Ä–æ–¥', '—É—Ä–æ–¥–µ—Ü', '–ø—Å–∏—Ö', '–ø—Å–∏—Ö–æ–ø–∞—Ç',
                         '—à–∏–∑–∏–∫', '–±–æ–ª—å–Ω–æ–π', '–Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π', '—á–æ–∫–Ω—É—Ç—ã–π', '–∫–æ–Ω—á–µ–Ω—ã–π',
                         '—É–ø–æ—Ä–æ—Ç—ã–π', '–Ω–∞—Ä–∫–æ–º–∞–Ω', '—Ç–æ—Ä—á–æ–∫', '–∞–ª–∫–∞—à', '–º—Ä–∞–∑—å', '–ø–æ–¥–æ–Ω–æ–∫',
                         '–æ—Ç–º–æ—Ä–æ–∑–æ–∫', '–±—ã–¥–ª–æ', '–±—ã–¥–ª–∞–Ω', '–≥–æ–ø–Ω–∏–∫', '–∏–∑–≥–æ–π', '–æ—Ç—â–µ–ø–µ–Ω–µ—Ü',
                         '–∑–∞–¥—Ä–æ—Ç', '–±–æ—Ç–∞–Ω', '–¥–µ–≤—Å—Ç–≤–µ–Ω–Ω–∏–∫', '–∏–Ω—Ü–µ–ª', '–±–æ–º–∂', '–Ω–∏—â–µ–±—Ä–æ–¥',
                         '—Ä–∞–±', '—Ö–æ–ª–æ–ø', '—Ç–µ—Ä–ø–∏–ª–∞', '—Ç—Ä—è–ø–∫–∞', '–∫—Ä–∏–Ω–∂', '–∑–∞—à–∫–≤–∞—Ä',
                         '—Ç–æ–∫—Å–∏–∫', '–¥—É—à–Ω–∏–ª–∞', '—Ö–µ–π—Ç–µ—Ä', '—Ç—Ä–æ–ª–ª—å', '—Ñ–µ–π–∫', '–±–æ—Ç', '–Ω–ø—Å',
                         '–ª–∞–º–µ—Ä', '–Ω—É–±', '—Ä–∞–∫', '—à–∫–æ–ª—å–Ω–∏–∫', '–ø–æ–∑–æ—Ä', '–ø–æ–∑–æ—Ä–∏—â–µ',
                         '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ', '–Ω–µ–¥–æ—Ä–∞–∑—É–º–µ–Ω–∏–µ', '–æ—à–∏–±–∫–∞', '–±–∞–≥', '–≥–ª—é–∫',
                         '–∫–æ—à–º–∞—Ä', '—É–∂–∞—Å', '—Ç—Ä–µ—à', '–æ—Ç—Å—Ç–æ–π', '–±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π', '–Ω–∏–∫—á–µ–º–Ω—ã–π',
                         // –ù–æ–≤—ã–µ –æ–±–∑—ã–≤–∞—Ç–µ–ª—å—Å—Ç–≤–∞
                         '–ø–∏–∑–¥–∞–±–æ–ª', '–ø–∏–∑–¥–æ–±–æ–ª', '–ø—Ä–∏–¥—É—Ä–æ–∫', '–±–ª—è–¥–∏–Ω–∞', '—É–µ–±–æ–∫', '—É—ë–±–æ–∫', '—É—à–ª–µ–ø–æ–∫', '—É—à–ª—ë–ø–æ–∫',
                         // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–∑—ã–≤–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å "—Ç—ã" –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
                         '—Ç—ã —Ç—É–ø–æ–π', '—Ç—ã —Ç—É–ø–∏—Ü–∞', '—Ç—ã —Ç—É–ø–µ–Ω—å', '—Ç—ã —Ç—É–ø–∞–∫',
                         '—Ç—ã –¥–µ–±–∏–ª', '—Ç—ã –¥–µ–±–∏–ª–æ–∏–¥', '—Ç—ã –¥—ç–±–∏–ª', '—Ç—ã –∏–¥–∏–æ—Ç', '—Ç—ã –∏–¥–∏–æ—Ç–∏–Ω–∞', '—Ç—ã –∏–¥–∏–æ—Ç–∏—â–µ',
                         '—Ç—ã –¥—É—Ä–∞–∫', '—Ç—ã –¥—É—Ä–µ–Ω—å', '—Ç—ã –¥—É—Ä–∞—á–æ–∫', '—Ç—ã –∫—Ä–µ—Ç–∏–Ω', '—Ç—ã –∫—Ä–µ—Ç–∏–Ω–æ–∏–¥', '—Ç—ã –∫—Ä–µ—Ç–∏–Ω–∏—â–µ',
                         '—Ç—ã –∏–º–±–µ—Ü–∏–ª', '—Ç—ã –æ–ª–∏–≥–æ—Ñ—Ä–µ–Ω', '—Ç—ã –¥–∞—É–Ω', '—Ç—ã –æ—Ç—Å—Ç–∞–ª—ã–π', '—Ç—ã —É–º—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç—Å—Ç–∞–ª—ã–π',
                         '—Ç—ã –Ω–µ–¥–æ—Ä–∞–∑–≤–∏—Ç—ã–π', '—Ç—ã —Å–ª–∞–±–æ—É–º–Ω—ã–π', '—Ç—ã —Ç–æ—Ä–º–æ–∑', '—Ç—ã —Ç—É–≥–æ–¥—É–º', '—Ç—ã –±–µ—Å—Ç–æ–ª–∫–æ–≤—ã–π',
                         '—Ç—ã –±–µ–∑–º–æ–∑–≥–ª—ã–π', '—Ç—ã –ø—É—Å—Ç–æ–≥–æ–ª–æ–≤—ã–π', '—Ç—ã –º—É–¥–∞–∫', '—Ç—ã –º—É–¥–∏–ª–∞', '—Ç—ã –º—É–¥–ª–æ', '—Ç—ã –º—É–¥–æ–∑–≤–æ–Ω',
                         '—Ç—ã –¥–æ–ª–±–æ–µ–±', '—Ç—ã –¥–æ–ª–±–æ—ë–±',
                         // –ù–æ–≤—ã–µ –æ–±–∑—ã–≤–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å "—Ç—ã"
                         '—Ç—ã –ø–∏–∑–¥–∞–±–æ–ª', '—Ç—ã –ø–∏–∑–¥–æ–±–æ–ª', '—Ç—ã –ø—Ä–∏–¥—É—Ä–æ–∫', '—Ç—ã –±–ª—è–¥–∏–Ω–∞', '—Ç—ã —É–µ–±–æ–∫', '—Ç—ã —É—ë–±–æ–∫', '—Ç—ã —É—à–ª–µ–ø–æ–∫', '—Ç—ã —É—à–ª—ë–ø–æ–∫',
                         // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–∑—ã–≤–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
                         '–æ–ª–∏–≥–æ—Ñ—Ä–µ–Ω', '–¥–∞—É–Ω', '–æ—Ç—Å—Ç–∞–ª—ã–π', '—É–º—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç—Å—Ç–∞–ª—ã–π', '–Ω–µ–¥–æ—Ä–∞–∑–≤–∏—Ç—ã–π', '—Å–ª–∞–±–æ—É–º–Ω—ã–π',
                         '—Ç–æ—Ä–º–æ–∑', '—Ç—É–≥–æ–¥—É–º', '–±–µ—Å—Ç–æ–ª–∫–æ–≤—ã–π', '–±–µ–∑–º–æ–∑–≥–ª—ã–π', '–ø—É—Å—Ç–æ–≥–æ–ª–æ–≤—ã–π', '–º—É–¥–æ–∑–≤–æ–Ω', '–¥–æ–ª–±–æ—ë–±']),
        response: '–û–±–∑—ã–≤–∞—Ç—å –ª—è–≥—É—Ö—É - –Ω—É —ç—Ç–æ –∫–∞–∫-—Ç–æ –Ω–µ—Å–µ—Ä—å–µ–∑–Ω–æ üòï'
      });
      
      // –ö–û–†–û–¢–ö–ò–ï –†–£–ì–ê–¢–ï–õ–¨–°–¢–í–ê
      categories.set('–ö–û–†–û–¢–ö–ò–ï –†–£–ì–ê–¢–ï–õ–¨–°–¢–í–ê', {
        phrases: new Set(['–≥–æ–≤–Ω–æ', '–∂–æ–ø–∞', '–≥–æ–≤–Ω–æ –∂–æ–ø–∞', '–≥–æ–≤–Ω–æ-–∂–æ–ø–∞', 
                         '—Ö—É–π–Ω—è', '—Ö—É–π–Ω–∏', '–ø–∏–∑–¥–∞', '–ø–∏–∑–¥–µ—Ü', '–±–ª—è–¥—å', '–±–ª—è', 
                         '—Ö—É–π', '—Ö—É—è', '—Ö—É–∏', '–ø–∏–¥–æ—Ä', '–µ–±–∞—Ç—å', '–µ–±–∞–ª',
                         '–Ω–∞—Ö—É–π', '–Ω–∞—Ö—É—è', '–ø–æ—Ö—É–π', '—Ö—É–ª–∏', '–∞—Ö—É–π']),
        response: '–î–∞–≤–∞–π —á—É—Ç–æ—á–∫—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ üòÖ'
      });
      
      // –ë–ï–°–ò–®–¨
      categories.set('–ë–ï–°–ò–®–¨', {
        phrases: new Set(['–±–µ—Å–∏—à—å', '–±–µ—Å–∏—à—å –±–ª—è', '–±–µ—Å–∏—à', '–Ω–µ –±–µ—Å–∏', '–Ω–µ –±–µ—Å–∏ –º–µ–Ω—è']),
        response: '–î–∞–≤–∞–π –∏—Å–∫—É–ø–∞–µ–º—Å—è –≤ –±–æ–ª–æ—Ç–µ - –≥–æ–≤–æ—Ä—è—Ç, –ø–ª–∞–≤–∞–Ω–∏–µ —Å–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å üòÅ'
      });
      
      // –ü–†–û–ü–£–°–ö/–°–ö–ò–ü
      categories.set('–ü–†–û–ü–£–°–ö/–°–ö–ò–ü', { 
        phrases: new Set(['–ø–∞—Å', '–ø–∞—Å—Å', 'pass', '—Å–∫–∏–ø', '—Å–∫–∏–ø–∞—é', 'skip', '—Å–∫–∏–ø–Ω—É', 
                         '–ø—Ä–æ–ø—É—Å–∫–∞—é', '–ø—Ä–æ–ø—É—â—É', '–ø—Ä–æ–ø—É—Å–∫', '–¥–∞–ª—å—à–µ', '—Å–ª–µ–¥—É—é—â–∏–π', 
                         '–Ω–µ–∫—Å—Ç', 'next', '–¥–∞–≤–∞–π –¥–∞–ª—å—à–µ', '–¥–∞–≤–∞–π —Å–ª–µ–¥—É—é—â–µ–µ', 
                         '–º–∏–Ω—É—Å —ç—Ç–æ—Ç', '–º–∏–º–æ', '–ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞—é', '–ª–∏—Å—Ç–∞—é –¥–∞–ª—å—à–µ']),
        response: '–í–∞–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ' 
      });
      
      botLogger.warn('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–º–µ—Å—Ç–æ –ø—Ä–æ–º–ø—Ç–∞');
    }
    
    return categories;
  } catch (error) {
    botLogger.error({ error }, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–∑ –¥–ª—è rude-filter');
    return new Map();
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–±–æ—Ä –±—É–∫–≤
function isKeyboardSpam(text: string): boolean {
  const normalized = text.trim().toLowerCase();
  
  // –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ - —Ç–æ—á–Ω–æ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
  const validWords = [
    '–¥–∞', '–Ω–µ', '–Ω–µ—Ç', '–Ω—É', '–∞', '–∏', '–Ω–æ', '—Ç–æ', '–±—ã', '–∂–µ', '–ª–∏', '–∫–∞',
    '–æ—Ö', '–∞—Ö', '—ç—Ö', '—É—Ö', '—Ñ—É', '–æ–≥–æ', '–æ–π', '–∞–π', '—ç–π', '–∞—É', '—É–≤—ã',
    '–∞–≥–∞', '—É–≥—É', '–º–º', '—Ö–º', '—ç–º', '–≥–º', '—Ç—å—Ñ—É', '–±—Ä—Ä', '–∫—Ö–º',
    '–æ–∫', '–æ–∫–µ–π', '—Ö–µ—Ö', '—Ö–∞—Ö', '–ª–æ–ª', '–∫–µ–∫', '—ã—ã', '—Ö–∑', '–ø—Ñ',
    '–∞?', '–º?', '—ç?', '—á–æ', '—á–µ', '—à–æ'
  ];
  
  if (validWords.includes(normalized)) {
    return false;
  }
  
  // –ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞–±–æ—Ä–∞ –±—É–∫–≤:
  
  // 1. –¢–æ–ª—å–∫–æ —Å–æ–≥–ª–∞—Å–Ω—ã–µ (3+ –ø–æ–¥—Ä—è–¥)
  if (/^[–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â—ä—å]{3,}$/.test(normalized)) {
    return true;
  }
  
  // 2. –õ–∞—Ç–∏–Ω–∏—Ü–∞ –∏–ª–∏ —Ü–∏—Ñ—Ä—ã –±–µ–∑ —Å–º—ã—Å–ª–∞
  if (/^[a-z0-9]+$/i.test(normalized) && normalized.length > 1) {
    return true;
  }
  
  // 3. –°–º–µ—Å—å –∞–ª—Ñ–∞–≤–∏—Ç–æ–≤ (—Ä—É—Å + eng)
  if (/[a-z]/i.test(normalized) && /[–∞-—è]/i.test(normalized)) {
    return true;
  }
  
  // 4. –ü–æ–≤—Ç–æ—Ä—ã –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (3+)
  if (/(.)\1{2,}/.test(normalized) && normalized.length === normalized.match(/(.)\1*/)?.[0].length) {
    return true;
  }
  
  // 5. –ë–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  if (/^([–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â]{2,}[–∞–µ—ë–∏–æ—É—ã—ç—é—è]){2,}$/.test(normalized) || // "—Ñ—Ä–∞—Ñ—Ä–∞"
      /^([–∞–µ—ë–∏–æ—É—ã—ç—é—è][–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â]{2,}){2,}$/.test(normalized)) {  // "–∞—Ñ—Ñ–∞—Ñ—Ñ"
    return true;
  }
  
  // 6. –°–ª–∏—à–∫–æ–º —Å—Ç—Ä–∞–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±—É–∫–≤ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
  if (normalized.length > 5) {
    const vowels = (normalized.match(/[–∞–µ—ë–∏–æ—É—ã—ç—é—è]/g) || []).length;
    const consonants = (normalized.match(/[–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â]/g) || []).length;
    
    // –ù–µ—Ç –≥–ª–∞—Å–Ω—ã—Ö –≤–æ–æ–±—â–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ
    if (vowels === 0 || (consonants > 0 && vowels / consonants < 0.15)) {
      return true;
    }
  }
  
  // 7. –Ø–≤–Ω–æ —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Ç—Ä–æ–∫)
  if (normalized.length <= 6 && normalized.length >= 2) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —Å–ª–æ–≤–∞
    const hasWordStructure = /^[–∞-—è]{1,2}$/.test(normalized) || // "—è", "–º—ã"
                            /^(–ø—Ä|–≤–∑|–≤—Å|—Å–ø|—Å—Ç|—Ç—Ä|–¥—Ä|–≥—Ä|–∫—Ä)[–∞–µ—ë–∏–æ—É—ã—ç—é—è]/.test(normalized) || // –ø—Ä–∏—Å—Ç–∞–≤–∫–∏
                            /[–∞–µ—ë–∏–æ—É—ã—ç—é—è](—Ç—å|—Å—å|—Å—è|–ª–∞|–ª–æ|–ª–∏|–µ—Ç|–∏—Ç|—É—Ç|—é—Ç)$/.test(normalized); // –æ–∫–æ–Ω—á–∞–Ω–∏—è
    
    if (!hasWordStructure && !/[–∞–µ—ë–∏–æ—É—ã—ç—é—è]{2,}/.test(normalized)) {
      return true;
    }
  }
  
  // 8. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ —Å–ø–∞–º–∞
  if (/^[–π—Ü—É–∫–µ–Ω]+$/.test(normalized) || // –≤–µ—Ä—Ö–Ω–∏–π —Ä—è–¥
      /^[—Ñ—ã–≤–∞–ø—Ä]+$/.test(normalized) || // —Å—Ä–µ–¥–Ω–∏–π —Ä—è–¥  
      /^[—è—á—Å–º–∏—Ç]+$/.test(normalized)) { // –Ω–∏–∂–Ω–∏–π —Ä—è–¥
    return true;
  }
  
  return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫
function isNonRussianText(text: string): boolean {
  const normalized = text.trim().toLowerCase();
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã - —ç—Ç–æ –Ω–µ "–¥—Ä—É–≥–æ–π —è–∑—ã–∫"
  if (/[–∞-—è—ë]/i.test(normalized)) {
    return false;
  }
  
  // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ —ç—Ç–æ –Ω–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–ª–æ–≤–æ –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
  const englishWords = ['ok', 'okay', 'yes', 'no', 'lol', 'omg', 'wtf'];
  if (/^[a-z\s]+$/i.test(normalized) && !englishWords.includes(normalized)) {
    return true;
  }
  
  return false;
}

// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–∞–±–æ—Ä–∞ –±—É–∫–≤ —Å —É—á–µ—Ç–æ–º —Å—á–µ—Ç—á–∏–∫–∞
function getKeyboardSpamResponse(userId?: number): string {
  if (!userId) return "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã —Å–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É üòÅ";
  
  const count = (keyboardSpamCounter.get(userId) || 0) + 1;
  keyboardSpamCounter.set(userId, count);
  
  switch (count) {
    case 1:
      return "–ö–∞–∂–µ—Ç—Å—è, —Ç—ã —Å–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É üòÅ";
    case 2:
      return "–ù–µ—Ç—å, —Ç–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç üôà";
    case 3:
      return "–¢–µ—Ä–ø–µ–ª–∏–≤–æ –∂–¥—É –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ üòå";
    default:
      return ""; // –ü–æ—Å–ª–µ 3-—Ö —Ä–∞–∑ –º–æ–ª—á–∏–º
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
export function checkRudeMessage(text: string, userId?: number): RudeResponse {
  try {
    const normalized = text.trim().toLowerCase();
    
    // –ì–õ–ê–í–ù–û–ï –ü–†–ê–í–ò–õ–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    
    // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —Ñ—Ä–∞–∑–∞–º–∏ –∏–∑ —Å–ø–∏—Å–∫–æ–≤
    for (const [category, data] of rudePhrasesData.entries()) {
      if (data.phrases.has(normalized)) {
        botLogger.info({ category, phrase: normalized }, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –≥—Ä—É–±—ã–π –æ—Ç–≤–µ—Ç');
        
        // –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –û–ë–ó–´–í–ê–¢–ï–õ–¨–°–¢–í–ê –≤—ã–±–∏—Ä–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç
        let response = data.response;
        if (category === '–û–ë–ó–´–í–ê–¢–ï–õ–¨–°–¢–í–ê') {
          const responses = [
            '–û–±–∑—ã–≤–∞—Ç—å –ª—è–≥—É—Ö—É - –Ω—É —ç—Ç–æ –∫–∞–∫-—Ç–æ –Ω–µ—Å–µ—Ä—å–µ–∑–Ω–æ üòï',
            '–ö—Ç–æ –æ–±–∑—ã–≤–∞–µ—Ç—Å—è, —Ç–æ—Ç —Å–∞–º —Ç–∞–∫ –∏ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è üòÖ',
            '–ù—É –∏ –ª–∞–¥–Ω–æ, –ø–æ–π–¥—É –ø–æ–∫–≤–∞–∫–∞—é –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ ü•≤',
            '–ü–æ–º–æ–≥–∞–µ—à—å-–ø–æ–º–æ–≥–∞–µ—à—å, –∞ –æ–Ω–∏ –≤–æ–Ω —á—Ç–æ ü§®',
            '–ù—É –∏ —Å–∞–º —Ç—É—Ç —Ä–∞–∑–±–∏—Ä–∞–π—Å—è —Ç–æ–≥–¥–∞ ü§™'
          ];
          response = responses[Math.floor(Math.random() * responses.length)];
        }
        
        return {
          isRude: true,
          response: response,
          needsCounter: false
        };
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫ (–¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç)
    if (isNonRussianText(normalized)) {
      botLogger.info({ text: normalized }, '–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ');
      return {
        isRude: true,
        response: "–Ø –º–æ–≥—É –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π ü´†",
        needsCounter: false
      };
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–±–æ—Ä –±—É–∫–≤ (–¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –≤–µ—Å—å —Ç–µ–∫—Å—Ç)
    if (isKeyboardSpam(normalized)) {
      const response = getKeyboardSpamResponse(userId);
      if (response) {
        botLogger.info({ text: normalized, userId }, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∞–±–æ—Ä –±—É–∫–≤');
        return {
          isRude: true,
          response,
          needsCounter: true
        };
      }
    }
    
    // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    return { isRude: false };
  } catch (error) {
    botLogger.error({ error }, '–û—à–∏–±–∫–∞ –≤ checkRudeMessage');
    // –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ - —Å—á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º
    return { isRude: false };
  }
}

// –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
export function resetKeyboardSpamCounter(userId: number): void {
  keyboardSpamCounter.delete(userId);
}