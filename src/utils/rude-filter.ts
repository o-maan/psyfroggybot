import { botLogger } from '../logger';
import { readFileSync } from 'fs';
import path from 'path';

// Загружаем словарь русских слов при старте
const russianWordsSet = new Set<string>();

// Функция для загрузки словаря из URL (будет выполнена асинхронно)
async function loadRussianDictionary() {
  try {
    // Сначала пробуем загрузить локальный словарь
    const localDictPath = path.join(process.cwd(), 'assets', 'dictionaries', 'russian-words.txt');
    if (readFileSync(localDictPath)) {
      const content = readFileSync(localDictPath, 'utf-8');
      const lines = content.split('\n');
      
      for (const line of lines) {
        const word = line.trim().toLowerCase();
        if (word && !word.startsWith('#')) {
          russianWordsSet.add(word);
        }
      }
    }
    
    // Добавляем программно сгенерированные формы слов
    addWordForms();
    
    botLogger.info({ wordsCount: russianWordsSet.size }, 'Загружен словарь русских слов');
  } catch (error) {
    botLogger.error({ error }, 'Ошибка загрузки словаря, используем базовый набор');
    // В случае ошибки добавляем хотя бы базовые формы
    addWordForms();
  }
}

// Функция для добавления различных форм слов
function addWordForms() {
  // Значительно расширенные базовые слова для генерации форм
  const baseWords = {
    // Глаголы (100+)
    verbs: [
      // Базовые глаголы движения и действия
      'делать', 'работать', 'жить', 'идти', 'есть', 'пить', 'спать', 'читать', 'писать', 
      'говорить', 'слушать', 'смотреть', 'думать', 'знать', 'хотеть', 'мочь', 'любить',
      'учить', 'играть', 'петь', 'танцевать', 'бежать', 'лететь', 'плыть', 'ехать',
      'прыгать', 'ползать', 'носить', 'возить', 'водить', 'везти', 'нести', 'вести',
      'гулять', 'ходить', 'бродить', 'стоять', 'сидеть', 'лежать', 'висеть', 'падать',
      
      // Глаголы чувств и эмоций
      'чувствовать', 'ощущать', 'переживать', 'страдать', 'мучить', 'радовать', 'печалить',
      'грустить', 'веселить', 'смеяться', 'плакать', 'рыдать', 'улыбаться', 'хмурить',
      'сердить', 'злить', 'раздражать', 'успокаивать', 'утешать', 'жалеть', 'сочувствовать',
      
      // Глаголы мышления и речи  
      'понимать', 'осознавать', 'представлять', 'воображать', 'мечтать', 'фантазировать',
      'вспоминать', 'помнить', 'забывать', 'узнавать', 'признавать', 'отрицать', 'соглашаться',
      'спорить', 'доказывать', 'объяснять', 'рассказывать', 'пересказывать', 'описывать',
      'молчать', 'шептать', 'кричать', 'орать', 'вопить', 'стонать', 'мычать', 'мямлить',
      
      // Глаголы работы и деятельности
      'трудиться', 'стараться', 'пытаться', 'пробовать', 'тестировать', 'проверять',
      'исправлять', 'чинить', 'ломать', 'разрушать', 'строить', 'создавать', 'творить',
      'изобретать', 'копировать', 'повторять', 'улучшать', 'ухудшать', 'менять', 'изменять',
      'превращать', 'преобразовывать', 'развивать', 'совершенствовать', 'модернизировать',
      
      // Глаголы быта
      'готовить', 'варить', 'жарить', 'печь', 'тушить', 'парить', 'кипятить', 'остужать',
      'греть', 'морозить', 'мыть', 'стирать', 'гладить', 'чистить', 'пылесосить', 'подметать',
      'убирать', 'наводить', 'пачкать', 'загрязнять', 'открывать', 'закрывать', 'запирать',
      'отпирать', 'включать', 'выключать', 'зажигать', 'гасить', 'поджигать', 'тушить',
      
      // Дополнительные глаголы
      'начинать', 'кончать', 'продолжать', 'прекращать', 'останавливать', 'прерывать',
      'откладывать', 'переносить', 'отменять', 'планировать', 'организовывать', 'управлять',
      'руководить', 'командовать', 'подчиняться', 'слушаться', 'повиноваться', 'сопротивляться',
      'бороться', 'сражаться', 'воевать', 'атаковать', 'защищать', 'охранять', 'беречь',
      'хранить', 'прятать', 'искать', 'находить', 'терять', 'обретать', 'приобретать'
    ],
    
    // Существительные (100+)
    nouns: [
      // Люди и семья
      'человек', 'мужчина', 'женщина', 'ребенок', 'младенец', 'подросток', 'юноша', 'девушка',
      'парень', 'девчонка', 'мальчик', 'девочка', 'старик', 'старуха', 'дедушка', 'бабушка',
      'отец', 'мать', 'папа', 'мама', 'сын', 'дочь', 'брат', 'сестра', 'дядя', 'тетя',
      'племянник', 'племянница', 'внук', 'внучка', 'муж', 'жена', 'супруг', 'супруга',
      'жених', 'невеста', 'свекор', 'свекровь', 'тесть', 'теща', 'зять', 'невестка',
      
      // Профессии и должности
      'врач', 'доктор', 'медсестра', 'фельдшер', 'хирург', 'терапевт', 'педиатр', 'психиатр',
      'учитель', 'преподаватель', 'профессор', 'ректор', 'директор', 'завуч', 'воспитатель',
      'инженер', 'программист', 'дизайнер', 'архитектор', 'строитель', 'плотник', 'электрик',
      'сантехник', 'водитель', 'пилот', 'капитан', 'моряк', 'космонавт', 'военный', 'солдат',
      'офицер', 'генерал', 'полицейский', 'следователь', 'прокурор', 'судья', 'адвокат',
      'бухгалтер', 'экономист', 'менеджер', 'секретарь', 'кассир', 'продавец', 'консультант',
      
      // Части тела
      'голова', 'лицо', 'лоб', 'глаз', 'бровь', 'ресница', 'веко', 'нос', 'ноздря', 'щека',
      'рот', 'губа', 'зуб', 'язык', 'десна', 'небо', 'подбородок', 'ухо', 'мочка', 'шея',
      'горло', 'плечо', 'рука', 'локоть', 'предплечье', 'запястье', 'кисть', 'ладонь', 'палец',
      'ноготь', 'грудь', 'спина', 'позвоночник', 'ребро', 'живот', 'пупок', 'талия', 'бедро',
      'нога', 'колено', 'голень', 'лодыжка', 'стопа', 'пятка', 'подошва', 'сердце', 'легкое',
      'печень', 'почка', 'желудок', 'кишечник', 'мозг', 'череп', 'кость', 'мышца', 'кожа',
      
      // Животные
      'кот', 'кошка', 'собака', 'пес', 'щенок', 'котенок', 'корова', 'бык', 'теленок', 'лошадь',
      'конь', 'жеребенок', 'свинья', 'поросенок', 'овца', 'баран', 'ягненок', 'коза', 'козел',
      'курица', 'петух', 'цыпленок', 'утка', 'гусь', 'индюк', 'кролик', 'заяц', 'волк', 'лиса',
      'медведь', 'тигр', 'лев', 'слон', 'жираф', 'зебра', 'обезьяна', 'крокодил', 'змея',
      'ящерица', 'черепаха', 'лягушка', 'жаба', 'рыба', 'акула', 'дельфин', 'кит', 'осьминог',
      
      // Растения и продукты
      'дерево', 'куст', 'трава', 'цветок', 'лист', 'ветка', 'ствол', 'корень', 'семя', 'плод',
      'яблоко', 'груша', 'апельсин', 'лимон', 'банан', 'виноград', 'арбуз', 'дыня', 'персик',
      'абрикос', 'слива', 'вишня', 'черешня', 'клубника', 'малина', 'смородина', 'крыжовник',
      'картофель', 'морковь', 'свекла', 'капуста', 'огурец', 'помидор', 'лук', 'чеснок', 'перец',
      'хлеб', 'молоко', 'масло', 'сыр', 'мясо', 'рыба', 'яйцо', 'сахар', 'соль', 'мука',
      
      // Предметы быта и техника
      'стол', 'стул', 'кресло', 'диван', 'кровать', 'шкаф', 'полка', 'ящик', 'дверь', 'окно',
      'пол', 'потолок', 'стена', 'крыша', 'лестница', 'ступень', 'перила', 'балкон', 'подвал',
      'телефон', 'компьютер', 'ноутбук', 'планшет', 'телевизор', 'холодильник', 'стиральная',
      'посудомоечная', 'микроволновка', 'плита', 'духовка', 'чайник', 'кофеварка', 'тостер',
      'утюг', 'пылесос', 'фен', 'машина', 'автомобиль', 'автобус', 'трамвай', 'троллейбус',
      'метро', 'поезд', 'самолет', 'вертолет', 'корабль', 'лодка', 'велосипед', 'мотоцикл',
      
      // Природа и география  
      'земля', 'небо', 'солнце', 'луна', 'звезда', 'планета', 'космос', 'вселенная', 'галактика',
      'море', 'океан', 'река', 'озеро', 'пруд', 'болото', 'ручей', 'водопад', 'гора', 'холм',
      'долина', 'ущелье', 'пещера', 'лес', 'поле', 'степь', 'пустыня', 'тундра', 'тайга',
      'остров', 'полуостров', 'материк', 'континент', 'страна', 'город', 'деревня', 'село',
      
      // Абстрактные понятия
      'время', 'пространство', 'жизнь', 'смерть', 'любовь', 'ненависть', 'дружба', 'вражда',
      'счастье', 'горе', 'радость', 'печаль', 'страх', 'смелость', 'надежда', 'отчаяние',
      'вера', 'сомнение', 'правда', 'ложь', 'добро', 'зло', 'красота', 'уродство', 'сила',
      'слабость', 'богатство', 'бедность', 'здоровье', 'болезнь', 'молодость', 'старость'
    ],
    
    // Прилагательные (100+)
    adjectives: [
      // Качества и характеристики
      'хороший', 'плохой', 'большой', 'маленький', 'новый', 'старый', 'молодой', 'красивый',
      'умный', 'глупый', 'добрый', 'злой', 'сильный', 'слабый', 'быстрый', 'медленный',
      'высокий', 'низкий', 'длинный', 'короткий', 'широкий', 'узкий', 'толстый', 'тонкий',
      'горячий', 'холодный', 'теплый', 'прохладный', 'мокрый', 'сухой', 'чистый', 'грязный',
      'светлый', 'темный', 'яркий', 'тусклый', 'громкий', 'тихий', 'твердый', 'мягкий',
      'острый', 'тупой', 'гладкий', 'шершавый', 'ровный', 'кривой', 'прямой', 'косой',
      
      // Цвета
      'белый', 'черный', 'серый', 'красный', 'оранжевый', 'желтый', 'зеленый', 'голубой',
      'синий', 'фиолетовый', 'розовый', 'коричневый', 'бежевый', 'золотой', 'серебряный',
      'алый', 'багровый', 'бордовый', 'малиновый', 'вишневый', 'лимонный', 'салатовый',
      'изумрудный', 'бирюзовый', 'лазурный', 'сиреневый', 'пурпурный', 'лиловый',
      
      // Эмоциональные состояния
      'веселый', 'грустный', 'радостный', 'печальный', 'счастливый', 'несчастный', 'довольный',
      'недовольный', 'спокойный', 'беспокойный', 'тревожный', 'уверенный', 'неуверенный',
      'смелый', 'трусливый', 'храбрый', 'робкий', 'гордый', 'скромный', 'наглый', 'застенчивый',
      'дружелюбный', 'враждебный', 'ласковый', 'грубый', 'нежный', 'жесткий', 'мягкий',
      
      // Интеллектуальные качества
      'умный', 'разумный', 'мудрый', 'сообразительный', 'находчивый', 'смекалистый', 'хитрый',
      'глупый', 'тупой', 'недалекий', 'ограниченный', 'талантливый', 'способный', 'одаренный',
      'гениальный', 'образованный', 'начитанный', 'эрудированный', 'невежественный',
      
      // Физические качества
      'здоровый', 'больной', 'крепкий', 'хилый', 'выносливый', 'усталый', 'бодрый', 'вялый',
      'энергичный', 'пассивный', 'подвижный', 'малоподвижный', 'гибкий', 'негибкий',
      'ловкий', 'неуклюжий', 'стройный', 'полный', 'худой', 'толстый', 'мускулистый',
      
      // Временные характеристики
      'древний', 'старинный', 'современный', 'модный', 'устаревший', 'вечный', 'временный',
      'постоянный', 'периодический', 'редкий', 'частый', 'ранний', 'поздний', 'своевременный',
      'преждевременный', 'запоздалый', 'мгновенный', 'долгий', 'краткий', 'бесконечный',
      
      // Оценочные
      'отличный', 'прекрасный', 'великолепный', 'замечательный', 'удивительный', 'чудесный',
      'восхитительный', 'потрясающий', 'ужасный', 'отвратительный', 'мерзкий', 'гадкий',
      'противный', 'приятный', 'неприятный', 'интересный', 'скучный', 'увлекательный',
      'захватывающий', 'волнующий', 'трогательный', 'забавный', 'смешной', 'серьезный'
    ]
  };
  
  // Генерируем формы глаголов с расширенным набором
  baseWords.verbs.forEach(verb => {
    russianWordsSet.add(verb); // инфинитив
    
    if (verb.endsWith('ть') || verb.endsWith('ти')) {
      const stem = verb.endsWith('ти') ? verb.slice(0, -2) : verb.slice(0, -2);
      
      // Настоящее время (1 спряжение)
      ['ю', 'ешь', 'ет', 'ем', 'ете', 'ют'].forEach(ending => {
        russianWordsSet.add(stem + ending);
      });
      
      // Настоящее время (2 спряжение)
      ['ю', 'ишь', 'ит', 'им', 'ите', 'ят'].forEach(ending => {
        russianWordsSet.add(stem + ending);
      });
      
      // Прошедшее время
      ['л', 'ла', 'ло', 'ли'].forEach(ending => {
        russianWordsSet.add(stem + ending);
      });
      
      // Будущее время
      ['буду', 'будешь', 'будет', 'будем', 'будете', 'будут'].forEach(aux => {
        russianWordsSet.add(aux + ' ' + verb);
        russianWordsSet.add(aux);
      });
      
      // Повелительное наклонение
      ['й', 'йте', 'и', 'ите', 'ь', 'ьте'].forEach(ending => {
        russianWordsSet.add(stem + ending);
      });
      
      // Причастия
      ['ющий', 'ящий', 'вший', 'ший', 'емый', 'имый', 'нный', 'тый'].forEach(ending => {
        russianWordsSet.add(stem + ending);
      });
      
      // Деепричастия
      ['я', 'а', 'в', 'вши', 'ши'].forEach(ending => {
        russianWordsSet.add(stem + ending);
      });
    }
  });
  
  // Генерируем расширенные падежные формы существительных
  baseWords.nouns.forEach(noun => {
    russianWordsSet.add(noun);
    
    // Падежные окончания для разных типов склонения
    const endings = {
      masculine: ['', 'а', 'у', 'ом', 'е', 'ы', 'ов', 'ам', 'ами', 'ах'],
      feminine: ['а', 'ы', 'е', 'у', 'ой', 'ою', 'е', 'ы', '', 'ам', 'ами', 'ах'],
      neuter: ['о', 'а', 'у', 'ом', 'е', 'а', '', 'ам', 'ами', 'ах']
    };
    
    // Применяем окончания
    Object.values(endings).forEach(endingSet => {
      endingSet.forEach(ending => {
        if (ending) {
          russianWordsSet.add(noun + ending);
          // Для слов на согласную
          if (noun.length > 3) {
            russianWordsSet.add(noun.slice(0, -1) + ending);
          }
          // Для слов на -а/-я
          if (noun.endsWith('а') || noun.endsWith('я')) {
            russianWordsSet.add(noun.slice(0, -1) + ending);
          }
        }
      });
    });
    
    // Множественное число
    ['и', 'ы', 'а', 'я', 'ья', 'ов', 'ев', 'ей', 'ий', 'ьев'].forEach(ending => {
      russianWordsSet.add(noun + ending);
      if (noun.length > 3) {
        russianWordsSet.add(noun.slice(0, -1) + ending);
      }
    });
    
    // Уменьшительно-ласкательные
    ['ик', 'ек', 'ок', 'чик', 'ушк', 'юшк', 'ишк', 'оньк', 'еньк'].forEach(suffix => {
      russianWordsSet.add(noun + suffix + 'а');
      russianWordsSet.add(noun + suffix + 'о');
    });
  });
  
  // Генерируем расширенные формы прилагательных
  baseWords.adjectives.forEach(adj => {
    const stems = [];
    
    if (adj.endsWith('ый')) stems.push(adj.slice(0, -2));
    else if (adj.endsWith('ий')) stems.push(adj.slice(0, -2));
    else if (adj.endsWith('ой')) stems.push(adj.slice(0, -2));
    else stems.push(adj);
    
    stems.forEach(stem => {
      // Полные формы
      const fullEndings = [
        'ый', 'ая', 'ое', 'ые', 'ого', 'ой', 'ого', 'ых', 'ому', 'ой', 'ому', 'ым',
        'ым', 'ой', 'ым', 'ыми', 'ом', 'ой', 'ом', 'ых'
      ];
      
      fullEndings.forEach(ending => {
        russianWordsSet.add(stem + ending);
      });
      
      // Краткие формы
      russianWordsSet.add(stem);
      ['а', 'о', 'ы', 'и'].forEach(ending => {
        russianWordsSet.add(stem + ending);
      });
      
      // Сравнительная степень
      ['ее', 'ей', 'е', 'ше'].forEach(ending => {
        russianWordsSet.add(stem + ending);
      });
      russianWordsSet.add('более ' + adj);
      russianWordsSet.add('менее ' + adj);
      
      // Превосходная степень
      ['ейший', 'ейшая', 'ейшее', 'ейшие', 'айший', 'айшая', 'айшее', 'айшие'].forEach(ending => {
        russianWordsSet.add(stem + ending);
      });
      russianWordsSet.add('самый ' + adj);
      russianWordsSet.add('наиболее ' + adj);
      russianWordsSet.add('наименее ' + adj);

      // НАРЕЧИЯ от прилагательных (на -о)
      russianWordsSet.add(stem + 'о');
    });
  });

  // Добавляем числительные (расширенный набор)
  // Количественные
  for (let i = 0; i <= 1000; i++) {
    russianWordsSet.add(i.toString());
  }
  
  const numbers = [
    'ноль', 'один', 'два', 'три', 'четыре', 'пять', 'шесть', 'семь', 'восемь', 'девять',
    'десять', 'одиннадцать', 'двенадцать', 'тринадцать', 'четырнадцать', 'пятнадцать',
    'шестнадцать', 'семнадцать', 'восемнадцать', 'девятнадцать', 'двадцать', 'тридцать',
    'сорок', 'пятьдесят', 'шестьдесят', 'семьдесят', 'восемьдесят', 'девяносто', 'сто',
    'двести', 'триста', 'четыреста', 'пятьсот', 'шестьсот', 'семьсот', 'восемьсот',
    'девятьсот', 'тысяча', 'миллион', 'миллиард', 'триллион'
  ];
  
  numbers.forEach(num => {
    russianWordsSet.add(num);
    // Падежные формы числительных
    if (num !== 'сорок' && num !== 'сто') {
      ['и', 'ью', 'ьюдесятью', 'ами', 'ах'].forEach(ending => {
        russianWordsSet.add(num + ending);
      });
    }
  });
  
  // Порядковые числительные
  const ordinals = [
    'первый', 'второй', 'третий', 'четвертый', 'пятый', 'шестой', 'седьмой', 'восьмой',
    'девятый', 'десятый', 'одиннадцатый', 'двенадцатый', 'тринадцатый', 'четырнадцатый',
    'пятнадцатый', 'шестнадцатый', 'семнадцатый', 'восемнадцатый', 'девятнадцатый',
    'двадцатый', 'тридцатый', 'сороковой', 'пятидесятый', 'шестидесятый', 'семидесятый',
    'восьмидесятый', 'девяностый', 'сотый', 'тысячный', 'миллионный', 'миллиардный'
  ];
  
  ordinals.forEach(ord => {
    const stem = ord.endsWith('ый') ? ord.slice(0, -2) : ord.slice(0, -2);
    ['ый', 'ая', 'ое', 'ые', 'ого', 'ой', 'ых', 'ому', 'ым', 'ом'].forEach(ending => {
      russianWordsSet.add(stem + ending);
    });
  });
  
  // Местоимения (расширенный набор)
  const pronouns = ['я', 'ты', 'он', 'она', 'оно', 'мы', 'вы', 'они'];
  const pronounCases: { [key: string]: string[] } = {
    'я': ['меня', 'мне', 'мной', 'мною', 'обо мне'],
    'ты': ['тебя', 'тебе', 'тобой', 'тобою', 'о тебе'],
    'он': ['его', 'ему', 'им', 'него', 'нему', 'ним', 'о нем'],
    'она': ['ее', 'её', 'ей', 'ею', 'нее', 'неё', 'ней', 'нею', 'о ней'],
    'оно': ['его', 'ему', 'им', 'него', 'нему', 'ним', 'о нем'],
    'мы': ['нас', 'нам', 'нами', 'о нас'],
    'вы': ['вас', 'вам', 'вами', 'о вас'],
    'они': ['их', 'им', 'ими', 'них', 'ним', 'ними', 'о них']
  };
  
  pronouns.forEach(pronoun => {
    russianWordsSet.add(pronoun);
    if (pronounCases[pronoun]) {
      pronounCases[pronoun].forEach((form: string) => russianWordsSet.add(form));
    }
  });
  
  // Притяжательные местоимения
  const possessives = ['мой', 'твой', 'его', 'её', 'ее', 'наш', 'ваш', 'их', 'свой'];
  possessives.forEach(poss => {
    if (poss.endsWith('ой') || poss.endsWith('аш')) {
      const stem = poss.slice(0, -2);
      ['ой', 'оя', 'оё', 'ои', 'оего', 'оей', 'оих', 'оему', 'оим', 'оём'].forEach(ending => {
        russianWordsSet.add(stem + ending);
      });
    } else {
      russianWordsSet.add(poss);
    }
  });
  
  // Указательные местоимения
  const demonstratives = ['этот', 'тот', 'такой', 'таков', 'столько'];
  demonstratives.forEach(dem => {
    if (dem.endsWith('от') || dem.endsWith('ой')) {
      const stem = dem.slice(0, -2);
      ['от', 'та', 'то', 'ти', 'ого', 'ой', 'их', 'ому', 'им', 'ом'].forEach(ending => {
        russianWordsSet.add(stem + ending);
      });
    } else {
      russianWordsSet.add(dem);
    }
  });
  
  // Города России (топ 100)
  const cities = [
    'москва', 'санкт-петербург', 'петербург', 'питер', 'спб', 'новосибирск', 'екатеринбург',
    'нижний новгород', 'казань', 'челябинск', 'омск', 'самара', 'ростов-на-дону', 'уфа',
    'красноярск', 'пермь', 'воронеж', 'волгоград', 'краснодар', 'саратов', 'тюмень',
    'тольятти', 'ижевск', 'барнаул', 'ульяновск', 'иркутск', 'хабаровск', 'ярославль',
    'владивосток', 'махачкала', 'томск', 'оренбург', 'кемерово', 'новокузнецк', 'рязань',
    'астрахань', 'набережные челны', 'пенза', 'липецк', 'киров', 'чебоксары', 'калининград',
    'брянск', 'курск', 'иваново', 'магнитогорск', 'улан-удэ', 'тверь', 'ставрополь',
    'нижний тагил', 'белгород', 'архангельск', 'владимир', 'сочи', 'симферополь', 'севастополь',
    'калуга', 'смоленск', 'волжский', 'якутск', 'саранск', 'череповец', 'курган', 'вологда',
    'орел', 'владикавказ', 'чита', 'мурманск', 'тамбов', 'кострома', 'стерлитамак',
    'грозный', 'петрозаводск', 'нижневартовск', 'йошкар-ола', 'новороссийск', 'балашиха',
    'химки', 'подольск', 'королев', 'мытищи', 'люберцы', 'красногорск', 'электросталь',
    'коломна', 'одинцово', 'домодедово', 'серпухов', 'щелково', 'орехово-зуево', 'раменское',
    'долгопрудный', 'жуковский', 'пушкино', 'сергиев посад', 'ногинск', 'клин', 'дубна'
  ];
  
  cities.forEach(city => {
    russianWordsSet.add(city);
    // Добавляем варианты с предлогами
    ['в', 'из', 'до', 'через', 'около', 'возле', 'у', 'под', 'над'].forEach(prep => {
      russianWordsSet.add(prep + ' ' + city);
    });
  });
  
  // Страны
  const countries = [
    'россия', 'украина', 'беларусь', 'казахстан', 'узбекистан', 'таджикистан', 'киргизия',
    'туркменистан', 'азербайджан', 'армения', 'грузия', 'молдова', 'латвия', 'литва',
    'эстония', 'сша', 'америка', 'канада', 'мексика', 'бразилия', 'аргентина', 'чили',
    'китай', 'япония', 'корея', 'индия', 'пакистан', 'иран', 'турция', 'египет',
    'германия', 'франция', 'италия', 'испания', 'португалия', 'англия', 'британия',
    'ирландия', 'шотландия', 'польша', 'чехия', 'словакия', 'венгрия', 'румыния',
    'болгария', 'греция', 'швеция', 'норвегия', 'финляндия', 'дания', 'исландия',
    'швейцария', 'австрия', 'бельгия', 'нидерланды', 'голландия', 'австралия'
  ];
  
  countries.forEach(country => {
    russianWordsSet.add(country);
    // Падежные формы
    if (country.endsWith('ия')) {
      const stem = country.slice(0, -2);
      ['ии', 'ию', 'ией', 'иею'].forEach(ending => {
        russianWordsSet.add(stem + ending);
      });
    }
  });
  
  // Имена (топ 100 мужских и женских)
  const maleNames = [
    'александр', 'алексей', 'андрей', 'антон', 'артем', 'артур', 'борис', 'вадим',
    'валентин', 'валерий', 'василий', 'виктор', 'виталий', 'владимир', 'владислав',
    'вячеслав', 'геннадий', 'георгий', 'глеб', 'григорий', 'данил', 'даниил', 'денис',
    'дмитрий', 'евгений', 'егор', 'иван', 'игнат', 'игорь', 'илья', 'кирилл',
    'константин', 'лев', 'леонид', 'максим', 'марк', 'матвей', 'михаил', 'никита',
    'николай', 'олег', 'павел', 'петр', 'роман', 'руслан', 'семен', 'сергей',
    'станислав', 'степан', 'тимофей', 'тимур', 'федор', 'филипп', 'юрий', 'ярослав'
  ];
  
  const femaleNames = [
    'александра', 'алена', 'алина', 'алиса', 'алла', 'анастасия', 'ангелина', 'анна',
    'антонина', 'валентина', 'валерия', 'варвара', 'вера', 'вероника', 'виктория',
    'галина', 'дарья', 'диана', 'ева', 'евгения', 'екатерина', 'елена', 'елизавета',
    'жанна', 'зинаида', 'зоя', 'инна', 'ирина', 'карина', 'кристина', 'ксения',
    'лариса', 'лидия', 'лилия', 'любовь', 'людмила', 'маргарита', 'марина', 'мария',
    'надежда', 'наталья', 'нина', 'оксана', 'олеся', 'ольга', 'полина', 'раиса',
    'светлана', 'софья', 'софия', 'тамара', 'татьяна', 'ульяна', 'юлия', 'яна'
  ];
  
  [...maleNames, ...femaleNames].forEach(name => {
    russianWordsSet.add(name);
    // Уменьшительные формы
    if (name.endsWith('а') || name.endsWith('я')) {
      russianWordsSet.add(name.slice(0, -1) + 'ка');
      russianWordsSet.add(name.slice(0, -1) + 'очка');
      russianWordsSet.add(name.slice(0, -1) + 'енька');
      russianWordsSet.add(name.slice(0, -1) + 'юша');
    } else {
      russianWordsSet.add(name + 'ик');
      russianWordsSet.add(name + 'чик'); 
      russianWordsSet.add(name + 'ушка');
    }
    // Падежные формы
    if (name.endsWith('а')) {
      ['ы', 'е', 'у', 'ой', 'ою'].forEach(ending => {
        russianWordsSet.add(name.slice(0, -1) + ending);
      });
    } else if (name.endsWith('я')) {
      ['и', 'е', 'ю', 'ей', 'ею'].forEach(ending => {
        russianWordsSet.add(name.slice(0, -1) + ending);
      });
    } else {
      ['а', 'у', 'ом', 'е'].forEach(ending => {
        russianWordsSet.add(name + ending);
      });
    }
  });
  
  // Болезни и медицинские термины
  const medical = [
    'грипп', 'простуда', 'ангина', 'бронхит', 'пневмония', 'астма', 'аллергия', 'диабет',
    'гипертония', 'гипотония', 'инфаркт', 'инсульт', 'рак', 'опухоль', 'язва', 'гастрит',
    'колит', 'панкреатит', 'гепатит', 'цирроз', 'холецистит', 'аппендицит', 'артрит',
    'артроз', 'остеохондроз', 'радикулит', 'мигрень', 'эпилепсия', 'депрессия', 'невроз',
    'психоз', 'шизофрения', 'анемия', 'лейкоз', 'тромбоз', 'варикоз', 'геморрой',
    'цистит', 'пиелонефрит', 'камни', 'песок', 'отит', 'гайморит', 'синусит', 'ринит',
    'конъюнктивит', 'глаукома', 'катаракта', 'близорукость', 'дальнозоркость', 'астигматизм'
  ];
  
  medical.forEach(term => {
    russianWordsSet.add(term);
    // Падежные формы
    ['а', 'у', 'ом', 'е'].forEach(ending => {
      russianWordsSet.add(term + ending);
    });
  });
  
  // Лекарства
  const medicines = [
    'таблетка', 'пилюля', 'капсула', 'порошок', 'мазь', 'гель', 'крем', 'капли', 'спрей',
    'сироп', 'раствор', 'настойка', 'отвар', 'настой', 'микстура', 'суспензия', 'эмульсия',
    'пластырь', 'бинт', 'вата', 'марля', 'йод', 'зеленка', 'перекись', 'спирт',
    'анальгин', 'аспирин', 'парацетамол', 'ибупрофен', 'диклофенак', 'кеторол', 'но-шпа',
    'валидол', 'корвалол', 'валерьянка', 'пустырник', 'новопассит', 'афобазол', 'феназепам',
    'антибиотик', 'пенициллин', 'амоксициллин', 'азитромицин', 'цефтриаксон', 'левофлоксацин',
    'витамин', 'кальций', 'магний', 'железо', 'цинк', 'омега', 'пробиотик', 'пребиотик'
  ];
  
  medicines.forEach(med => {
    russianWordsSet.add(med);
    // Множественное число и падежи
    ['и', 'ам', 'ами', 'ах', 'у', 'ой', 'е'].forEach(ending => {
      russianWordsSet.add(med + ending);
    });
  });
  
  // Транспорт
  const transport = [
    'машина', 'автомобиль', 'автобус', 'троллейбус', 'трамвай', 'метро', 'поезд',
    'электричка', 'самолет', 'вертолет', 'корабль', 'теплоход', 'паром', 'яхта', 'лодка',
    'катер', 'байдарка', 'велосипед', 'мотоцикл', 'мопед', 'скутер', 'квадроцикл',
    'грузовик', 'фура', 'тягач', 'прицеп', 'полуприцеп', 'автокран', 'экскаватор',
    'бульдозер', 'трактор', 'комбайн', 'танк', 'бронетранспортер', 'джип', 'внедорожник',
    'седан', 'хэтчбек', 'универсал', 'купе', 'кабриолет', 'минивэн', 'микроавтобус',
    'такси', 'маршрутка', 'газель', 'скорая', 'пожарная', 'полицейская', 'эвакуатор'
  ];
  
  transport.forEach(vehicle => {
    russianWordsSet.add(vehicle);
    // Падежные формы
    ['а', 'у', 'ом', 'е', 'ы', 'ов', 'ам', 'ами', 'ах'].forEach(ending => {
      russianWordsSet.add(vehicle + ending);
    });
  });
  
  // Бытовые предметы
  const household = [
    'ложка', 'вилка', 'нож', 'тарелка', 'чашка', 'блюдце', 'стакан', 'кружка', 'бокал',
    'рюмка', 'кастрюля', 'сковорода', 'сковородка', 'чайник', 'кофейник', 'самовар',
    'миска', 'салатник', 'супница', 'соусник', 'сахарница', 'солонка', 'перечница',
    'полотенце', 'салфетка', 'скатерть', 'занавеска', 'штора', 'тюль', 'покрывало',
    'одеяло', 'подушка', 'простыня', 'наволочка', 'пододеяльник', 'матрас', 'плед',
    'ковер', 'палас', 'дорожка', 'коврик', 'мыло', 'шампунь', 'гель', 'паста',
    'щетка', 'расческа', 'фен', 'утюжок', 'плойка', 'бритва', 'пена', 'лосьон',
    'крем', 'дезодорант', 'духи', 'туалетная вода', 'помада', 'тушь', 'тени', 'пудра'
  ];
  
  household.forEach(item => {
    russianWordsSet.add(item);
    // Падежные формы и множественное число
    ['а', 'ы', 'е', 'у', 'ой', 'и', 'ам', 'ами', 'ах'].forEach(ending => {
      russianWordsSet.add(item + ending);
      if (item.endsWith('а')) {
        russianWordsSet.add(item.slice(0, -1) + ending);
      }
    });
  });
  
  // Добавляем предлоги
  const prepositions = [
    'в', 'на', 'с', 'из', 'к', 'от', 'по', 'до', 'за', 'под', 'над', 'перед',
    'между', 'около', 'возле', 'у', 'для', 'без', 'через', 'про', 'при', 'о', 'об',
    'обо', 'со', 'изо', 'ко', 'ото', 'подо', 'надо', 'передо', 'безо', 'изза',
    'из-за', 'из-под', 'по-над', 'по-за', 'вблизи', 'вглубь', 'вдоль', 'вместо',
    'вне', 'внутри', 'внутрь', 'возле', 'вокруг', 'впереди', 'вслед', 'вследствие'
  ];
  
  prepositions.forEach(prep => russianWordsSet.add(prep));
  
  // Союзы и частицы
  const particles = [
    'и', 'а', 'но', 'да', 'или', 'либо', 'то', 'не', 'ни', 'бы', 'ли', 'же',
    'ведь', 'вот', 'вон', 'это', 'именно', 'как раз', 'точно', 'прямо', 'просто',
    'лишь', 'только', 'уже', 'еще', 'ещё', 'даже', 'разве', 'неужели', 'ужели',
    'что', 'чтобы', 'как', 'когда', 'пока', 'если', 'хотя', 'несмотря', 'невзирая',
    'благодаря', 'согласно', 'вопреки', 'наперекор', 'навстречу', 'ввиду', 'вроде',
    'наподобие', 'насчет', 'насчёт', 'ради', 'сверх', 'среди', 'кроме', 'помимо'
  ];
  
  particles.forEach(part => russianWordsSet.add(part));
  
  // Наречия
  const adverbs = [
    'очень', 'слишком', 'чересчур', 'весьма', 'довольно', 'достаточно', 'вполне',
    'совсем', 'совершенно', 'абсолютно', 'полностью', 'целиком', 'насквозь', 'вдоль',
    'поперек', 'наискось', 'навзничь', 'ничком', 'вверх', 'вниз', 'вперед', 'назад',
    'влево', 'вправо', 'налево', 'направо', 'туда', 'сюда', 'оттуда', 'отсюда',
    'везде', 'всюду', 'нигде', 'никуда', 'где-то', 'куда-то', 'откуда-то', 'где-нибудь',
    'всегда', 'никогда', 'иногда', 'когда-то', 'когда-нибудь', 'сейчас', 'теперь',
    'тогда', 'потом', 'после', 'скоро', 'вскоре', 'сразу', 'немедленно', 'тотчас',
    'быстро', 'медленно', 'тихо', 'громко', 'хорошо', 'плохо', 'отлично', 'ужасно'
  ];
  
  adverbs.forEach(adv => russianWordsSet.add(adv));

  // Добавляем частоупотребительные слова которые могут не сгенерироваться
  const commonWords = [
    'тело', 'забыла', 'забыл', 'забыли', 'совсем', 'про', 'забыть'
  ];
  commonWords.forEach(word => russianWordsSet.add(word));
}

// Загружаем словарь при старте
loadRussianDictionary();

// Экспортируем для тестирования (только в dev режиме)
export const getRussianWordsCount = () => russianWordsSet.size;

interface RudeResponse {
  isRude: boolean;
  response?: string;
  needsCounter?: boolean;
}

// Счетчик для набора букв (в памяти)
const keyboardSpamCounter = new Map<number, number>();

// Очищаем старые записи каждые 30 минут
setInterval(() => {
  keyboardSpamCounter.clear();
}, 30 * 60 * 1000);

// Загружаем и парсим промпт при старте
const rudePhrasesData = loadRudePhrases();

function loadRudePhrases(): Map<string, { phrases: Set<string>, response: string }> {
  try {
    const promptPath = path.join(process.cwd(), 'assets', 'prompts', 'wtf');
    const content = readFileSync(promptPath, 'utf-8');
    const lines = content.split('\n');
    
    const categories = new Map<string, { phrases: Set<string>, response: string }>();
    let currentCategory = '';
    let currentResponse = '';
    let collectingPhrases = false;
    let skipUntilCategory = false;
    
    for (const line of lines) {
      const trimmed = line.trim();
      
      // Пропускаем пустые строки и разделители
      if (!trimmed || trimmed === '---') {
        skipUntilCategory = false;
        continue;
      }
      
      // Пропускаем заголовки и пояснения до категорий
      if (trimmed.includes('ПРЯМЫЕ ОТКАЗЫ') || trimmed.includes('ГРУБЫЕ ПОСЛАНИЯ')) {
        skipUntilCategory = true;
        continue;
      }
      
      // Определяем категорию и ответ - ищем паттерн "КАТЕГОРИЯ - "ответ""
      if (!trimmed.startsWith('-') && trimmed.includes(' - "') && trimmed.endsWith('"')) {
        // Убираем эмодзи из начала строки
        const cleanLine = trimmed.replace(/^[🚫⏭️🖕😤🙄🎭🤬🎯😩]+\s*/, '');
        const match = cleanLine.match(/^(.+?)\s*-\s*"(.+)"$/);
        if (match) {
          currentCategory = match[1].trim();
          currentResponse = match[2];
          categories.set(currentCategory, { phrases: new Set(), response: currentResponse });
          collectingPhrases = true;
          skipUntilCategory = false;
          continue;
        }
      }
      
      // Специальная обработка для ответов на несколько строк (например, список ответов)
      if (trimmed.startsWith('"') && trimmed.endsWith('"') && !trimmed.includes(' - ')) {
        // Это может быть один из вариантов ответов, пропускаем
        continue;
      }
      
      // Собираем фразы
      if (collectingPhrases && trimmed.startsWith('-') && !skipUntilCategory) {
        const phrasesLine = trimmed.substring(1).trim();
        // Разбираем строку с фразами в кавычках
        const phrases = phrasesLine.match(/"[^"]+"/g);
        if (phrases) {
          const categoryData = categories.get(currentCategory);
          if (categoryData) {
            phrases.forEach(phrase => {
              // Убираем кавычки и добавляем в Set
              categoryData.phrases.add(phrase.slice(1, -1).toLowerCase());
            });
          }
        }
      } else if (collectingPhrases && !trimmed.startsWith('-') && !trimmed.startsWith('"')) {
        // Конец списка фраз
        collectingPhrases = false;
      }
    }
    
    // Логируем для отладки
    botLogger.info({ categoriesCount: categories.size }, 'Загружено категорий из промпта');
    categories.forEach((data, category) => {
      botLogger.debug({ category, phrasesCount: data.phrases.size, response: data.response }, 'Загружена категория');
    });
    
    // Парсим категории с обзывательствами из промпта
    if (!categories.has('ИНТЕЛЛЕКТУАЛЬНЫЕ ОСКОРБЛЕНИЯ')) {
      // Добавляем из промпта обзывательства с "ты"
      const intellectualInsults = ['ты тупой', 'ты тупица', 'ты тупень', 'ты тупак',
        'ты дебил', 'ты дебилоид', 'ты дэбил', 'ты идиот', 'ты идиотина', 'ты идиотище',
        'ты дурак', 'ты дурень', 'ты дурачок', 'ты кретин', 'ты кретиноид', 'ты кретинище',
        'ты имбецил', 'ты олигофрен', 'ты даун', 'ты отсталый', 'ты умственно отсталый',
        'ты недоразвитый', 'ты слабоумный', 'ты тормоз', 'ты тугодум', 'ты бестолковый',
        'ты безмозглый', 'ты пустоголовый'];
      
      const rudeInsults = ['ты мудак', 'ты мудила', 'ты мудло', 'ты мудозвон',
        'ты козел', 'ты козлина', 'ты козляра', 'ты козлище',
        'ты говнюк', 'ты говнарь', 'ты говноед',
        'ты гандон', 'ты пидор', 'ты пидрила', 'ты педрила',
        'ты ублюдок', 'ты выблядок', 'ты ебанат', 'ты ебанашка',
        'ты долбоеб', 'ты долбанутый', 'ты ебанутый',
        'ты хуесос', 'ты хуйло', 'ты хуеплет', 'ты хуепутало',
        'ты пидорас', 'ты петух', 'ты петушара',
        'ты уебан', 'ты уебок', 'ты уебище',
        'ты пиздабол', 'ты пиздобол', 'ты придурок', 'ты блядина', 
        'ты уёбок', 'ты ушлепок', 'ты ушлёпок'];
      
      // Добавляем все обзывательства с "ты" в категорию ОБЗЫВАТЕЛЬСТВА
      const existingPhrases = categories.get('ОБЗЫВАТЕЛЬСТВА')?.phrases || new Set();
      [...intellectualInsults, ...rudeInsults].forEach(phrase => {
        existingPhrases.add(phrase.toLowerCase());
      });
      
      if (categories.has('ОБЗЫВАТЕЛЬСТВА')) {
        categories.get('ОБЗЫВАТЕЛЬСТВА')!.phrases = existingPhrases;
      }
    }
    
    // Если парсинг не сработал корректно, добавим базовые категории вручную
    if (categories.size < 10) {
      // ОДНОСЛОЖНЫЕ НЕТ
      categories.set('ОДНОСЛОЖНЫЕ НЕТ', {
        phrases: new Set(['нет', 'не', 'неа', 'не-а', 'неее', 'нееет', 'найн', 'ноу', 'no', 'nope', 'nah']),
        response: 'Ква! Давай все-таки поработаем'
      });
      
      // НЕ ХОЧУ
      categories.set('НЕ ХОЧУ/НЕ БУДУ', {
        phrases: new Set(['не хочу', 'не буду', 'не стану', 'не собираюсь']),
        response: 'Понимаю, не всегда хочется, но нужно сделать'
      });
      
      // ОТСТАНЬ/ОТВАЛИ
      categories.set('ОТСТАНЬ/ОТВАЛИ', {
        phrases: new Set(['отвали', 'отстань', 'отцепись', 'отвяжись', 
                         'отвали от меня', 'отстань от меня',
                         'отвали со своими заданиями', 'отстань со своими заданиями',
                         'отвали от меня со своими заданиями', 'отстань от меня со своими заданиями']),
        response: 'Я тут чтобы помочь тебе. Может тебе нужен небольшой перерыв 🧐'
      });
      
      // ИДИ КУДА ПОДАЛЬШЕ
      categories.set('ИДИ КУДА ПОДАЛЬШЕ', {
        phrases: new Set(['иди нахуй', 'иди на хуй', 'иди нах', 'идинах', 'пошел нахуй', 
                         'пошел на хуй', 'пошел нах', 'иди нахер', 'пошел нахер',
                         'да отъебись', 'отъебись', 'отьебись', 'отьёбись', 'отъебись от меня',
                         'че приебался', 'чё приебался', 'что приебался', 'чего приебался',
                         'че прибрался', 'че приёбался', 'чё приёбался',
                         'не еди мозги', 'не еби мозги', 'не еби мозг', 'не ебите мозги',
                         'вот приебался', 'ну приебался', 'приебался ко мне', 'приебался бля',
                         'хули пристал', 'хуле пристал', 'хули приебался', 'хуле приебался',
                         'хули пристала', 'хуле пристала', 'хули прицепился', 'хуле прицепился',
                         'да отвали', 'отвали нахуй', 'отвали нахер', 'съебись', 'съебись отсюда']),
        response: 'Давай искупаемся в болоте - говорят, плавание снимает стресс 😁'
      });
      
      // ОБЗЫВАТЕЛЬСТВА (без "ты")
      categories.set('ОБЗЫВАТЕЛЬСТВА', {
        phrases: new Set(['тупой', 'тупица', 'тупень', 'тупак', 'дебил', 'дебилоид', 
                         'идиот', 'идиотина', 'дурак', 'дурень', 'кретин', 'имбецил',
                         'мудак', 'мудила', 'мудло', 'козел', 'козлина', 'говнюк',
                         'гандон', 'пидор', 'пидрила', 'ублюдок', 'ебанат', 'долбоеб',
                         'хуесос', 'хуйло', 'хуеплет', 'хуёплет', 'пидорас', 'петух', 'лох', 'лошара', 'лузер',
                         'неудачник', 'слабак', 'урод', 'уродец', 'псих', 'психопат',
                         'шизик', 'больной', 'ненормальный', 'чокнутый', 'конченый',
                         'упоротый', 'наркоман', 'торчок', 'алкаш', 'мразь', 'подонок',
                         'отморозок', 'быдло', 'быдлан', 'гопник', 'изгой', 'отщепенец',
                         'задрот', 'ботан', 'девственник', 'инцел', 'бомж', 'нищеброд',
                         'раб', 'холоп', 'терпила', 'тряпка', 'кринж', 'зашквар',
                         'токсик', 'душнила', 'хейтер', 'тролль', 'фейк', 'бот', 'нпс',
                         'ламер', 'нуб', 'рак', 'школьник', 'позор', 'позорище',
                         'разочарование', 'недоразумение', 'ошибка', 'баг', 'глюк',
                         'кошмар', 'ужас', 'треш', 'отстой', 'бесполезный', 'никчемный',
                         // Новые обзывательства
                         'пиздабол', 'пиздобол', 'придурок', 'блядина', 'уебок', 'уёбок', 'ушлепок', 'ушлёпок',
                         // Добавляем обзывательства с "ты" как отдельные слова
                         'ты тупой', 'ты тупица', 'ты тупень', 'ты тупак',
                         'ты дебил', 'ты дебилоид', 'ты дэбил', 'ты идиот', 'ты идиотина', 'ты идиотище',
                         'ты дурак', 'ты дурень', 'ты дурачок', 'ты кретин', 'ты кретиноид', 'ты кретинище',
                         'ты имбецил', 'ты олигофрен', 'ты даун', 'ты отсталый', 'ты умственно отсталый',
                         'ты недоразвитый', 'ты слабоумный', 'ты тормоз', 'ты тугодум', 'ты бестолковый',
                         'ты безмозглый', 'ты пустоголовый', 'ты мудак', 'ты мудила', 'ты мудло', 'ты мудозвон',
                         'ты долбоеб', 'ты долбоёб',
                         // Новые обзывательства с "ты"
                         'ты пиздабол', 'ты пиздобол', 'ты придурок', 'ты блядина', 'ты уебок', 'ты уёбок', 'ты ушлепок', 'ты ушлёпок',
                         // Дополнительные обзывательства из промпта
                         'олигофрен', 'даун', 'отсталый', 'умственно отсталый', 'недоразвитый', 'слабоумный',
                         'тормоз', 'тугодум', 'бестолковый', 'безмозглый', 'пустоголовый', 'мудозвон', 'долбоёб',
                         'зануда', 'ты зануда', 'ну ты и зануда']),
        response: 'Обзывать лягуху - ну это как-то несерьезно 😕'
      });
      
      // КОРОТКИЕ РУГАТЕЛЬСТВА
      categories.set('КОРОТКИЕ РУГАТЕЛЬСТВА', {
        phrases: new Set(['говно', 'жопа', 'говно жопа', 'говно-жопа', 
                         'хуйня', 'хуйни', 'пизда', 'пиздец', 'блядь', 'бля', 
                         'хуй', 'хуя', 'хуи', 'пидор', 'ебать', 'ебал',
                         'нахуй', 'нахуя', 'похуй', 'хули', 'ахуй',
                         'черт', 'чёрт', 'ч.рт', 'ч..рт', 'ч...рт', 'чeрт', 'чepт',
                         'фигня', 'херня', 'хрень', 'хуетень', 'хуётень', 'хреновина', 'хернота', 'фигнюшка',
                         'ща', 'щас', 'сча', 'облом', 'какашка', 'какашки', 'кака',
                         'штош', 'што ш']),
        response: 'Давай чуточку подробнее 😅'
      });
      
      // БЕСИШЬ
      categories.set('БЕСИШЬ', {
        phrases: new Set(['бесишь', 'бесишь бля', 'бесиш', 'не беси', 'не беси меня']),
        response: 'Давай искупаемся в болоте - говорят, плавание снимает стресс 😁'
      });
      
      // ПРОПУСК/СКИП
      categories.set('ПРОПУСК/СКИП', { 
        phrases: new Set(['пас', 'пасс', 'pass', 'скип', 'скипаю', 'skip', 'скипну', 
                         'пропускаю', 'пропущу', 'пропуск', 'дальше', 'следующий', 
                         'некст', 'next', 'давай дальше', 'давай следующее', 
                         'минус этот', 'мимо', 'пролистываю', 'листаю дальше']),
        response: 'Важно сделать это задание' 
      });
      
      // НЕ ЗНАЮ/НЕ ПОНИМАЮ
      categories.set('НЕ ЗНАЮ', {
        phrases: new Set(['хз', 'чет хз', 'чёт хз', 'хуй знает', 'хуй его знает', 
                         'хуй пойми', 'хуй поймет', 'хуй поймёт', 'хер знает', 
                         'хер его знает', 'хер пойми', 'фиг знает', 'фиг его знает',
                         'черт знает', 'чёрт знает', 'черт его знает', 'бес его знает',
                         'пес его знает', 'пёс его знает', 'хрен знает', 'хрен его знает']),
        response: 'Постарайся все-таки подобрать слова. У тебя получится 💯'
      });
      
      // ВЕСЕЛЫЕ ОТКАЗЫ
      categories.set('ВЕСЕЛЫЕ ОТКАЗЫ', {
        phrases: new Set(['хуюшки', 'фигушки', 'нифигушки', 'нифига', 'нифигашеньки', 
                         'нифигулечки', 'фигулечки', 'хренушки', 'хренули', 'нихренули',
                         'хуюшеньки', 'хуюшечки', 'фигушеньки', 'нифигушеньки',
                         'ни фига', 'нифига', 'ни хрена', 'нихрена', 'ни черта', 'ничерта',
                         'ага щас', 'ну да конечно', 'ну да, конечно', 'ага, конечно',
                         'ага, размечтался', 'нетушки', 'нет уж', 'ну уж нет',
                         'вот еще', 'еще чего', 'неть', 'неа', 'не скажу',
                         'ни за что', 'обойдешься', 'мимо кассы', 'не прокатит', 'обломись']),
        response: 'А вот и нет, давай отвечай 😁'
      });

      // БРЕД И ФИГНЯ
      categories.set('БРЕД И ФИГНЯ', {
        phrases: new Set(['бред', 'бред какой-то', 'бред какой то', 'фигня какая-то', 
                         'фигня какая то', 'херня какая-то', 'херня какая то',
                         'бла бла бла', 'бла', 'бла бла', 'блабла', 'бла-бла',
                         'блаа', 'блааа', 'лалала', 'лала', 'да епт', 'да ёпт']),
        response: 'Так не пойдет 😁'
      });
      
      botLogger.warn('Использованы базовые категории вместо промпта');
    }
    
    return categories;
  } catch (error) {
    botLogger.error({ error }, 'Ошибка загрузки фраз для rude-filter');
    return new Map();
  }
}

// Проверка на набор букв
function isKeyboardSpam(text: string): boolean {
  const normalized = text.trim().toLowerCase();
  
  // 1. ЯВНЫЙ СПАМ - сразу возвращаем true
  
  // Повторы одного символа (ааааа, ддддд)
  if (/(.)\1{2,}/.test(normalized) && normalized.length === normalized.match(/(.)\1*/)?.[0].length) {
    return true;
  }
  
  // Клавиатурные ряды (с исключением для "ыы")
  if (normalized !== 'ыы' && 
      (/^[йцукен]+$/.test(normalized) || // верхний ряд
       /^[фывапр]+$/.test(normalized) || // средний ряд  
       /^[ячсмит]+$/.test(normalized))) { // нижний ряд
    return true;
  }
  
  // Проверка на чередование клавиатурных рядов (для случаев типа "йывдао")
  if (/[йцукен][фывапр][йцукен]/.test(normalized) || 
      /[фывапр][йцукен][фывапр]/.test(normalized) ||
      /[ячсмит][фывапр][ячсмит]/.test(normalized)) {
    return true;
  }
  
  // Только согласные 4+ подряд
  if (/^[бвгджзйклмнпрстфхцчшщъь]{4,}$/.test(normalized)) {
    return true;
  }
  
  // 2. ПРОВЕРКА СЛОВАРЯ - если есть в словаре, сразу НЕ спам
  if (russianWordsSet.has(normalized)) {
    return false;
  }
  
  // 3. ЯВНЫЕ ПРИЗНАКИ СПАМА для неизвестных слов
  
  // Начинается с ы/ъ/ь (кроме "ыы")
  if (/^[ыъь]/.test(normalized) && normalized !== 'ыы') {
    return true;
  }
  
  // 4. КОРОТКИЕ СЛОВА (2-3 буквы)
  if (normalized.length <= 3) {
    const essentialShortWords = [
      // Базовые
      'да', 'не', 'нет', 'ну', 'и', 'а', 'но', 'то', 'бы', 'же', 'ли',
      'ох', 'ах', 'эх', 'ух', 'ой', 'ай', 'эй', 'фу', 'ау', 'увы',
      'ага', 'угу', 'хм', 'мм', 'эм', 'гм', 'хмм', 'ммм',
      // Эмоции и междометия
      'ого', 'ой', 'ай', 'эй', 'ау', 'фу', 'бе', 'фе', 'тьфу',
      'ыы', 'ээ', 'аа', 'оо', 'уу', 'ии', 'яя',
      // Вопросы
      'что', 'кто', 'где', 'как', 'так', 'там', 'тут', 'чей', 'чья',
      // Местоимения  
      'я', 'ты', 'он', 'она', 'оно', 'мы', 'вы', 'они', 'их', 'им', 'ей', 'ему',
      'наш', 'ваш', 'мой', 'твой', 'его', 'её', 'ее', 'сам', 'вся', 'все', 'всё',
      // Предлоги
      'в', 'на', 'с', 'о', 'об', 'к', 'ко', 'по', 'из', 'изо', 'за', 'до', 'для', 'при', 'про', 'без', 'под', 'над', 'от',
      // Базовые слова
      'дом', 'кот', 'пес', 'лес', 'сад', 'год', 'раз', 'два', 'три', 'сто', 'все', 'всё',
      'еда', 'чай', 'суп', 'сок', 'мир', 'сын', 'дед', 'баб', 'час', 'день', 'ночь', 'век', 'миг',
      'бог', 'душа', 'ум', 'зло', 'рай', 'ад', 'долг', 'честь', 'стыд', 'грех',
      // Глаголы короткие
      'был', 'жил', 'дал', 'шел', 'шёл', 'ел', 'пил', 'спи', 'жди', 'иди', 'дай', 'бей', 'пой',
      'мог', 'смог', 'стал', 'встал', 'сел', 'лёг', 'лег', 'пал', 'знал', 'взял',
      // Сленг и сокращения
      'лол', 'кек', 'рак', 'нуб', 'топ', 'изи', 'гг', 'вп', 'гл', 'хф',
      'ок', 'оке', 'хз', 'пф', 'щас', 'ща', 'че', 'чё', 'шо', 'чо', 'щаз',
      'спс', 'пжл', 'пж', 'мб', 'збс', 'имхо', 'пон', 'норм', 'лан',
      'прив', 'пок', 'бб', 'сорь', 'сори', 'плз', 'ясн', 'пнх',
      // Интернет сленг
      'кек', 'мем', 'лайк', 'бан', 'чат', 'пост', 'фейк', 'хейт', 'краш', 'вайб', 'мув', 'шип', 'фан',
      // Мат короткий
      'хуй', 'хуя', 'хуи', 'бля', 'блядь', 'еб', 'ебу', 'ебет', 'пизд', 'сука', 'мудак',
      // Дополнительные короткие
      'тип', 'типа', 'вид', 'род', 'сорт', 'срок', 'факт', 'акт', 'пакт', 'такт',
      'код', 'пин', 'ключ', 'парк', 'порт', 'борт', 'корт', 'торт', 'сорт',
      // Новые сокращения для повышения точности
      'вп', 'нз', 'нзч' // вполне, не за что
    ];
    
    return !essentialShortWords.includes(normalized);
  }
  
  // СПЕЦИАЛЬНАЯ ПРОВЕРКА ДЛЯ "СПС" - НЕ СПАМ НЕСМОТРЯ НА 0% ГЛАСНЫХ
  if (normalized === 'спс') {
    return false;
  }
  
  // 5. ДЛЯ СЛОВ 4+ БУКВ - углубленная проверка
  // Базовая проверка структуры
  const vowels = (normalized.match(/[аеёиоуыэюя]/g) || []).length;
  const vowelRatio = vowels / normalized.length;
  
  // Слишком мало или слишком много гласных
  if (vowelRatio < 0.25 || vowelRatio > 0.7) {
    return true;
  }
  
  // Проверка на распространенные биграммы (ЗНАЧИТЕЛЬНО РАСШИРЕННЫЙ СПИСОК)
  const commonBigrams = [
    // Согласная + гласная
    'ст', 'но', 'то', 'на', 'ов', 'ни', 'ра', 'во', 'ко', 'де', 'по', 'ро', 'ре', 'ан', 'ти', 'ал',
    'ло', 'ла', 'ле', 'ли', 'лу', 'ля', 'лё', 'лы', 'лю', // л+гласная (для "тяжело", "дело")
    'ме', 'ми', 'мо', 'му', 'ма', 'мя', 'мё', 'мы', 'мю', // м+гласная
    'не', 'ни', 'нё', 'ню', 'ня', 'ны', 'ну', // н+гласная
    'се', 'си', 'со', 'са', 'сё', 'су', 'сы', 'ся', // с+гласная
    'те', 'ти', 'та', 'ту', 'тё', 'ты', 'тю', 'тя', // т+гласная (для "тяжело")
    'ве', 'ви', 'ва', 'во', 'вё', 'ву', 'вы', 'вя', 'вю', // в+гласная
    'же', 'жи', 'жа', 'жо', 'жу', 'жё', // ж+гласная (для "тяжело")
    'зе', 'зи', 'за', 'зо', 'зу', 'зя', 'зё', // з+гласная
    'ке', 'ки', 'ка', 'ко', 'ку', 'кё', 'кю', 'кя', // к+гласная
    'пе', 'пи', 'па', 'по', 'пу', 'пё', 'пы', 'пя', 'пю', // п+гласная
    'ре', 'ри', 'ра', 'ро', 'ру', 'рё', 'ры', 'ря', 'рю', // р+гласная
    'че', 'чи', 'ча', 'чо', 'чу', 'чё', 'чю', 'чя', // ч+гласная
    'ше', 'ши', 'ша', 'шо', 'шу', 'шё', // ш+гласная
    'ще', 'щи', 'ща', 'що', 'щу', 'щё', // щ+гласная

    // Гласная + согласная
    'ен', 'ер', 'ел', 'ем', 'ес', 'ет', 'еж', 'ез', 'ек', 'еп', 'ев', // е+согласная (для "тяжело")
    'ал', 'ам', 'ан', 'ар', 'ас', 'ат', 'ав', 'аж', 'аз', 'ак', 'ап', // а+согласная
    'ол', 'ом', 'он', 'ор', 'ос', 'от', 'ов', 'ож', 'оз', 'ок', 'оп', // о+согласная
    'ил', 'им', 'ин', 'ир', 'ис', 'ит', 'ив', 'иж', 'из', 'ик', 'ип', // и+согласная
    'ул', 'ум', 'ун', 'ур', 'ус', 'ут', 'уж', 'уз', 'ук', 'уп', 'ув', // у+согласная
    'ял', 'ям', 'ян', 'яр', 'яс', 'ят', 'яв', 'яж', 'яз', 'як', 'яп', // я+согласная

    // Окончания
    'ль', 'ть', 'ня', 'нь', 'мь', 'сь', 'зь', 'дь', 'бь', 'пь', 'вь', 'ць', // мягкий знак
    'ет', 'ит', 'ат', 'ют', 'ят', 'ут', 'от', 'ем', 'им', 'ом', // глагольные окончания
    'ый', 'ий', 'ой', 'ая', 'яя', 'ое', 'ее', 'ые', 'ие' // прилагательные окончания
  ];
  
  let bigramCount = 0;
  for (let i = 0; i < normalized.length - 1; i++) {
    const bigram = normalized.slice(i, i + 2);
    if (commonBigrams.includes(bigram)) {
      bigramCount++;
    }
  }
  
  // Для слов средней длины проверяем биграммы только если мало гласных
  if (normalized.length >= 5 && normalized.length <= 8) {
    // Если очень мало гласных И нет биграмм - вероятно спам
    if (vowelRatio < 0.3 && bigramCount === 0) {
      return true;
    }
  }
  
  // Проверка на чередование типов букв (высокая энтропия)
  let transitions = 0;
  let lastIsVowel = null;
  
  for (const char of normalized) {
    const isVowel = /[аеёиоуыэюя]/.test(char);
    if (lastIsVowel !== null && lastIsVowel !== isVowel) {
      transitions++;
    }
    lastIsVowel = isVowel;
  }
  
  // Слишком много чередований - признак случайного набора
  const transitionRatio = transitions / (normalized.length - 1);
  if (transitionRatio > 0.8) {
    return true;
  }
  
  // Проверка триграмм для средних слов
  if (normalized.length >= 5 && normalized.length <= 7) {
    const uncommonTrigrams = ['вкл', 'вкр', 'вкв', 'пвл', 'шыо', 'увк', 'увп', 'ывд', 'вда'];
    for (let i = 0; i < normalized.length - 2; i++) {
      const trigram = normalized.slice(i, i + 3);
      if (uncommonTrigrams.includes(trigram)) {
        return true;
      }
    }
  }
  
  // Усиленная проверка для 6-буквенных слов (для "йывдао")
  if (normalized.length === 6) {
    if (bigramCount === 0) {
      return true; // 6 букв без единой нормальной биграммы = спам
    }
    // СМЯГЧЕННОЕ ПРАВИЛО: если соотношение гласных нормальное (30-60%) И есть хоть 2 биграммы - не спам
    if (vowelRatio >= 0.3 && vowelRatio <= 0.6 && bigramCount >= 2) {
      return false;
    }
    if (bigramCount < 2 && vowelRatio < 0.35) {
      return true; // мало биграмм + мало гласных
    }
  }
  
  // Финальная проверка для слов 4-5 букв - если есть хотя бы одна гласная и структура похожа на слово
  if (normalized.length >= 4 && normalized.length <= 5) {
    // Если есть хоть одна распространенная биграмма - скорее всего не спам
    if (bigramCount > 0) {
      return false;
    }
    // Если соотношение гласных нормальное - тоже даем шанс
    if (vowelRatio >= 0.3 && vowelRatio <= 0.6) {
      return false;
    }
  }

  // ОБЩЕЕ ПРАВИЛО ДЛЯ ВСЕХ СЛОВ: если структура выглядит нормально - не спам
  // Нормальное слово: 30-60% гласных И хотя бы 1 биграмма на каждые 3 буквы
  const minBigramsExpected = Math.floor(normalized.length / 3);
  if (vowelRatio >= 0.3 && vowelRatio <= 0.6 && bigramCount >= minBigramsExpected) {
    return false;
  }

  // Если прошло все проверки - не спам
  return false;
}

// Проверка на другой язык
function isNonRussianText(text: string): boolean {
  const normalized = text.trim().toLowerCase();
  
  // Если есть русские буквы - это не "другой язык"
  if (/[а-яё]/i.test(normalized)) {
    return false;
  }
  
  // Если только латиница и это не короткое слово из белого списка
  const englishWords = ['ok', 'okay', 'yes', 'no', 'lol', 'omg', 'wtf'];
  if (/^[a-z\s]+$/i.test(normalized) && !englishWords.includes(normalized)) {
    return true;
  }
  
  return false;
}

// Получить ответ для набора букв с учетом счетчика
function getKeyboardSpamResponse(userId?: number): string {
  if (!userId) return "Кажется, ты сел на клавиатуру 😁";
  
  const count = (keyboardSpamCounter.get(userId) || 0) + 1;
  keyboardSpamCounter.set(userId, count);
  
  switch (count) {
    case 1:
      return "Кажется, ты сел на клавиатуру 😁";
    case 2:
      return "Неть, так не пойдет 🙈";
    case 3:
      return "Терпеливо жду ответ на задание 😌";
    default:
      return ""; // После 3-х раз молчим
  }
}

// Основная функция проверки
export function checkRudeMessage(text: string, userId?: number): RudeResponse {
  try {
    const normalized = text.trim().toLowerCase();
    
    // ГЛАВНОЕ ПРАВИЛО: проверяем только если это ЕДИНСТВЕННЫЙ текст в сообщении
    
    // 1. Сначала проверяем точные совпадения с фразами из списков
    for (const [category, data] of rudePhrasesData.entries()) {
      if (data.phrases.has(normalized)) {
        botLogger.info({ category, phrase: normalized }, 'Обнаружен грубый ответ');
        
        // Для категории ОБЗЫВАТЕЛЬСТВА выбираем рандомный ответ
        let response = data.response;
        if (category === 'ОБЗЫВАТЕЛЬСТВА') {
          const responses = [
            'Обзывать лягуху - ну это как-то несерьезно 😕',
            'Кто обзывается, тот сам так и называется 😅',
            'Ну и ладно, пойду поквакаю в другом месте 🥲',
            'Помогаешь-помогаешь, а они вон что 🤨',
            'Ну и сам тут разбирайся тогда 🤪',
            'Ква-ква, вот и поговорили 😄'
          ];
          response = responses[Math.floor(Math.random() * responses.length)];
        }
        
        return {
          isRude: true,
          response: response,
          needsCounter: false
        };
      }
    }
    
    // 2. Проверка на фразы из нескольких слов (учитывая знаки препинания)
    const words = normalized.split(/[\s,.:;!?]+/).filter(w => w.length > 0);
    if (words.length > 1) {
      // НОВОЕ ПРАВИЛО: для длинных предложений (10+ слов или 50+ символов) -
      // если только 1-2 слова похожи на спам - пропускаем! Явно что-то написано
      const isLongSentence = words.length >= 10 || normalized.length >= 50;

      // Для фраз проверяем только длинные слова (>3 букв) на явный спам
      const longWords = words.filter(w => w.length > 3);
      if (longWords.length > 0) {
        const spamWords = longWords.filter(word => isKeyboardSpam(word));

        // Для длинных предложений - пропускаем если спам слов мало (1-2)
        if (isLongSentence && spamWords.length <= 2) {
          botLogger.debug({
            text: normalized.substring(0, 100),
            wordsCount: words.length,
            spamWordsCount: spamWords.length
          }, '✅ Длинное предложение с 1-2 спам словами - пропускаем');
          return { isRude: false };
        }

        // Только если ВСЕ длинные слова - спам, то вся фраза - спам
        if (spamWords.length === longWords.length) {
          const response = getKeyboardSpamResponse(userId);
          if (response) {
            botLogger.info({ text: normalized, userId }, 'Обнаружен набор букв (все длинные слова)');
            return {
              isRude: true,
              response,
              needsCounter: true
            };
          }
        }
      }
      // Если есть хоть одно нормальное слово - фраза проходит
      return { isRude: false };
    }
    
    // 3. Проверка на другой язык (ТОЛЬКО если это весь текст)
    if (isNonRussianText(normalized)) {
      botLogger.info({ text: normalized }, 'Обнаружен текст на другом языке');
      return {
        isRude: true,
        response: "Я могу говорить только русский 🫠",
        needsCounter: false
      };
    }
    
    // 4. Проверка на набор букв (ТОЛЬКО если это весь текст)
    if (isKeyboardSpam(normalized)) {
      const response = getKeyboardSpamResponse(userId);
      if (response) {
        botLogger.info({ text: normalized, userId }, 'Обнаружен набор букв');
        return {
          isRude: true,
          response,
          needsCounter: true
        };
      }
    }
    
    // Если дошли сюда - это нормальный ответ
    return { isRude: false };
  } catch (error) {
    botLogger.error({ error }, 'Ошибка в checkRudeMessage');
    // При любой ошибке - считаем ответ нормальным
    return { isRude: false };
  }
}

// Сброс счетчика для пользователя (вызывать при получении нормального ответа)
export function resetKeyboardSpamCounter(userId: number): void {
  keyboardSpamCounter.delete(userId);
}