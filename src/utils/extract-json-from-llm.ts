import { botLogger } from '../logger';

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –æ–±–µ—Ä–Ω—É—Ç –≤ think —Ç–µ–≥–∏
 */
export function extractJsonFromLLM(text: string): string {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ null/undefined
  if (!text) {
    botLogger.warn('‚ö†Ô∏è extractJsonFromLLM –ø–æ–ª—É—á–∏–ª –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç');
    return '';
  }
  
  let processed = text.trim();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ LLM
  if (processed === 'HF_JSON_ERROR' || processed === 'ERROR' || processed.startsWith('Error:')) {
    botLogger.warn({ text: processed }, '‚ö†Ô∏è extractJsonFromLLM –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É –æ—Ç LLM');
    return processed;
  }
  
  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å { –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ }, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ —É–∂–µ —á–∏—Å—Ç—ã–π JSON
  if (processed.startsWith('{') && processed.endsWith('}')) {
    return processed;
  }
  
  
  // –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ò—â–µ–º JSON –≤ –±–ª–æ–∫–µ ```json ... ```
  const codeBlockJsonMatch = processed.match(/```json\s*([\s\S]*?)\s*```/i);
  if (codeBlockJsonMatch) {
    const jsonContent = codeBlockJsonMatch[1].trim();
    botLogger.debug({ 
      originalLength: text.length,
      extractedLength: jsonContent.length,
      source: 'code block'
    }, 'üîç –ù–∞–π–¥–µ–Ω JSON –≤ –±–ª–æ–∫–µ –∫–æ–¥–∞ ```json');
    return jsonContent;
  }
  
  // –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ think —Ç–µ–≥–∞
  const afterThinkMatch = processed.match(/<\/think>\s*(\{[\s\S]*\})/i);
  if (afterThinkMatch) {
    // –ò—â–µ–º —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON –ø–æ—Å–ª–µ think
    const afterThinkText = processed.substring(processed.indexOf('</think>') + 8);
    const jsonStart = afterThinkText.indexOf('{');
    
    if (jsonStart !== -1) {
      let braceCount = 0;
      let inString = false;
      let escapeNext = false;
      let jsonEnd = -1;
      
      for (let i = jsonStart; i < afterThinkText.length; i++) {
        const char = afterThinkText[i];
        
        if (escapeNext) {
          escapeNext = false;
          continue;
        }
        
        if (char === '\\') {
          escapeNext = true;
          continue;
        }
        
        if (char === '"' && !escapeNext) {
          inString = !inString;
          continue;
        }
        
        if (!inString) {
          if (char === '{') braceCount++;
          else if (char === '}') braceCount--;
          
          if (braceCount === 0 && i > jsonStart) {
            jsonEnd = i + 1;
            break;
          }
        }
      }
      
      if (jsonEnd !== -1) {
        const extractedJson = afterThinkText.substring(jsonStart, jsonEnd);
        botLogger.debug({ 
          originalLength: text.length,
          extractedLength: extractedJson.length,
          source: 'after think'
        }, 'üîç –ù–∞–π–¥–µ–Ω JSON –ø–æ—Å–ª–µ think —Ç–µ–≥–æ–≤');
        return extractedJson;
      }
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ JSON —Ä–∞–∑–±–∏—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –∫–ª—é—á–∞—Ö (deepseek-r1 issue)
  // –ù–∞–ø—Ä–∏–º–µ—Ä: { "probablybusy": false –≤–º–µ—Å—Ç–æ { "probably_busy": false
  const brokenJsonMatch = processed.match(/\{\s*"[^"]*"\s*:\s*[^}]*\}/i);
  if (brokenJsonMatch) {
    let fixedJson = brokenJsonMatch[0];
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ DeepSeek
    fixedJson = fixedJson.replace(/"probablybusy"/gi, '"probably_busy"');
    fixedJson = fixedJson.replace(/"busyreason"/gi, '"busy_reason"');
    fixedJson = fixedJson.replace(/"negativepart"/gi, '"negative_part"');
    fixedJson = fixedJson.replace(/"positivepart"/gi, '"positive_part"');
    fixedJson = fixedJson.replace(/"additionaltext"/gi, '"additional_text"');
    fixedJson = fixedJson.replace(/"feelsandemotions"/gi, '"feels_and_emotions"');
    fixedJson = fixedJson.replace(/"deepsupport"/gi, '"deep_support"');
    
    botLogger.debug({ 
      originalJson: brokenJsonMatch[0],
      fixedJson 
    }, 'üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω JSON —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏');
    return fixedJson;
  }
  
  // –ò—â–µ–º JSON —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º —Å–∫–æ–±–æ–∫
  const jsonStart = processed.indexOf('{');
  if (jsonStart !== -1) {
    // –ò—â–µ–º —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏
    let braceCount = 0;
    let inString = false;
    let escapeNext = false;
    let jsonEnd = -1;
    
    for (let i = jsonStart; i < processed.length; i++) {
      const char = processed[i];
      
      if (escapeNext) {
        escapeNext = false;
        continue;
      }
      
      if (char === '\\') {
        escapeNext = true;
        continue;
      }
      
      if (char === '"' && !escapeNext) {
        inString = !inString;
        continue;
      }
      
      if (!inString) {
        if (char === '{') braceCount++;
        else if (char === '}') braceCount--;
        
        if (braceCount === 0) {
          jsonEnd = i + 1;
          break;
        }
      }
    }
    
    if (jsonEnd !== -1) {
      const extractedJson = processed.substring(jsonStart, jsonEnd);
      
      botLogger.debug({ 
        originalLength: text.length,
        extractedLength: extractedJson.length,
        startsWithBrace: extractedJson.startsWith('{'),
        endsWithBrace: extractedJson.endsWith('}'),
        first100: extractedJson.substring(0, 100),
        last100: extractedJson.substring(Math.max(0, extractedJson.length - 100))
      }, 'üîç –ù–∞–π–¥–µ–Ω JSON —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∫–æ–±–∫–∞–º–∏');
      
      return extractedJson;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω–µ—Ü, –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç –æ—Ç –Ω–∞—á–∞–ª–∞ {
    const fallbackJson = processed.substring(jsonStart);
    botLogger.warn({ 
      textLength: fallbackJson.length,
      preview: fallbackJson.substring(0, 200) 
    }, '‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –æ—Ç {');
    
    return fallbackJson;
  }
  
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
  // –£–¥–∞–ª—è–µ–º think —Ç–µ–≥–∏
  processed = processed.replace(/<think>[\s\S]*?<\/think>/gi, '').trim();
  
  // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è think —Ç–µ–≥–æ–≤ –æ—Å—Ç–∞–ª—Å—è JSON
  if (processed.startsWith('{') && processed.endsWith('}')) {
    return processed;
  }
  
  // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—â–µ–º JSON-–ø–æ–¥–æ–±–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–æ–ª–µ–µ –≥–∏–±–∫–æ
  const flexibleJsonMatch = processed.match(/\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}/g);
  if (flexibleJsonMatch && flexibleJsonMatch.length > 0) {
    // –ë–µ—Ä–µ–º —Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π JSON
    const longestJson = flexibleJsonMatch.reduce((a, b) => a.length > b.length ? a : b);
    botLogger.debug({ 
      foundCount: flexibleJsonMatch.length,
      longestLength: longestJson.length 
    }, 'üîç –ù–∞–π–¥–µ–Ω JSON –≥–∏–±–∫–∏–º –ø–æ–∏—Å–∫–æ–º');
    return longestJson;
  }
  
  botLogger.warn({ 
    originalText: text.substring(0, 200),
    processed: processed.substring(0, 200) 
  }, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM');
  
  return processed || '';
}