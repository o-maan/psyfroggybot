import { botLogger } from '../logger';

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –æ–±–µ—Ä–Ω—É—Ç –≤ think —Ç–µ–≥–∏
 */
export function extractJsonFromLLM(text: string): string {
  let processed = text.trim();
  
  // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å { –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ }, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ —É–∂–µ —á–∏—Å—Ç—ã–π JSON
  if (processed.startsWith('{') && processed.endsWith('}')) {
    return processed;
  }
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –≤–Ω—É—Ç—Ä–∏ think —Ç–µ–≥–æ–≤
  const thinkMatch = processed.match(/<think>[\s\S]*?<\/think>/i);
  if (thinkMatch) {
    const thinkContent = thinkMatch[0];
    
    // –ò—â–µ–º JSON –≤–Ω—É—Ç—Ä–∏ think –±–ª–æ–∫–∞
    const jsonMatch = thinkContent.match(/\{[\s\S]*\}/);
    if (jsonMatch) {
      botLogger.debug({ 
        originalLength: text.length,
        extractedLength: jsonMatch[0].length 
      }, 'üîç –ò–∑–≤–ª–µ—á–µ–Ω JSON –∏–∑ think —Ç–µ–≥–æ–≤');
      return jsonMatch[0];
    }
  }
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–≥–æ think —Ç–µ–≥–∞
  const afterThinkMatch = processed.match(/<\/think>\s*(\{[\s\S]*\})/i);
  if (afterThinkMatch) {
    botLogger.debug({ 
      originalLength: text.length,
      extractedLength: afterThinkMatch[1].length 
    }, 'üîç –ù–∞–π–¥–µ–Ω JSON –ø–æ—Å–ª–µ think —Ç–µ–≥–æ–≤');
    return afterThinkMatch[1];
  }
  
  // –ò—â–µ–º JSON –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ —Ç–µ–∫—Å—Ç–∞
  const jsonAnywhere = processed.match(/\{[\s\S]*\}/);
  if (jsonAnywhere) {
    botLogger.debug({ 
      originalLength: text.length,
      extractedLength: jsonAnywhere[0].length 
    }, 'üîç –ù–∞–π–¥–µ–Ω JSON –≤ —Ç–µ–∫—Å—Ç–µ');
    return jsonAnywhere[0];
  }
  
  // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ ```json ... ```
  const codeBlockMatch = processed.match(/```json\s*([\s\S]*?)\s*```/i);
  if (codeBlockMatch) {
    return codeBlockMatch[1];
  }
  
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
  // –£–¥–∞–ª—è–µ–º think —Ç–µ–≥–∏
  processed = processed.replace(/<think>[\s\S]*?<\/think>/gi, '').trim();
  
  // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è think —Ç–µ–≥–æ–≤ –æ—Å—Ç–∞–ª—Å—è JSON
  if (processed.startsWith('{') && processed.endsWith('}')) {
    return processed;
  }
  
  botLogger.warn({ 
    originalText: text.substring(0, 200),
    processed: processed.substring(0, 200) 
  }, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM');
  
  return processed;
}