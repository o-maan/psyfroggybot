import { config } from 'dotenv';
import express, { Request, Response } from 'express';
import { Telegraf } from 'telegraf';
import { CalendarService, formatCalendarEvents, getUserTodayEvents } from './calendar.ts';
import {
  addUser,
  getLastBotMessage,
  getLastUserToken,
  getLogsCount,
  getLogsStatistics,
  getRecentLogs,
  getUnreadLogsCount,
  markAllLogsAsRead,
  markLogAsRead,
  saveMessage,
  saveUserToken,
} from './db.ts';
import { generateUserResponse, minimalTestLLM } from './llm.ts';
import { botLogger, logger } from './logger.ts';
import { Scheduler } from './scheduler.ts';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || '');

// –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
const calendarService = new CalendarService();
const scheduler = new Scheduler(bot, calendarService);

// --- Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Google OAuth2 callback –∏ REST ---
const restServ = express();
const SERVER_PORT = process.env.SERVER_PORT || process.env.PORT || 3456;
// const TELEGRAM_WEBHOOK_PORT = process.env.TELEGRAM_WEBHOOK_PORT || 8443;
// const TELEGRAM_WEBHOOK_PATH =
//   process.env.TELEGRAM_WEBHOOK_PATH || "/telegraf/webhook";
// const TELEGRAM_WEBHOOK_URL =
//   process.env.TELEGRAM_WEBHOOK_URL ||
//   `https://${
//     process.env.FLY_APP_NAME || "psyfroggybot-np0edq"
//   }.fly.dev:${TELEGRAM_WEBHOOK_PORT}${TELEGRAM_WEBHOOK_PATH}`;

// --- Telegraf webhook ---
// bot.telegram.setWebhook(TELEGRAM_WEBHOOK_URL);
// restServ.use(TELEGRAM_WEBHOOK_PATH, bot.webhookCallback(TELEGRAM_WEBHOOK_PATH));

restServ.use(express.json());

restServ.all('/oauth2callback', async (req: Request, res: Response) => {
  const code = req.query.code as string;
  const state = req.query.state as string;
  const chatId = Number(state);
  botLogger.debug({ chatId, codeLength: code?.length || 0 }, `OAuth callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
  if (!code) {
    res.status(400).send('No code provided');
    return;
  }
  if (!chatId || isNaN(chatId)) {
    res.status(400).send('Invalid chat ID in state parameter');
    return;
  }
  try {
    const tokens = await calendarService.getToken(code);
    saveUserToken(chatId, JSON.stringify(tokens));
    res.send('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É.');
    // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    logger.info({ chatId, code: code.substring(0, 10) + '...' }, 'OAuth —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω');
    await bot.telegram.sendMessage(chatId, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É.');
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack, chatId }, '–û—à–∏–±–∫–∞ OAuth —Ç–æ–∫–µ–Ω–∞');
    res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.');
  }
});

restServ.get('/status', (req: Request, res: Response) => {
  res.json({ status: 'up' });
});

restServ.all('/sendDailyMessage', async (req: Request, res: Response) => {
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
  try {
    await scheduler.sendDailyMessagesToAll(adminChatId);
    res
      .status(200)
      .send(`C–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${scheduler['users'].size}, –∞–¥–º–∏–Ω: ${adminChatId}`);
    logger.info({ usersCount: scheduler['users'].size }, '–†—É—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏');
    res.status(500).send(String(error));
  }
});

// 404
restServ.all('/', (req: Request, res: Response) => {
  res.status(404).send('Not found');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö (–¥–ª—è Fly.io)
restServ.listen(Number(SERVER_PORT), '0.0.0.0', () => {
  logger.info({ port: SERVER_PORT }, `üöÄ Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${SERVER_PORT}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async ctx => {
  const chatId = ctx.chat.id;
  const userId = ctx.from?.id || 0;
  botLogger.info({ userId, chatId }, `üì± –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
  scheduler.addUser(chatId);

  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ª—è–≥—É—à–∫–∞ üê∏\n\n' +
      '–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:30.\n' +
      '–ï—Å–ª–∏ —Ç—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏—à—å –≤ —Ç–µ—á–µ–Ω–∏–µ 1.5 —á–∞—Å–æ–≤, —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\n' +
      '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '/fro - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–π—á–∞—Å\n' +
      '/calendar - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n\n' +
      '–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '/status - —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞\n' +
      '/logs - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤\n' +
      '/test_schedule - —Ç–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –º–∏–Ω—É—Ç—É\n' +
      '/test_now - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n' +
      '/minimalTestLLM - —Ç–µ—Å—Ç LLM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test
bot.command('test', async ctx => {
  const chatId = ctx.chat.id;
  const fromId = ctx.from?.id;
  botLogger.info({ userId: fromId || 0, chatId }, `üì± –ö–æ–º–∞–Ω–¥–∞ /test –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${fromId}`);
  await scheduler.sendDailyMessage(fromId);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /sendnow
bot.command('sendnow', async ctx => {
  const chatId = ctx.chat.id;
  const targetTime = new Date();
  targetTime.setHours(15, 38, 0, 0);

  scheduler.scheduleOneTimeMessage(chatId, targetTime);
  await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ 15:38!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /fro
bot.command('fro', async ctx => {
  const chatId = ctx.chat.id;
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–µ–º –∂–µ –ø—Ä–∞–≤–∏–ª–∞–º, —á—Ç–æ –∏ –¥–ª—è 19:30
  const message = await scheduler.generateScheduledMessage(chatId);
  const imagePath = scheduler.getNextImage(chatId);
  const caption = message.length > 1024 ? undefined : message;
  await bot.telegram.sendPhoto(
    scheduler.CHANNEL_ID,
    { source: imagePath },
    {
      caption,
      parse_mode: 'HTML',
    }
  );
  if (message.length > 1024) {
    await bot.telegram.sendMessage(scheduler.CHANNEL_ID, message, {
      parse_mode: 'HTML',
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /remind
bot.command('remind', async ctx => {
  const chatId = ctx.chat.id;
  const sentTime = new Date().toISOString();
  scheduler.setReminder(chatId, sentTime);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /calendar
bot.command('calendar', async ctx => {
  const chatId = ctx.chat.id;
  // Save user if not exists
  addUser(chatId, ctx.from?.username || '');
  const lastToken = getLastUserToken(chatId);
  if (lastToken) {
    logger.debug({ chatId, hasToken: !!lastToken }, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
    try {
      calendarService.setToken(JSON.parse(lastToken.token));
      // Get events for yesterday and today
      const now = new Date();
      const yesterday = new Date(now);
      yesterday.setDate(now.getDate() - 1);
      const start = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate());
      const end = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
      const events = await calendarService.getEvents(start.toISOString(), end.toISOString());
      if (events && events.length > 0) {
        const eventsList = formatCalendarEvents(events, {
          locale: 'ru-RU',
          showDate: true,
          showBusy: true,
          showLocation: true,
          showDescription: true,
          showLink: true,
        });
        await ctx.reply(`–°–æ–±—ã—Ç–∏—è –∑–∞ –≤—á–µ—Ä–∞ –∏ —Å–µ–≥–æ–¥–Ω—è:\n\n${eventsList}`, {
          parse_mode: 'HTML',
        });
      } else {
        await ctx.reply('–°–æ–±—ã—Ç–∏–π –∑–∞ –≤—á–µ—Ä–∞ –∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.');
      }
      return;
    } catch (e) {
      const error = e as Error;
      botLogger.error({ error: error.message, stack: error.stack, chatId }, '–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }
  // Pass chatId in state
  const authUrl = calendarService.getAuthUrl({ state: chatId.toString() });
  await ctx.reply(
    '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:\n' +
      authUrl +
      '\n\n' +
      '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ —è –ø–æ–ª—É—á—É —Ç–æ–∫–µ–Ω.'
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ LLM
bot.command('minimalTestLLM', async ctx => {
  await ctx.reply('–í—ã–ø–æ–ª–Ω—è—é –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç LLM...');
  const result = await minimalTestLLM();
  if (result) {
    await ctx.reply('–û—Ç–≤–µ—Ç LLM:\n' + result);
  } else {
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–±–∞–≥–∞ –∏–Ω–¥–µ–∫—Å–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
bot.command('next_image', async ctx => {
  const chatId = ctx.chat.id;
  try {
    const imagePath = scheduler.getNextImage(chatId);
    await ctx.replyWithPhoto(
      { source: imagePath },
      {
        caption: `Next image for chatId=${chatId}\n–ü—É—Ç—å: ${imagePath}`,
      }
    );
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack, chatId }, '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã next_image');
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏: ' + error);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
bot.command('status', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  const status = scheduler.getSchedulerStatus();

  await ctx.reply(
    `üìä <b>–°–¢–ê–¢–£–° –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê</b>\n\n` +
      `‚öôÔ∏è Cron job: ${status.isRunning ? 'üü¢ <b>–ê–∫—Ç–∏–≤–µ–Ω</b>' : 'üî¥ <b>–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>'}\n` +
      `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: <code>${status.description}</code>\n` +
      `üïê –í—ã—Ä–∞–∂–µ–Ω–∏–µ: <code>${status.cronExpression}</code>\n` +
      `üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <code>${status.timezone}</code>\n\n` +
      `üïê <b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö):</b> <code>${status.currentTime}</code>\n` +
      `‚è∞ <b>–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫:</b> <code>${status.nextRunTime}</code>\n\n` +
      `üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${status.usersCount}\n` +
      `üîë <b>Admin ID:</b> <code>${status.adminChatId}</code>\n` +
      `üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n<code>${
        status.usersList.length > 0 ? status.usersList.join(', ') : '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
      }</code>`,
    { parse_mode: 'HTML' }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
bot.command('test_schedule', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π cron job –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –º–∏–Ω—É—Ç—É
  const now = new Date();
  const nextMinute = (now.getMinutes() + 1) % 60;
  const nextHour = nextMinute === 0 ? now.getHours() + 1 : now.getHours();
  const cronExpression = `${nextMinute} ${nextHour} * * *`;

  await ctx.reply(
    `üß™ <b>–¢–ï–°–¢ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê</b>\n\n` +
      `‚è±Ô∏è Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: <code>${cronExpression}</code>\n` +
      `üïê –ó–∞–ø—É—Å–∫ –≤: <code>${String(nextHour).padStart(2, '0')}:${String(nextMinute).padStart(2, '0')}</code>\n` +
      `üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <code>Europe/Moscow</code>\n\n` +
      `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...`,
    { parse_mode: 'HTML' }
  );

  const testJob = require('node-cron').schedule(
    cronExpression,
    async () => {
      try {
        logger.info('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ cron job');
        await scheduler.sendDailyMessage(chatId);
        await ctx.reply('‚úÖ üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        testJob.stop();
        testJob.destroy();
      } catch (e) {
        const error = e as Error;
        botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ cron job');
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n<code>${error}</code>`, { parse_mode: 'HTML' });
        testJob.stop();
        testJob.destroy();
      }
    },
    {
      scheduled: true,
      timezone: 'Europe/Moscow',
    }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
bot.command('test_now', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  await ctx.reply('üß™ <b>–ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –¢–ï–°–¢ –†–ê–°–°–´–õ–ö–ò</b>\n\n–ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å...', { parse_mode: 'HTML' });

  try {
    logger.info('–ó–∞–ø—É—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏');
    await scheduler.sendDailyMessagesToAll(adminChatId);
    await ctx.reply('‚úÖ üß™ –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏');
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ —Ä–∞—Å—Å—ã–ª–∫–∏:\n<code>${error}</code>`, {
      parse_mode: 'HTML',
    });
  }
});

// ========== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –õ–û–ì–û–í ==========

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤
function formatLogEntry(log: any, index: number): string {
  const levelEmojis: Record<string, string> = {
    trace: 'üîç',
    debug: 'üêõ',
    info: 'üìù',
    warn: '‚ö†Ô∏è',
    error: '‚ùå',
    fatal: 'üíÄ',
  };

  const emoji = levelEmojis[log.level] || 'üìÑ';
  const timestamp = new Date(log.timestamp).toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
    year: '2-digit',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
  });

  const readStatus = log.is_read ? '‚úÖ' : 'üÜï';

  let message = log.message;
  if (message.length > 100) {
    message = message.substring(0, 97) + '...';
  }

  let result = `${readStatus} ${emoji} <b>#${log.id}</b> [${timestamp}]\n<code>${message}</code>`;

  if (log.data) {
    try {
      const data = JSON.parse(log.data);
      const dataStr = JSON.stringify(data, null, 2);
      if (dataStr.length <= 200) {
        result += `\n<pre>${dataStr}</pre>`;
      } else {
        result += `\n<i>üìé –î–∞–Ω–Ω—ã–µ: ${dataStr.length} —Å–∏–º–≤–æ–ª–æ–≤</i>`;
      }
    } catch {
      result += `\n<i>üìé –î–∞–Ω–Ω—ã–µ: ${log.data.length} —Å–∏–º–≤–æ–ª–æ–≤</i>`;
    }
  }

  return result;
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
bot.command('logs', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  try {
    const logs = getRecentLogs(7, 0);
    const totalCount = getLogsCount();
    const unreadCount = getUnreadLogsCount();

    if (logs.length === 0) {
      await ctx.reply('üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\nüì≠ –õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', {
        parse_mode: 'HTML',
      });
      return;
    }

    let message = `üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\n`;
    message += `üìä –í—Å–µ–≥–æ: ${totalCount} | üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\n`;
    message += `üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: ${logs.length} –∏–∑ ${totalCount}\n\n`;

    logs.forEach((log, index) => {
      message += formatLogEntry(log, index) + '\n\n';
    });

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', callback_data: 'logs_prev_0' },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'logs_stats' },
          { text: '–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', callback_data: 'logs_next_7' },
        ],
        [
          { text: '‚úÖ –í—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: 'logs_mark_all_read' },
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'logs_refresh_0' },
        ],
      ],
    };

    await ctx.reply(message, {
      parse_mode: 'HTML',
      reply_markup: keyboard,
    });
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /logs');
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤:\n<code>${error}</code>`, {
      parse_mode: 'HTML',
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
bot.action(/logs_(.+)_(\d+)/, async ctx => {
  const chatId = ctx.chat?.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  if (chatId !== adminChatId) {
    await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    return;
  }

  const action = ctx.match![1];
  const offset = parseInt(ctx.match![2]);

  try {
    let newOffset = offset;

    switch (action) {
      case 'prev':
        newOffset = Math.max(0, offset - 7);
        break;
      case 'next':
        const totalCount = getLogsCount();
        newOffset = Math.min(totalCount - 1, offset + 7);
        break;
      case 'refresh':
        newOffset = offset;
        break;
      default:
        await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
        return;
    }

    const logs = getRecentLogs(7, newOffset);
    const totalCount = getLogsCount();
    const unreadCount = getUnreadLogsCount();

    if (logs.length === 0) {
      await ctx.answerCbQuery('üì≠ –õ–æ–≥–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç');
      return;
    }

    let message = `üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\n`;
    message += `üìä –í—Å–µ–≥–æ: ${totalCount} | üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\n`;
    message += `üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: ${logs.length} (–ø–æ–∑–∏—Ü–∏—è ${newOffset + 1}-${newOffset + logs.length})\n\n`;

    logs.forEach((log, index) => {
      message += formatLogEntry(log, index) + '\n\n';
    });

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', callback_data: `logs_prev_${newOffset}` },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'logs_stats' },
          { text: '–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', callback_data: `logs_next_${newOffset}` },
        ],
        [
          { text: '‚úÖ –í—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: 'logs_mark_all_read' },
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: `logs_refresh_${newOffset}` },
        ],
      ],
    };

    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: keyboard,
    });

    await ctx.answerCbQuery();
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ª–æ–≥–∞–º');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤
bot.action('logs_stats', async ctx => {
  const chatId = ctx.chat?.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  if (chatId !== adminChatId) {
    await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    return;
  }

  try {
    const stats = getLogsStatistics();
    const totalCount = getLogsCount();
    const unreadCount = getUnreadLogsCount();

    let message = `üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–û–ì–û–í</b>\n\n`;
    message += `üìÑ –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: ${totalCount}\n`;
    message += `üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\n\n`;
    message += `<b>–ü–æ —É—Ä–æ–≤–Ω—è–º:</b>\n`;

    stats.forEach(stat => {
      const levelEmojis: Record<string, string> = {
        trace: 'üîç',
        debug: 'üêõ',
        info: 'üìù',
        warn: '‚ö†Ô∏è',
        error: '‚ùå',
        fatal: 'üíÄ',
      };

      const emoji = levelEmojis[stat.level] || 'üìÑ';
      const percentage = ((stat.count / totalCount) * 100).toFixed(1);
      message += `${emoji} ${stat.level.toUpperCase()}: ${stat.count} (${percentage}%)`;
      if (stat.unread_count > 0) {
        message += ` | üÜï ${stat.unread_count}`;
      }
      message += '\n';
    });

    const keyboard = {
      inline_keyboard: [[{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ª–æ–≥–∞–º', callback_data: 'logs_refresh_0' }]],
    };

    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: keyboard,
    });

    await ctx.answerCbQuery();
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
bot.action('logs_mark_all_read', async ctx => {
  const chatId = ctx.chat?.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  if (chatId !== adminChatId) {
    await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    return;
  }

  try {
    markAllLogsAsRead();
    await ctx.answerCbQuery('‚úÖ –í—Å–µ –ª–æ–≥–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const logs = getRecentLogs(7, 0);
    const totalCount = getLogsCount();
    const unreadCount = getUnreadLogsCount();

    let message = `üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\n`;
    message += `üìä –í—Å–µ–≥–æ: ${totalCount} | üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\n`;
    message += `üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: ${logs.length} –∏–∑ ${totalCount}\n\n`;

    logs.forEach((log, index) => {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_read = true –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      log.is_read = true;
      message += formatLogEntry(log, index) + '\n\n';
    });

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', callback_data: 'logs_prev_0' },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'logs_stats' },
          { text: '–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', callback_data: 'logs_next_7' },
        ],
        [
          { text: '‚úÖ –í—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: 'logs_mark_all_read' },
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'logs_refresh_0' },
        ],
      ],
    };

    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: keyboard,
    });
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö –ª–æ–≥–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ª–æ–≥–æ–≤');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
bot.action(/log_read_(\d+)/, async ctx => {
  const chatId = ctx.chat?.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  if (chatId !== adminChatId) {
    await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    return;
  }

  const logId = parseInt(ctx.match![1]);

  try {
    markLogAsRead(logId);
    await ctx.answerCbQuery(`‚úÖ –õ–æ–≥ #${logId} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π`);
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –ª–æ–≥–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ª–æ–≥–∞');
  }
});

// ========== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ==========

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async ctx => {
  const message = ctx.message.text;
  const chatId = ctx.chat.id;
  botLogger.debug({ userId: ctx.from?.id || 0, chatId, messageLength: message.length }, `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
  // scheduler.updateUserResponseTime(chatId, sentTime); // –£–¥–∞–ª–µ–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏
  scheduler.clearReminder(chatId);

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (author_id = userId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    const userId = ctx.from?.id || 0;
    const userMessageTime = new Date().toISOString();
    saveMessage(chatId, message, userMessageTime, userId);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const lastMessage = getLastBotMessage(chatId);
    const lastBotMessageText = lastMessage?.message_text;

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    const calendarEvents = await getUserTodayEvents(chatId);

    botLogger.info(
      {
        chatId,
        hasLastMessage: !!lastBotMessageText,
        hasCalendarEvents: !!calendarEvents,
      },
      'ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
    );

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM
    const textResponse = await generateUserResponse(message, lastBotMessageText, calendarEvents || undefined);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    await ctx.reply(textResponse);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î (author_id = 0 –¥–ª—è –±–æ—Ç–∞)
    const botResponseTime = new Date().toISOString();
    saveMessage(chatId, textResponse, botResponseTime, 0);

    botLogger.info({ chatId, responseLength: textResponse.length }, '‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
  } catch (error) {
    const err = error as Error;
    botLogger.error({ error: err.message, stack: err.stack, chatId }, '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');

    // Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    const fallbackMessage = '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! ü§ç';
    await ctx.reply(fallbackMessage);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º fallback –æ—Ç–≤–µ—Ç –≤ –ë–î
    const fallbackTime = new Date().toISOString();
    saveMessage(chatId, fallbackMessage, fallbackTime, 0);
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞

// --- Telegraf polling ---
bot.launch();
logger.info('üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
  logger.info('üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGINT)');
  scheduler.destroy();
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  logger.info('üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGTERM)');
  scheduler.destroy();
  bot.stop('SIGTERM');
});
