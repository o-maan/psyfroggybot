import { Telegraf } from "telegraf";
import { config } from "dotenv";
import { Scheduler } from "./scheduler.ts";
import { addUser, saveUserToken, getLastUserToken } from "./db.ts";
import { CalendarService, formatCalendarEvents } from "./calendar.ts";
import express, { Request, Response } from "express";
import { minimalTestLLM } from "./llm.ts";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || "");

// –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
const calendarService = new CalendarService();
const scheduler = new Scheduler(bot, calendarService);

// --- Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Google OAuth2 callback –∏ REST ---
const restServ = express();
const SERVER_PORT = process.env.SERVER_PORT || process.env.PORT || 3456;
// const TELEGRAM_WEBHOOK_PORT = process.env.TELEGRAM_WEBHOOK_PORT || 8443;
// const TELEGRAM_WEBHOOK_PATH =
//   process.env.TELEGRAM_WEBHOOK_PATH || "/telegraf/webhook";
// const TELEGRAM_WEBHOOK_URL =
//   process.env.TELEGRAM_WEBHOOK_URL ||
//   `https://${
//     process.env.FLY_APP_NAME || "psyfroggybot-np0edq"
//   }.fly.dev:${TELEGRAM_WEBHOOK_PORT}${TELEGRAM_WEBHOOK_PATH}`;

// --- Telegraf webhook ---
// bot.telegram.setWebhook(TELEGRAM_WEBHOOK_URL);
// restServ.use(TELEGRAM_WEBHOOK_PATH, bot.webhookCallback(TELEGRAM_WEBHOOK_PATH));

restServ.use(express.json());

restServ.all("/oauth2callback", async (req: Request, res: Response) => {
  const code = req.query.code as string;
  const state = req.query.state as string;
  const chatId = Number(state);
  console.log(
    "üîç OAUTH2 CALLBACK - Chat ID:",
    chatId,
    "Code:",
    code,
    "State:",
    state,
  );
  if (!code) {
    res.status(400).send("No code provided");
    return;
  }
  if (!chatId || isNaN(chatId)) {
    res.status(400).send("Invalid chat ID in state parameter");
    return;
  }
  try {
    const tokens = await calendarService.getToken(code);
    saveUserToken(chatId, JSON.stringify(tokens));
    res.send("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É.");
    // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! " + code);
    await bot.telegram.sendMessage(
      chatId,
      "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É.",
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä:", error);
    res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.");
  }
});

restServ.get("/status", (req: Request, res: Response) => {
  res.json({ status: "up" });
  console.log("üîç STATUS - OK");
});

restServ.all("/sendDailyMessage", async (req: Request, res: Response) => {
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
  try {
    await scheduler.sendDailyMessagesToAll(adminChatId);
    res
      .status(200)
      .send(
        `C–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${scheduler["users"].size}, –∞–¥–º–∏–Ω: ${adminChatId}`,
      );
    console.log(
      "üîç SEND DAILY MESSAGE - –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ",
      scheduler["users"],
    );
  } catch (error) {
    console.error(
      "‚ùå SEND DAILY MESSAGE - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:",
      error,
      `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${scheduler["users"].size}, –∞–¥–º–∏–Ω: ${adminChatId}`,
    );
    res.status(500).send(String(error));
  }
});

// 404
restServ.all("/", (req: Request, res: Response) => {
  res.status(404).send("Not found");
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö (–¥–ª—è Fly.io)
restServ.listen(Number(SERVER_PORT), "0.0.0.0", () => {
  console.log(`‚úÖ EXPRESS —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ 0.0.0.0:${SERVER_PORT}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command("start", async (ctx) => {
  const chatId = ctx.chat.id;
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
  scheduler.addUser(chatId);

  await ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ª—è–≥—É—à–∫–∞ üê∏\n\n" +
      "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:30.\n" +
      "–ï—Å–ª–∏ —Ç—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏—à—å –≤ —Ç–µ—á–µ–Ω–∏–µ 1.5 —á–∞—Å–æ–≤, —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\n" +
      "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
      "/fro - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–π—á–∞—Å\n" +
      "/calendar - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n" +
      "/status - —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n" +
      "/test_schedule - —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)",
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test
bot.command("test", async (ctx) => {
  const chatId = ctx.chat.id;
  const fromId = ctx.from?.id;
  console.log("üîç TEST COMMAND - Chat ID:", chatId, "From ID:", fromId);
  await scheduler.sendDailyMessage(fromId);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /sendnow
bot.command("sendnow", async (ctx) => {
  const chatId = ctx.chat.id;
  const targetTime = new Date();
  targetTime.setHours(15, 38, 0, 0);

  scheduler.scheduleOneTimeMessage(chatId, targetTime);
  await ctx.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ 15:38!");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /fro
bot.command("fro", async (ctx) => {
  const chatId = ctx.chat.id;
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–µ–º –∂–µ –ø—Ä–∞–≤–∏–ª–∞–º, —á—Ç–æ –∏ –¥–ª—è 19:30
  const message = await scheduler.generateScheduledMessage(chatId);
  const imagePath = scheduler.getNextImage(chatId);
  const caption = message.length > 1024 ? undefined : message;
  await bot.telegram.sendPhoto(
    scheduler.CHANNEL_ID,
    { source: imagePath },
    {
      caption,
      parse_mode: "HTML",
    },
  );
  if (message.length > 1024) {
    await bot.telegram.sendMessage(scheduler.CHANNEL_ID, message, {
      parse_mode: "HTML",
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /remind
bot.command("remind", async (ctx) => {
  const chatId = ctx.chat.id;
  const sentTime = new Date().toISOString();
  scheduler.setReminder(chatId, sentTime);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /calendar
bot.command("calendar", async (ctx) => {
  const chatId = ctx.chat.id;
  // Save user if not exists
  addUser(chatId, ctx.from?.username || "");
  const lastToken = getLastUserToken(chatId);
  if (lastToken) {
    console.log("üîç LAST TOKEN:", lastToken);
    try {
      calendarService.setToken(JSON.parse(lastToken.token));
      // Get events for yesterday and today
      const now = new Date();
      const yesterday = new Date(now);
      yesterday.setDate(now.getDate() - 1);
      const start = new Date(
        yesterday.getFullYear(),
        yesterday.getMonth(),
        yesterday.getDate(),
      );
      const end = new Date(
        now.getFullYear(),
        now.getMonth(),
        now.getDate() + 1,
      );
      const events = await calendarService.getEvents(
        start.toISOString(),
        end.toISOString(),
      );
      if (events && events.length > 0) {
        const eventsList = formatCalendarEvents(events, {
          locale: "ru-RU",
          showDate: true,
          showBusy: true,
          showLocation: true,
          showDescription: true,
          showLink: true,
        });
        await ctx.reply(`–°–æ–±—ã—Ç–∏—è –∑–∞ –≤—á–µ—Ä–∞ –∏ —Å–µ–≥–æ–¥–Ω—è:\n\n${eventsList}`, {
          parse_mode: "HTML",
        });
      } else {
        await ctx.reply("–°–æ–±—ã—Ç–∏–π –∑–∞ –≤—á–µ—Ä–∞ –∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.");
      }
      return;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
      );
    }
  }
  // Pass chatId in state
  const authUrl = calendarService.getAuthUrl({ state: chatId.toString() });
  await ctx.reply(
    "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:\n" +
      authUrl +
      "\n\n" +
      "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ —è –ø–æ–ª—É—á—É —Ç–æ–∫–µ–Ω.",
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ LLM
bot.command("minimalTestLLM", async (ctx) => {
  await ctx.reply("–í—ã–ø–æ–ª–Ω—è—é –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç LLM...");
  const result = await minimalTestLLM();
  if (result) {
    await ctx.reply("–û—Ç–≤–µ—Ç LLM:\n" + result);
  } else {
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM.");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–±–∞–≥–∞ –∏–Ω–¥–µ–∫—Å–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
bot.command("next_image", async (ctx) => {
  const chatId = ctx.chat.id;
  try {
    const imagePath = scheduler.getNextImage(chatId);
    await ctx.replyWithPhoto(
      { source: imagePath },
      {
        caption: `Next image for chatId=${chatId}\n–ü—É—Ç—å: ${imagePath}`,
      },
    );
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –≤ /next_image:", e);
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏: " + e);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
bot.command("status", async (ctx) => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É");
    return;
  }

  const status = scheduler.getSchedulerStatus();

  await ctx.reply(
    `üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:\n\n` +
      `‚öôÔ∏è Cron job: ${status.isRunning ? "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" : "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}\n` +
      `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${status.description}\n` +
      `üïê –í—ã—Ä–∞–∂–µ–Ω–∏–µ: ${status.cronExpression}\n` +
      `üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${status.timezone}\n\n` +
      `üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${status.usersCount}\n` +
      `üìã –°–ø–∏—Å–æ–∫: ${status.usersList.join(", ")}`,
    { parse_mode: "HTML" },
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("text", async (ctx) => {
  const message = ctx.message.text;
  console.log(message);

  // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const chatId = ctx.chat.id;
  const sentTime = new Date().toISOString();
  // scheduler.updateUserResponseTime(chatId, sentTime); // –£–¥–∞–ª–µ–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏
  scheduler.clearReminder(chatId);
  await ctx.reply("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ! üòä");
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
bot.command("test_schedule", async (ctx) => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É");
    return;
  }

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π cron job –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –º–∏–Ω—É—Ç—É
  const now = new Date();
  const nextMinute = now.getMinutes() + 1;
  const cronExpression = `${nextMinute} ${now.getHours()} * * *`;

  const testJob = require("node-cron").schedule(
    cronExpression,
    async () => {
      try {
        await scheduler.sendDailyMessage(chatId);
        await ctx.reply("üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
        testJob.stop();
      } catch (error) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error}`);
        testJob.stop();
      }
    },
    {
      scheduled: true,
      timezone: "Europe/Moscow",
    },
  );

  await ctx.reply(
    `üß™ –¢–µ—Å—Ç–æ–≤—ã–π cron job —Å–æ–∑–¥–∞–Ω\n` +
      `‚è±Ô∏è –í—ã—Ä–∞–∂–µ–Ω–∏–µ: ${cronExpression}\n` +
      `üïê –°—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ ${String(now.getHours()).padStart(2, "0")}:${String(
        nextMinute,
      ).padStart(2, "0")}`,
  );
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞

// --- Telegraf polling ---
bot.launch();
console.log(
  "\nüöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling!\nüì± –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n",
);
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once("SIGINT", () => {
  console.log("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
  scheduler.destroy();
  bot.stop("SIGINT");
});
process.once("SIGTERM", () => {
  console.log("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
  scheduler.destroy();
  bot.stop("SIGTERM");
});
