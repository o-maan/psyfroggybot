import { config } from 'dotenv';
import express, { Request, Response } from 'express';
import fs, { readFileSync } from 'fs';
import path from 'path';
import { Telegraf } from 'telegraf';
import { CalendarService, formatCalendarEvents, getUserTodayEvents } from './calendar.ts';
import {
  addUser,
  getLastNMessages,
  getLastUserToken,
  getLogsCount,
  getLogsStatistics,
  getRecentLogs,
  getRecentLogsByLevel,
  getRecentUnreadInfoLogs,
  getRecentUnreadLogs,
  getUnreadLogsCount,
  getUserByChatId,
  markAllLogsAsRead,
  markLogAsRead,
  markLogsAsRead,
  saveMessage,
  saveUserToken,
  updateUserGender,
  updateUserName,
  updateUserResponse,
} from './db.ts';
import { generateUserResponse, minimalTestLLM } from './llm.ts';
import { botLogger, logger } from './logger.ts';
import { Scheduler } from './scheduler.ts';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
logger.info({
  IS_TEST_BOT: process.env.IS_TEST_BOT,
  TOKEN_PREFIX: process.env.TELEGRAM_BOT_TOKEN?.substring(0, 10) + '...',
  NODE_ENV: process.env.NODE_ENV
}, 'ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || '');

// –û—Ç–ª–∞–¥–∫–∞ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
bot.use(async (ctx, next) => {
  const logData: any = {
    updateType: ctx.updateType,
    chatId: ctx.chat?.id,
    from: ctx.from?.id,
    callbackQuery: ctx.callbackQuery ? true : false,
    message: ctx.message ? true : false
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è callback_query
  if (ctx.callbackQuery) {
    logData.callbackData = 'data' in ctx.callbackQuery ? ctx.callbackQuery.data : undefined;
    logData.callbackFrom = ctx.callbackQuery.from?.id;
    logData.callbackChatId = ctx.callbackQuery.message?.chat?.id;
  }
  
  botLogger.info(logData, 'üì• –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram');
  return next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err: any, ctx) => {
  botLogger.error(
    { 
      error: err?.message || String(err), 
      stack: err?.stack,
      updateType: ctx.updateType,
      chatId: ctx.chat?.id,
      userId: ctx.from?.id
    }, 
    '‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –±–æ—Ç–∞'
  );
});

// –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
const calendarService = new CalendarService();
const scheduler = new Scheduler(bot, calendarService);

// Middleware –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
bot.use(async (ctx, next) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–µ–∑ chat (–Ω–∞–ø—Ä–∏–º–µ—Ä, inline_query)
  if (!ctx.chat) {
    return next();
  }
  
  const chatId = ctx.chat.id;
  const TEST_CHANNEL_ID = -1002846400650;
  const TEST_CHAT_ID = -1002798126153;
  const isTestChannel = chatId === TEST_CHANNEL_ID || chatId === TEST_CHAT_ID;
  
  // –î–ª—è –∫–æ–º–∞–Ω–¥ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–±–æ–∏–º –±–æ—Ç–∞–º
  if (ctx.chat.type === 'private') {
    return next();
  }
  
  if (scheduler.isTestBot() && !isTestChannel) {
    // –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö (–∫—Ä–æ–º–µ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    botLogger.debug({ chatId, isTestBot: true, chatType: ctx.chat.type }, '–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞');
    return;
  }
  
  if (!scheduler.isTestBot() && isTestChannel) {
    // –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
    botLogger.debug({ chatId, isTestBot: false, chatType: ctx.chat.type }, '–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞');
    return;
  }
  
  return next();
});

// --- Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Google OAuth2 callback –∏ REST ---
const restServ = express();
const SERVER_PORT = process.env.SERVER_PORT || process.env.PORT || 3456;
// const TELEGRAM_WEBHOOK_PORT = process.env.TELEGRAM_WEBHOOK_PORT || 8443;
// const TELEGRAM_WEBHOOK_PATH =
//   process.env.TELEGRAM_WEBHOOK_PATH || "/telegraf/webhook";
// const TELEGRAM_WEBHOOK_URL =
//   process.env.TELEGRAM_WEBHOOK_URL ||
//   `https://${
//     process.env.FLY_APP_NAME || "psyfroggybot-np0edq"
//   }.fly.dev:${TELEGRAM_WEBHOOK_PORT}${TELEGRAM_WEBHOOK_PATH}`;

// --- Telegraf webhook ---
// bot.telegram.setWebhook(TELEGRAM_WEBHOOK_URL);
// restServ.use(TELEGRAM_WEBHOOK_PATH, bot.webhookCallback(TELEGRAM_WEBHOOK_PATH));

restServ.use(express.json());

restServ.all('/oauth2callback', async (req: Request, res: Response) => {
  const code = req.query.code as string;
  const state = req.query.state as string;
  const chatId = Number(state);
  botLogger.debug({ chatId, codeLength: code?.length || 0 }, `OAuth callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
  if (!code) {
    res.status(400).send('No code provided');
    return;
  }
  if (!chatId || isNaN(chatId)) {
    res.status(400).send('Invalid chat ID in state parameter');
    return;
  }
  try {
    const tokens = await calendarService.getToken(code);
    saveUserToken(chatId, JSON.stringify(tokens));
    res.send('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É.');
    // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    logger.info({ chatId, code: code.substring(0, 10) + '...' }, 'OAuth —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω');
    await bot.telegram.sendMessage(chatId, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É.');
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack, chatId }, '–û—à–∏–±–∫–∞ OAuth —Ç–æ–∫–µ–Ω–∞');
    res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.');
  }
});

restServ.get('/status', (req: Request, res: Response) => {
  res.json({ status: 'up' });
});

restServ.all('/sendDailyMessage', async (req: Request, res: Response) => {
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
  try {
    logger.info({ 
      method: req.method, 
      ip: req.ip,
      userAgent: req.headers['user-agent'] 
    }, 'REST API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É');
    
    await scheduler.sendDailyMessagesToAll(adminChatId);
    
    // –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏
    // –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç
    res
      .status(200)
      .send(`–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${scheduler['users'].size}, –∞–¥–º–∏–Ω: ${adminChatId}`);
    logger.info({ usersCount: scheduler['users'].size }, 'REST API: –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ REST API');
    res.status(500).send(String(error));
  }
});

// 404
restServ.all('/', (req: Request, res: Response) => {
  res.status(404).send('Not found');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö (–¥–ª—è Fly.io)
restServ.listen(Number(SERVER_PORT), '0.0.0.0', () => {
  logger.info({ port: SERVER_PORT }, `üöÄ Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${SERVER_PORT}`);
});

// –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.command('ping', async ctx => {
  await ctx.reply('üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async ctx => {
  const chatId = ctx.chat.id;
  const userId = ctx.from?.id || 0;
  const username = ctx.from?.username || '';
  botLogger.info({ userId, chatId }, `üì± –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
  scheduler.addUser(chatId);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ê–ª–µ–∫—Å (ID: 5153477378), –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –∏ –ø–æ–ª
  if (userId === 5153477378) {
    addUser(chatId, username, '–ê–ª–µ–∫—Å', 'male');
    updateUserName(chatId, '–ê–ª–µ–∫—Å');
    updateUserGender(chatId, 'male');
    botLogger.info({ userId, name: '–ê–ª–µ–∫—Å', gender: 'male' }, '‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –∏ –ø–æ–ª –¥–ª—è –ê–ª–µ–∫—Å–∞');
  } else {
    addUser(chatId, username);
  }

  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ª—è–≥—É—à–∫–∞ üê∏\n\n' +
      '–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:00.\n' +
      '–ï—Å–ª–∏ —Ç—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏—à—å –≤ —Ç–µ—á–µ–Ω–∏–µ 1.5 —á–∞—Å–æ–≤, —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ª–∏—á–∫—É.\n\n' +
      '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '/fro - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–π—á–∞—Å\n' +
      '/calendar - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n' +
      '/setname [–∏–º—è] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—ë –∏–º—è\n\n' +
      '–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '/status - —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞\n' +
      '/users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' +
      '/last_run - –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n' +
      '/logs - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤\n' +
      '/test_schedule - —Ç–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –º–∏–Ω—É—Ç—É\n' +
      '/test_now - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n' +
      '/test_reminder - —Ç–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n' +
      '/test_reply - —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n' +
      '/chat_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ\n' +
      '/minimalTestLLM - —Ç–µ—Å—Ç LLM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.command('setname', async ctx => {
  const chatId = ctx.chat.id;
  const userId = ctx.from?.id || 0;
  const text = ctx.message.text;
  const name = text.split(' ').slice(1).join(' ').trim();
  
  if (!name) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /setname –ò–≤–∞–Ω');
    return;
  }
  
  updateUserName(chatId, name);
  botLogger.info({ userId, chatId, name }, '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  await ctx.reply(`‚úÖ –¢–≤–æ—ë –∏–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${name}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test
bot.command('test', async ctx => {
  const chatId = ctx.chat.id;
  const fromId = ctx.from?.id;
  botLogger.info({ userId: fromId || 0, chatId }, `üì± –ö–æ–º–∞–Ω–¥–∞ /test –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${fromId}`);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –¥–ª–∏–Ω—É
  const message = await scheduler.generateScheduledMessage(fromId);
  await ctx.reply(
    `üìä <b>–¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –°–û–û–ë–©–ï–ù–ò–Ø</b>\n\n` +
    `üìè –î–ª–∏–Ω–∞: ${message.length} —Å–∏–º–≤–æ–ª–æ–≤\n` +
    `${message.length > 1024 ? `‚ùå –ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢ –Ω–∞ ${message.length - 1024} —Å–∏–º–≤–æ–ª–æ–≤!` : '‚úÖ –í –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞'}\n\n` +
    `<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n${message}`,
    { parse_mode: 'HTML' }
  );
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
  if (message.length <= 1024) {
    await scheduler.sendDailyMessage(fromId);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.command('test_busy', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
    const now = new Date();
    const evening = new Date(now);
    evening.setHours(18, 0, 0, 0);
    const tomorrow = new Date(now);
    tomorrow.setDate(now.getDate() + 1);

    const calendarService = scheduler.getCalendarService();
    const events = await calendarService.getEvents(evening.toISOString(), tomorrow.toISOString());

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    const busyStatus = await (scheduler as any).detectUserBusy(events || []);

    let message = 'üîç <b>–¢–ï–°–¢ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ó–ê–ù–Ø–¢–û–°–¢–ò</b>\n\n';

    if (events && events.length > 0) {
      message += 'üìÖ <b>–°–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:</b>\n';
      events.forEach((event: any, i: number) => {
        message += `${i + 1}. ${event.summary || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;

        // –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        if (event.start) {
          const startDate = new Date(event.start.dateTime || event.start.date);
          const endDate = event.end ? new Date(event.end.dateTime || event.end.date) : null;

          if (event.start.date && !event.start.dateTime) {
            message += `   ‚Ä¢ –í–µ—Å—å –¥–µ–Ω—å\n`;
          } else {
            message += `   ‚Ä¢ –í—Ä–µ–º—è: ${startDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
            if (endDate) {
              message += ` - ${endDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
            }
            message += '\n';
          }
        }

        // –°—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        if (event.transparency) {
          message += `   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${event.transparency === 'transparent' ? '‚úÖ –°–≤–æ–±–æ–¥–µ–Ω' : 'üî¥ –ó–∞–Ω—è—Ç'}\n`;
        }

        // –ú–µ—Å—Ç–æ
        if (event.location) {
          message += `   ‚Ä¢ –ú–µ—Å—Ç–æ: ${event.location}\n`;
        }
      });
      message += '\n';
    } else {
      message += 'üìÖ <i>–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ</i>\n\n';
    }

    message += `ü§ñ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:</b>\n`;
    message += `‚Ä¢ –ó–∞–Ω—è—Ç: ${busyStatus.probably_busy ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}\n`;
    if (busyStatus.busy_reason) {
      message += `‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: ${busyStatus.busy_reason}\n`;
    }
    message += `\nüìÑ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–º–ø—Ç: <code>${
      busyStatus.probably_busy ? 'scheduled-message-flight.md' : 'scheduled-message.md'
    }</code>`;

    await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test_busy');
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:\n<code>${error.message}</code>`, {
      parse_mode: 'HTML',
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /sendnow
bot.command('sendnow', async ctx => {
  const chatId = ctx.chat.id;
  const targetTime = new Date();
  targetTime.setHours(15, 38, 0, 0);

  scheduler.scheduleOneTimeMessage(chatId, targetTime);
  await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ 15:38!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /fro
bot.command('fro', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
  
  try {
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    botLogger.info({ 
      chatId, 
      adminChatId,
      isTestBot: scheduler.isTestBot(),
      channelId: scheduler.CHANNEL_ID,
      targetUserId: scheduler.getTargetUserId()
    }, '–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /fro');
    
    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    botLogger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...');
    await ctx.reply('üê∏ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    botLogger.info('‚úÖ –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å —Ñ–ª–∞–≥–æ–º —Ä—É—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
    botLogger.info('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º sendInteractiveDailyMessage...');
    await scheduler.sendInteractiveDailyMessage(chatId, true);
    botLogger.info('‚úÖ sendInteractiveDailyMessage –∑–∞–≤–µ—Ä—à–µ–Ω');
    
    // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞
    if (scheduler.isTestBot()) {
      botLogger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...');
      await ctx.reply('ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è');
      botLogger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    }
    
    botLogger.info('üéâ –ö–æ–º–∞–Ω–¥–∞ /fro –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
  } catch (error) {
    const err = error as Error;
    botLogger.error({ 
      error: err.message, 
      stack: err.stack,
      chatId,
      isTestBot: scheduler.isTestBot() 
    }, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /fro');
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /remind
bot.command('remind', async ctx => {
  const chatId = ctx.chat.id;
  const sentTime = new Date().toISOString();
  scheduler.setReminder(chatId, sentTime);
});

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
bot.command('test_buttons', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
    const CHANNEL_ID = scheduler.CHANNEL_ID;
    
    const testMessage = await bot.telegram.sendMessage(
      CHANNEL_ID,
      'üß™ <b>–¢–ï–°–¢–û–í–´–ô –ü–û–°–¢ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ö–ù–û–ü–û–ö</b>\n\n' +
      '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.\n\n' +
      '‚¨áÔ∏è –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –Ω–∏–∂–µ',
      { parse_mode: 'HTML' }
    );
    
    const messageId = testMessage.message_id;
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
    const CHAT_ID = scheduler.getChatId();
    
    if (!CHAT_ID) {
      await ctx.reply('‚ùå CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env');
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    const commentUrl = `https://t.me/c/${CHANNEL_ID.toString().slice(4)}/${messageId}?thread=${messageId}`;
    
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç', url: commentUrl }],
        [{ text: '‚úÖ –í—Å–µ –æ–∫ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'daily_skip_all' }]
      ]
    };
    
    const buttonMessage = await bot.telegram.sendMessage(
      CHAT_ID,
      'üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏:\n\n' +
      `Channel ID: ${CHANNEL_ID}\n` +
      `Message ID: ${messageId}\n` +
      `Comment URL: ${commentUrl}`,
      {
        reply_markup: keyboard
      }
    );
    
    await ctx.reply(
      '‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n' +
      `üì¢ Channel ID: <code>${CHANNEL_ID}</code>\n` +
      `üí¨ Chat ID: <code>${CHAT_ID}</code>\n` +
      `üìù Message ID: <code>${messageId}</code>\n` +
      `üîó URL: <code>${commentUrl}</code>`,
      { parse_mode: 'HTML' }
    );
    
  } catch (error) {
    const err = error as Error;
    botLogger.error({ error: err.message, stack: err.stack }, '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test_buttons');
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /skip —É–¥–∞–ª–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /calendar
bot.command('calendar', async ctx => {
  const chatId = ctx.chat.id;
  // Save user if not exists
  addUser(chatId, ctx.from?.username || '');
  const lastToken = getLastUserToken(chatId);
  if (lastToken) {
    logger.debug({ chatId, hasToken: !!lastToken }, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
    try {
      calendarService.setToken(JSON.parse(lastToken.token));
      // Get events for yesterday and today
      const now = new Date();
      const yesterday = new Date(now);
      yesterday.setDate(now.getDate() - 1);
      const start = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate());
      const end = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
      const events = await calendarService.getEvents(start.toISOString(), end.toISOString());
      if (events && events.length > 0) {
        const eventsList = formatCalendarEvents(events, {
          locale: 'ru-RU',
          showDate: true,
          showBusy: true,
          showLocation: true,
          showDescription: true,
          showLink: true,
        });
        await ctx.reply(`–°–æ–±—ã—Ç–∏—è –∑–∞ –≤—á–µ—Ä–∞ –∏ —Å–µ–≥–æ–¥–Ω—è:\n\n${eventsList}`, {
          parse_mode: 'HTML',
        });
      } else {
        await ctx.reply('–°–æ–±—ã—Ç–∏–π –∑–∞ –≤—á–µ—Ä–∞ –∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.');
      }
      return;
    } catch (e) {
      const error = e as Error;
      botLogger.error({ error: error.message, stack: error.stack, chatId }, '–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }
  // Pass chatId in state
  const authUrl = calendarService.getAuthUrl({ state: chatId.toString() });
  await ctx.reply(
    '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:\n' +
      authUrl +
      '\n\n' +
      '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ —è –ø–æ–ª—É—á—É —Ç–æ–∫–µ–Ω.'
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ LLM
bot.command('minimalTestLLM', async ctx => {
  await ctx.reply('–í—ã–ø–æ–ª–Ω—è—é –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç LLM...');
  const result = await minimalTestLLM();
  if (result) {
    await ctx.reply('–û—Ç–≤–µ—Ç LLM:\n' + result);
  } else {
    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–æ–ø–æ–∫
bot.command('test_button', async ctx => {
  try {
    const keyboard = {
      inline_keyboard: [
        [{ text: '‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞', callback_data: 'test_button_click' }]
      ]
    };
    
    await ctx.reply('üß™ –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏:', {
      reply_markup: keyboard
    });
  } catch (error) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${(error as Error).message}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
bot.action('test_button_click', async ctx => {
  await ctx.answerCbQuery('‚úÖ –ö–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
  await ctx.reply('üéâ Callback –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ID —á–∞—Ç–∞
bot.command('chat_info', async ctx => {
  const chatId = ctx.chat.id;
  const chatType = ctx.chat.type;
  const userId = ctx.from?.id || 0;
  const username = ctx.from?.username || 'unknown';
  
  await ctx.reply(
    `üìä <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ß–ê–¢–ï</b>\n\n` +
    `üÜî Chat ID: <code>${chatId}</code>\n` +
    `üìù –¢–∏–ø: <code>${chatType}</code>\n` +
    `üë§ User ID: <code>${userId}</code>\n` +
    `üë§ Username: @${username}\n\n` +
    `üí° –î–æ–±–∞–≤—å—Ç–µ CHAT_ID=${chatId} –≤ —Ñ–∞–π–ª .env`,
    { parse_mode: 'HTML' }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ
bot.command('users', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  const { getAllUsers } = await import('./db.ts');
  const users = getAllUsers();
  
  let message = `üë• <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –í –ë–ê–ó–ï</b>\n\n`;
  message += `–í—Å–µ–≥–æ: ${users.length}\n\n`;
  
  users.forEach((user, index) => {
    message += `${index + 1}. User ID: <code>${user.chat_id}</code>\n`;
    if (user.name) message += `   –ò–º—è: ${user.name}\n`;
    if (user.username) message += `   Username: @${user.username}\n`;
    message += `   –û—Ç–≤–µ—Ç–æ–≤: ${user.response_count || 0}\n`;
    if (user.last_response_time) {
      const lastResponse = new Date(user.last_response_time).toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow'
      });
      message += `   –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç: ${lastResponse}\n`;
    }
    message += '\n';
  });
  
  await ctx.reply(message, { parse_mode: 'HTML' });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–µ–±–∞–≥–∞ –∏–Ω–¥–µ–∫—Å–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
bot.command('next_image', async ctx => {
  const chatId = ctx.chat.id;
  try {
    const imagePath = scheduler.getNextImage(chatId);
    await ctx.replyWithPhoto(
      { source: imagePath },
      {
        caption: `Next image for chatId=${chatId}\n–ü—É—Ç—å: ${imagePath}`,
      }
    );
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack, chatId }, '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã next_image');
    await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: ${error.message}`);
  }
});

// –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞
bot.command('fly1', async ctx => {
  const text =
    '–ö–∞–∂–µ—Ç—Å—è —á–∞—Ç–∏–∫ –Ω–µ —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å - –Ω–µ–≥–æ–¥—è–π!\n\n–ö–∞–π—Ñ–æ–≤–æ–≥–æ –ø–æ–ª–µ—Ç–∞ :) –î–∞–≤–∞–π –ø–æ–∫–∞ —Ç—ã –±—É–¥–µ—à—å –ª–µ—Ç–µ—Ç—å —Ç—ã –ø–æ–¥—É–º–∞–µ—à—å –æ –ø—Ä–∏—è—Ç–Ω–æ–º, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª—è–π –≤—Å–µ, —á—Ç–æ —Ç–µ–±—è —Ä–∞–¥—É–µ—Ç, –ø—Ä–∏–Ω–æ—Å–∏—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ... –º–æ–∂–Ω–æ –Ω–∞—Ñ–∞–Ω—Ç–∞–∑–∏—Ä–æ–≤–∞—Ç—å)\n\n–ì–ª–∞–≤–Ω–æ–µ –ø–æ—Å—Ç—Ä–∞–π—Å—è –ø—Ä–∏ —ç—Ç–æ–º –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ —Ö–æ—Ä–æ—à–µ–µ ‚ô•';

  try {
    await bot.telegram.sendMessage(scheduler.CHANNEL_ID, text);
    await ctx.reply('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!');
  } catch (error) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error}`);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
bot.command('last_run', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
    const lastRun = await (scheduler as any).getLastDailyRunTime();
    
    if (lastRun) {
      const moscowTime = lastRun.toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });
      
      const now = new Date();
      const timeDiff = now.getTime() - lastRun.getTime();
      const hoursDiff = Math.floor(timeDiff / (1000 * 60 * 60));
      const minutesDiff = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
      
      await ctx.reply(
        `üìÖ <b>–ü–û–°–õ–ï–î–ù–Ø–Ø –†–ê–°–°–´–õ–ö–ê</b>\n\n` +
        `üïê –í—Ä–µ–º—è: <code>${moscowTime}</code>\n` +
        `‚è±Ô∏è –ü—Ä–æ—à–ª–æ: ${hoursDiff} —á. ${minutesDiff} –º–∏–Ω.\n\n` +
        `${hoursDiff < 20 ? '‚úÖ –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ 22:00'}`,
        { parse_mode: 'HTML' }
      );
    } else {
      await ctx.reply('üì≠ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }
  } catch (error) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${error}`);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
bot.command('test_morning_check', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  await ctx.reply('üåÖ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—É—é —É—Ç—Ä–µ–Ω–Ω—é—é –ø—Ä–æ–≤–µ—Ä–∫—É...');
  
  try {
    // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ any cast
    await (scheduler as any).checkUsersResponses();
    await ctx.reply('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —É—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:\n<code>${error}</code>`, { parse_mode: 'HTML' });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–ª–æ–≥–æ –ø–æ—Å—Ç–∞
bot.command('angry', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  await ctx.reply('üò† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–ª–æ–π –ø–æ—Å—Ç...');
  
  try {
    // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ sendAngryPost –Ω–∞–ø—Ä—è–º—É—é
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const TARGET_USER_ID = scheduler.getTargetUserId();
    await (scheduler as any).sendAngryPost(TARGET_USER_ID);
    await ctx.reply('‚úÖ –ó–ª–æ–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!');
  } catch (error) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–ª–æ–≥–æ –ø–æ—Å—Ç–∞:\n<code>${error}</code>`, { parse_mode: 'HTML' });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
bot.command('ans', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  await ctx.reply('üîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤...');
  
  try {
    // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ any cast
    await (scheduler as any).checkUncompletedTasks();
    await ctx.reply('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.');
  } catch (error) {
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:\n<code>${error}</code>`, { parse_mode: 'HTML' });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Ç—Ä–µ–Ω–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
bot.command('check_config', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  const TARGET_USER_ID = scheduler.getTargetUserId();
  const status = scheduler.getSchedulerStatus();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
  const fs = require('fs');
  const textPromptExists = fs.existsSync('assets/prompts/no-answer');
  const imagePromptExists = fs.existsSync('assets/prompts/frog-image-promt-angry');
  
  await ctx.reply(
    `üîß <b>–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –£–¢–†–ï–ù–ù–ï–ô –ü–†–û–í–ï–†–ö–ò</b>\n\n` +
    `üë§ –¶–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>${TARGET_USER_ID}</code>\n` +
    `üì¢ –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ—Å—Ç–æ–≤: <code>${scheduler.CHANNEL_ID}</code>\n` +
    `‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>8:00 –ú–°–ö</b>\n` +
    `‚òÄÔ∏è –°—Ç–∞—Ç—É—Å —É—Ç—Ä–µ–Ω–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: ${status.isMorningRunning ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n\n` +
    `üìÑ <b>–§–∞–π–ª—ã –ø—Ä–æ–º–ø—Ç–æ–≤:</b>\n` +
    `‚îú‚îÄ –¢–µ–∫—Å—Ç (no-answer): ${textPromptExists ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n` +
    `‚îî‚îÄ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (frog-image-promt-angry): ${imagePromptExists ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}\n\n` +
    `üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö: <code>${status.currentTime}</code>`,
    { parse_mode: 'HTML' }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º
bot.command('check_access', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  const channelId = scheduler.CHANNEL_ID;
  const groupId = scheduler.getChatId();
  
  let message = `üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–æ—Ç–∞</b>\n\n`;
  message += `ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: ${scheduler.isTestBot() ? '–î–ê' : '–ù–ï–¢'}\n`;
  message += `üì¢ ID –∫–∞–Ω–∞–ª–∞: <code>${channelId}</code>\n`;
  message += `üí¨ ID –≥—Ä—É–ø–ø—ã: <code>${groupId}</code>\n\n`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
  try {
    const channelInfo = await bot.telegram.getChat(channelId);
    message += `‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É: –ï–°–¢–¨\n`;
    message += `   –ù–∞–∑–≤–∞–Ω–∏–µ: ${('title' in channelInfo ? channelInfo.title : undefined) || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;
    message += `   –¢–∏–ø: ${channelInfo.type}\n`;
  } catch (error) {
    const err = error as Error;
    message += `‚ùå –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É: –ù–ï–¢\n`;
    message += `   –û—à–∏–±–∫–∞: ${err.message}\n`;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ
  if (groupId) {
    try {
      const groupInfo = await bot.telegram.getChat(groupId);
      message += `\n‚úÖ –î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ: –ï–°–¢–¨\n`;
      message += `   –ù–∞–∑–≤–∞–Ω–∏–µ: ${('title' in groupInfo ? groupInfo.title : undefined) || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;
      message += `   –¢–∏–ø: ${groupInfo.type}\n`;
    } catch (error) {
      const err = error as Error;
      message += `\n‚ùå –î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ: –ù–ï–¢\n`;
      message += `   –û—à–∏–±–∫–∞: ${err.message}\n`;
    }
  } else {
    message += `\n‚ö†Ô∏è ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n`;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ
  try {
    const botInfo = await bot.telegram.getMe();
    const member = await bot.telegram.getChatMember(channelId, botInfo.id);
    message += `\nüìã –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ: ${member.status}\n`;
    if (member.status === 'administrator') {
      message += `   ‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
    }
  } catch (error) {
    const err = error as Error;
    message += `\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞: ${err.message}\n`;
  }
  
  await ctx.reply(message, { parse_mode: 'HTML' });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
bot.command('status', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  const status = scheduler.getSchedulerStatus();

  await ctx.reply(
    `üìä <b>–°–¢–ê–¢–£–° –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê</b>\n\n` +
      `‚öôÔ∏è –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${status.isRunning ? 'üü¢ <b>–ê–∫—Ç–∏–≤–µ–Ω</b>' : 'üî¥ <b>–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>'}\n` +
      `üåô –í–µ—á–µ—Ä–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞: ${status.isDailyRunning ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n` +
      `‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${status.isMorningRunning ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' : 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}\n\n` +
      `üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: <code>${status.description}</code>\n` +
      `üïê –í—ã—Ä–∞–∂–µ–Ω–∏—è: <code>${status.cronExpression}</code>\n` +
      `üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <code>${status.timezone}</code>\n\n` +
      `üïê <b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö):</b> <code>${status.currentTime}</code>\n` +
      `‚è∞ <b>–°–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—É—Å–∫–∏:</b>\n<code>${status.nextRunTime}</code>\n\n` +
      `üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> ${status.usersCount}\n` +
      `üîë <b>Admin ID:</b> <code>${status.adminChatId}</code>\n` +
      `üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n<code>${
        status.usersList.length > 0 ? status.usersList.join(', ') : '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
      }</code>`,
    { parse_mode: 'HTML' }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
bot.command('test_schedule', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π cron job –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –º–∏–Ω—É—Ç—É
  const now = new Date();
  const nextMinute = (now.getMinutes() + 1) % 60;
  const nextHour = nextMinute === 0 ? now.getHours() + 1 : now.getHours();
  const cronExpression = `${nextMinute} ${nextHour} * * *`;

  await ctx.reply(
    `üß™ <b>–¢–ï–°–¢ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê</b>\n\n` +
      `‚è±Ô∏è Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: <code>${cronExpression}</code>\n` +
      `üïê –ó–∞–ø—É—Å–∫ –≤: <code>${String(nextHour).padStart(2, '0')}:${String(nextMinute).padStart(2, '0')}</code>\n` +
      `üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <code>Europe/Moscow</code>\n\n` +
      `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...`,
    { parse_mode: 'HTML' }
  );

  const testJob = require('node-cron').schedule(
    cronExpression,
    async () => {
      try {
        logger.info('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ cron job');
        await scheduler.sendDailyMessage(chatId);
        await ctx.reply('‚úÖ üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        testJob.stop();
        testJob.destroy();
      } catch (e) {
        const error = e as Error;
        botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ cron job');
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n<code>${error}</code>`, { parse_mode: 'HTML' });
        testJob.stop();
        testJob.destroy();
      }
    },
    {
      scheduled: true,
      timezone: 'Europe/Moscow',
    }
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
bot.command('test_now', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  await ctx.reply('üß™ <b>–ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –¢–ï–°–¢ –†–ê–°–°–´–õ–ö–ò</b>\n\n–ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å...', { parse_mode: 'HTML' });

  try {
    logger.info('–ó–∞–ø—É—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏');
    await scheduler.sendDailyMessagesToAll(adminChatId);
    await ctx.reply('‚úÖ üß™ –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏');
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ —Ä–∞—Å—Å—ã–ª–∫–∏:\n<code>${error}</code>`, {
      parse_mode: 'HTML',
    });
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
bot.command('test_reminder', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  await ctx.reply(
    'üß™ <b>–¢–ï–°–¢ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø</b>\n\n' +
    '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥...\n' +
    '–û–Ω–æ –ø—Ä–∏–¥–µ—Ç –≤–∞–º –≤ –ª–∏—á–∫—É',
    { parse_mode: 'HTML' }
  );

  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
  const timeout = setTimeout(async () => {
    const reminderText = 'üê∏ –ü—Ä–∏–≤–µ—Ç! –ù–µ –∑–∞–±—É–¥—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å–ø–µ–ª(–∞)';
    await bot.telegram.sendMessage(chatId, reminderText);
    await ctx.reply('‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
  }, 10 * 1000); // 10 —Å–µ–∫—É–Ω–¥

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º timeout –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
  scheduler['reminderTimeouts'].set(chatId, timeout);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.command('test_reply', async ctx => {
  const chatId = ctx.chat.id;
  const chatType = ctx.chat.type;
  const CHAT_ID = scheduler.getChatId();
  
  await ctx.reply(
    `üß™ <b>–¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–ô</b>\n\n` +
    `üìç –¢–µ–∫—É—â–∏–π —á–∞—Ç ID: <code>${chatId}</code>\n` +
    `üìù –¢–∏–ø —á–∞—Ç–∞: <code>${chatType}</code>\n` +
    `üéØ –¶–µ–ª–µ–≤–æ–π CHAT_ID: <code>${CHAT_ID || '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}</code>\n` +
    `‚úÖ –ë–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${!CHAT_ID || chatId === CHAT_ID ? '–î–ê' : '–ù–ï–¢'}\n\n` +
    `–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞...`,
    { parse_mode: 'HTML' }
  );
});

// ========== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –õ–û–ì–û–í ==========

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∞–º–∏
function createTempLogFile(logs: any[], filename: string): string {
  try {
    const tempDir = path.join(process.cwd(), 'temp');

    botLogger.debug({ tempDir, filename, logsCount: logs.length }, '–°–æ–∑–¥–∞—é –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤');

    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
      botLogger.debug({ tempDir }, '–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è temp');
    }

    const filePath = path.join(tempDir, filename);
    let content = '=== –°–ò–°–¢–ï–ú–ù–´–ï –õ–û–ì–ò ===\n\n';

    logs.forEach((log, index) => {
      const timestamp = new Date(log.timestamp).toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });

      content += `[${timestamp}] ${log.level.toUpperCase()} #${log.id}\n`;
      content += `–°–æ–æ–±—â–µ–Ω–∏–µ: ${log.message}\n`;

      if (log.data) {
        try {
          const data = JSON.parse(log.data);
          content += `–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(data, null, 2)}\n`;
        } catch {
          content += `–î–∞–Ω–Ω—ã–µ: ${log.data}\n`;
        }
      }

      content += `–ü—Ä–æ—á–∏—Ç–∞–Ω–æ: ${log.is_read ? '–î–∞' : '–ù–µ—Ç'}\n`;
      content += '---\n\n';
    });

    fs.writeFileSync(filePath, content, 'utf8');
    botLogger.debug({ filePath, contentLength: content.length }, '–§–∞–π–ª –ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω');
    return filePath;
  } catch (error) {
    const err = error as Error;
    botLogger.error({ error: err.message, stack: err.stack, filename }, '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤');
    throw err;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function cleanupTempFile(filePath: string) {
  try {
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
    }
  } catch (error) {
    const err = error as Error;
    botLogger.warn({ error: err.message }, '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤
function formatLogEntry(log: any, index: number): string {
  const levelEmojis: Record<string, string> = {
    trace: 'üîç',
    debug: 'üêõ',
    info: 'üìù',
    warn: '‚ö†Ô∏è',
    error: '‚ùå',
    fatal: 'üíÄ',
  };

  const emoji = levelEmojis[log.level] || 'üìÑ';
  const timestamp = new Date(log.timestamp).toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
    year: '2-digit',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
  });

  const readStatus = log.is_read ? '‚úÖ' : 'üÜï';

  let message = log.message;
  if (message.length > 100) {
    message = message.substring(0, 97) + '...';
  }

  let result = `${readStatus} ${emoji} <b>#${log.id}</b> [${timestamp}]\n<code>${message}</code>`;

  if (log.data) {
    try {
      const data = JSON.parse(log.data);
      const dataStr = JSON.stringify(data, null, 2);
      if (dataStr.length <= 200) {
        result += `\n<pre>${dataStr}</pre>`;
      } else {
        result += `\n<i>üìé –î–∞–Ω–Ω—ã–µ: ${dataStr.length} —Å–∏–º–≤–æ–ª–æ–≤</i>`;
      }
    } catch {
      result += `\n<i>üìé –î–∞–Ω–Ω—ã–µ: ${log.data.length} —Å–∏–º–≤–æ–ª–æ–≤</i>`;
    }
  }

  return result;
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
bot.command('logs', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  try {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ —É—Ä–æ–≤–Ω—è INFO –∏ –≤—ã—à–µ
    const logs = getRecentUnreadInfoLogs(7, 0);
    const totalCount = getLogsCount();
    const unreadCount = getUnreadLogsCount();

    if (logs.length === 0) {
      await ctx.reply(
        'üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\nüì≠ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ INFO+ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîç –§–∏–ª—å—Ç—Ä" –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–æ–≤',
        {
          parse_mode: 'HTML',
        }
      );
      return;
    }

    let message = `üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\n`;
    message += `üìä –í—Å–µ–≥–æ: ${totalCount} | üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\n`;
    message += `üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: ${logs.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö | üîç –§–∏–ª—å—Ç—Ä: INFO –∏ –≤—ã—à–µ\n\n`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è
    let testMessage = message;
    logs.forEach((log, index) => {
      testMessage += formatLogEntry(log, index) + '\n\n';
    });

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', callback_data: 'logs_prev_0_info+' },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'logs_stats' },
          { text: '–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', callback_data: 'logs_next_7_info+' },
        ],
        [
          { text: 'üîç –§–∏–ª—å—Ç—Ä', callback_data: 'logs_filter_menu' },
          { text: '‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: 'logs_mark_visible_read' },
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'logs_refresh_0_info+' },
        ],
        [{ text: 'üìÅ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ —Ñ–∞–π–ª', callback_data: 'logs_download_0_info+' }],
      ],
    };

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (> 3500 —Å–∏–º–≤–æ–ª–æ–≤), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
    if (testMessage.length > 3500) {
      const timestamp = new Date().toISOString().slice(0, 16).replace('T', '_').replace(/:/g, '-');
      const filename = `logs_${timestamp}.txt`;
      const filePath = createTempLogFile(logs, filename);

      try {
        await ctx.replyWithDocument(
          { source: filePath, filename },
          {
            caption: `üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\nüìä –í—Å–µ–≥–æ: ${totalCount} | üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\nüìÑ –í —Ñ–∞–π–ª–µ: ${logs.length} –∑–∞–ø–∏—Å–µ–π | üîç –§–∏–ª—å—Ç—Ä: –í—Å–µ`,
            parse_mode: 'HTML',
            reply_markup: keyboard,
          }
        );
      } finally {
        cleanupTempFile(filePath);
      }
    } else {
      logs.forEach((log, index) => {
        message += formatLogEntry(log, index) + '\n\n';
      });

      await ctx.reply(message, {
        parse_mode: 'HTML',
        reply_markup: keyboard,
      });
    }
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /logs');
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤:\n<code>${error}</code>`, {
      parse_mode: 'HTML',
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
bot.action(/logs_(.+)_(\d+)_(.+)/, async ctx => {
  const chatId = ctx.chat?.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  if (chatId !== adminChatId) {
    await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    return;
  }

  const action = ctx.match![1];
  const offset = parseInt(ctx.match![2]);
  const levelFilter = ctx.match![3] === 'all' ? null : ctx.match![3];

  try {
    let newOffset = offset;

    switch (action) {
      case 'prev':
        newOffset = Math.max(0, offset - 7);
        break;
      case 'next':
        newOffset = offset + 7;
        break;
      case 'refresh':
        newOffset = offset;
        break;
      default:
        await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
        return;
    }

    let logs;
    if (levelFilter === 'unread') {
      logs = getRecentUnreadLogs(7, newOffset);
    } else if (levelFilter === 'info+') {
      logs = getRecentUnreadInfoLogs(7, newOffset);
    } else if (levelFilter && levelFilter !== 'all') {
      logs = getRecentLogsByLevel(levelFilter, 7, newOffset);
    } else {
      logs = getRecentLogs(7, newOffset);
    }
    const totalCount = getLogsCount();
    const unreadCount = getUnreadLogsCount();
    const filterSuffix = levelFilter || 'all';
    let filterName: string;
    if (!levelFilter || levelFilter === 'all') {
      filterName = '–í—Å–µ';
    } else if (levelFilter === 'unread') {
      filterName = '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ';
    } else if (levelFilter === 'info+') {
      filterName = 'INFO –∏ –≤—ã—à–µ';
    } else {
      filterName = levelFilter.toUpperCase();
    }

    if (logs.length === 0) {
      await ctx.answerCbQuery('üì≠ –õ–æ–≥–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç');
      return;
    }

    let message = `üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\n`;
    message += `üìä –í—Å–µ–≥–æ: ${totalCount} | üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\n`;
    message += `üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: ${logs.length} (–ø–æ–∑–∏—Ü–∏—è ${newOffset + 1}-${
      newOffset + logs.length
    }) | üîç –§–∏–ª—å—Ç—Ä: ${filterName}\n\n`;

    logs.forEach((log, index) => {
      message += formatLogEntry(log, index) + '\n\n';
    });

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', callback_data: `logs_prev_${newOffset}_${filterSuffix}` },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'logs_stats' },
          { text: '–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', callback_data: `logs_next_${newOffset}_${filterSuffix}` },
        ],
        [
          { text: 'üîç –§–∏–ª—å—Ç—Ä', callback_data: 'logs_filter_menu' },
          { text: '‚úÖ –í—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: 'logs_mark_all_read' },
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: `logs_refresh_${newOffset}_${filterSuffix}` },
        ],
        [{ text: 'üìÅ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ —Ñ–∞–π–ª', callback_data: `logs_download_${newOffset}_${filterSuffix}` }],
      ],
    };

    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: keyboard,
    });

    await ctx.answerCbQuery();
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ª–æ–≥–∞–º');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ª–æ–≥–æ–≤
bot.action('logs_filter_menu', async ctx => {
  const chatId = ctx.chat?.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  if (chatId !== adminChatId) {
    await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    return;
  }

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üìÑ –í—Å–µ', callback_data: 'logs_filter_all' },
        { text: 'üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ', callback_data: 'logs_filter_unread' },
        { text: 'üìù INFO+', callback_data: 'logs_filter_info+' },
      ],
      [
        { text: 'üêõ DEBUG', callback_data: 'logs_filter_debug' },
        { text: 'üìù INFO', callback_data: 'logs_filter_info' },
      ],
      [
        { text: '‚ö†Ô∏è WARN', callback_data: 'logs_filter_warn' },
        { text: '‚ùå ERROR', callback_data: 'logs_filter_error' },
        { text: 'üíÄ FATAL', callback_data: 'logs_filter_fatal' },
      ],
      [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ª–æ–≥–∞–º', callback_data: 'logs_refresh_0_info+' }],
    ],
  };

  await ctx.editMessageText('üîç <b>–í–´–ë–ï–†–ò–¢–ï –£–†–û–í–ï–ù–¨ –õ–û–ì–û–í</b>', {
    parse_mode: 'HTML',
    reply_markup: keyboard,
  });

  await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é
bot.action(/logs_filter_(.+)/, async ctx => {
  const chatId = ctx.chat?.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  if (chatId !== adminChatId) {
    await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    return;
  }

  const level = ctx.match![1];
  const levelFilter = level === 'all' ? null : level;
  const filterSuffix = level;
  let filterName: string;

  if (level === 'all') {
    filterName = '–í—Å–µ';
  } else if (level === 'unread') {
    filterName = '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ';
  } else if (level === 'info+') {
    filterName = 'INFO –∏ –≤—ã—à–µ';
  } else {
    filterName = level.toUpperCase();
  }

  try {
    let logs;
    if (level === 'unread') {
      logs = getRecentUnreadLogs(7, 0);
    } else if (level === 'info+') {
      logs = getRecentUnreadInfoLogs(7, 0);
    } else if (levelFilter && level !== 'all') {
      logs = getRecentLogsByLevel(levelFilter, 7, 0);
    } else {
      logs = getRecentLogs(7, 0);
    }

    const totalCount = getLogsCount();
    const unreadCount = getUnreadLogsCount();

    if (logs.length === 0) {
      await ctx.answerCbQuery('üì≠ –õ–æ–≥–æ–≤ —Å —Ç–∞–∫–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º –Ω–µ—Ç');
      return;
    }

    let message = `üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\n`;
    message += `üìä –í—Å–µ–≥–æ: ${totalCount} | üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\n`;

    const displayCount = level === 'unread' ? unreadCount : totalCount;
    message += `üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: ${logs.length} –∏–∑ ${displayCount} | üîç –§–∏–ª—å—Ç—Ä: ${filterName}\n\n`;

    logs.forEach((log, index) => {
      message += formatLogEntry(log, index) + '\n\n';
    });

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', callback_data: `logs_prev_0_${filterSuffix}` },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'logs_stats' },
          { text: '–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', callback_data: `logs_next_7_${filterSuffix}` },
        ],
        [
          { text: 'üîç –§–∏–ª—å—Ç—Ä', callback_data: 'logs_filter_menu' },
          { text: '‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: 'logs_mark_visible_read' },
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: `logs_refresh_0_${filterSuffix}` },
        ],
        [{ text: 'üìÅ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ —Ñ–∞–π–ª', callback_data: `logs_download_0_${filterSuffix}` }],
      ],
    };

    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: keyboard,
    });

    await ctx.answerCbQuery(`üîç –§–∏–ª—å—Ç—Ä: ${filterName}`);
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤
bot.action('logs_stats', async ctx => {
  const chatId = ctx.chat?.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  if (chatId !== adminChatId) {
    await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    return;
  }

  try {
    const stats = getLogsStatistics();
    const totalCount = getLogsCount();
    const unreadCount = getUnreadLogsCount();

    let message = `üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–û–ì–û–í</b>\n\n`;
    message += `üìÑ –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: ${totalCount}\n`;
    message += `üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\n\n`;
    message += `<b>–ü–æ —É—Ä–æ–≤–Ω—è–º:</b>\n`;

    stats.forEach(stat => {
      const levelEmojis: Record<string, string> = {
        trace: 'üîç',
        debug: 'üêõ',
        info: 'üìù',
        warn: '‚ö†Ô∏è',
        error: '‚ùå',
        fatal: 'üíÄ',
      };

      const emoji = levelEmojis[stat.level] || 'üìÑ';
      const percentage = ((stat.count / totalCount) * 100).toFixed(1);
      message += `${emoji} ${stat.level.toUpperCase()}: ${stat.count} (${percentage}%)`;
      if (stat.unread_count > 0) {
        message += ` | üÜï ${stat.unread_count}`;
      }
      message += '\n';
    });

    const keyboard = {
      inline_keyboard: [[{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ª–æ–≥–∞–º', callback_data: 'logs_refresh_0_all' }]],
    };

    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: keyboard,
    });

    await ctx.answerCbQuery();
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
bot.action('logs_mark_all_read', async ctx => {
  const chatId = ctx.chat?.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  if (chatId !== adminChatId) {
    await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    return;
  }

  try {
    markAllLogsAsRead();
    await ctx.answerCbQuery('‚úÖ –í—Å–µ –ª–æ–≥–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const logs = getRecentLogs(7, 0);
    const totalCount = getLogsCount();
    const unreadCount = getUnreadLogsCount();

    let message = `üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\n`;
    message += `üìä –í—Å–µ–≥–æ: ${totalCount} | üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\n`;
    message += `üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: ${logs.length} –∏–∑ ${totalCount} | üîç –§–∏–ª—å—Ç—Ä: –í—Å–µ\n\n`;

    logs.forEach((log, index) => {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_read = true –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      log.is_read = true;
      message += formatLogEntry(log, index) + '\n\n';
    });

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', callback_data: 'logs_prev_0_all' },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'logs_stats' },
          { text: '–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', callback_data: 'logs_next_7_all' },
        ],
        [
          { text: 'üîç –§–∏–ª—å—Ç—Ä', callback_data: 'logs_filter_menu' },
          { text: '‚úÖ –í—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: 'logs_mark_all_read' },
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'logs_refresh_0_all' },
        ],
        [{ text: 'üìÅ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ —Ñ–∞–π–ª', callback_data: 'logs_download_0_all' }],
      ],
    };

    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: keyboard,
    });
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö –ª–æ–≥–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ª–æ–≥–æ–≤');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤–∏–¥–∏–º—ã—Ö –ª–æ–≥–æ–≤ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
bot.action('logs_mark_visible_read', async ctx => {
  const chatId = ctx.chat?.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  if (chatId !== adminChatId) {
    await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    return;
  }

  try {
    // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ª–æ–≥–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    // –≠—Ç–æ —Å–ª–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–∑ callback, –ø–æ—ç—Ç–æ–º—É –ø–æ–∫–∞ —Å–¥–µ–ª–∞–µ–º simple approach

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö INFO+ –ª–æ–≥–æ–≤ (—Ç–µ–∫—É—â–∏–µ –≤–∏–¥–∏–º—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const logs = getRecentUnreadInfoLogs(7, 0);

    if (logs.length === 0) {
      await ctx.answerCbQuery('üì≠ –ù–µ—Ç –≤–∏–¥–∏–º—ã—Ö –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏');
      return;
    }

    // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –ª–æ–≥–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    const logIds = logs.map(log => log.id);
    markLogsAsRead(logIds);

    await ctx.answerCbQuery(`‚úÖ –ü–æ–º–µ—á–µ–Ω–æ ${logs.length} –ª–æ–≥–æ–≤ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ç–µ –∂–µ –ª–æ–≥–∏ –Ω–æ —É–∂–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    const totalCount = getLogsCount();
    const unreadCount = getUnreadLogsCount();

    let message = `üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\n`;
    message += `üìä –í—Å–µ–≥–æ: ${totalCount} | üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\n`;
    message += `üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: ${logs.length} –ª–æ–≥–æ–≤ (–ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ) | üîç –§–∏–ª—å—Ç—Ä: –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ\n\n`;

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    logs.forEach((log, index) => {
      log.is_read = true;
      message += formatLogEntry(log, index) + '\n\n';
    });

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', callback_data: 'logs_prev_0_info+' },
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'logs_stats' },
          { text: '–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', callback_data: 'logs_next_7_info+' },
        ],
        [
          { text: 'üîç –§–∏–ª—å—Ç—Ä', callback_data: 'logs_filter_menu' },
          { text: '‚úÖ –£–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: 'logs_mark_visible_read' },
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'logs_refresh_0_info+' },
        ],
        [{ text: 'üìÅ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ —Ñ–∞–π–ª', callback_data: 'logs_download_0_info+' }],
      ],
    };

    await ctx.editMessageText(message, {
      parse_mode: 'HTML',
      reply_markup: keyboard,
    });
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤–∏–¥–∏–º—ã—Ö –ª–æ–≥–æ–≤');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ª–æ–≥–æ–≤');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
bot.action(/log_read_(\d+)/, async ctx => {
  const chatId = ctx.chat?.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  if (chatId !== adminChatId) {
    await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    return;
  }

  const logId = parseInt(ctx.match![1]);

  try {
    markLogAsRead(logId);
    await ctx.answerCbQuery(`‚úÖ –õ–æ–≥ #${logId} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π`);
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –ª–æ–≥–∞');
    await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ª–æ–≥–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ —Ñ–∞–π–ª–æ–º
bot.action(/logs_download_(\d+)_(.+)/, async ctx => {
  const chatId = ctx.chat?.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  if (chatId !== adminChatId) {
    await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    return;
  }

  const offset = parseInt(ctx.match![1]);
  const levelFilter = ctx.match![2] === 'all' ? null : ctx.match![2];

  try {
    await ctx.answerCbQuery('üì• –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ñ–∞–π–ª...');

    // –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –ª–æ–≥–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
    let logs;
    if (levelFilter === 'unread') {
      logs = getRecentUnreadLogs(100, offset);
    } else if (levelFilter === 'info+') {
      logs = getRecentUnreadInfoLogs(100, offset);
    } else if (levelFilter && levelFilter !== 'all') {
      logs = getRecentLogsByLevel(levelFilter, 100, offset);
    } else {
      logs = getRecentLogs(100, offset);
    }

    if (logs.length === 0) {
      await ctx.reply('üì≠ –õ–æ–≥–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      return;
    }

    const timestamp = new Date().toISOString().slice(0, 16).replace('T', '_').replace(/:/g, '-');
    const filterSuffix = levelFilter ? `_${levelFilter}` : '';
    const filename = `logs${filterSuffix}_${timestamp}.txt`;
    const filePath = createTempLogFile(logs, filename);

    try {
      await ctx.replyWithDocument(
        { source: filePath, filename },
        {
          caption: `üìÅ <b>–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤</b>\n\nüìÑ –ó–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ: ${logs.length}\nüîç –§–∏–ª—å—Ç—Ä: ${
            levelFilter ? levelFilter.toUpperCase() : '–í—Å–µ'
          }\nüìÖ –°–æ–∑–¥–∞–Ω: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`,
          parse_mode: 'HTML',
        }
      );
    } finally {
      cleanupTempFile(filePath);
    }
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤');
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤:\n<code>${error.message}</code>`, {
      parse_mode: 'HTML',
    });
  }
});

// ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ü–†–ê–ö–¢–ò–ö ==========

// –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –Ω–∏–∂–µ

/*
bot.action(/practice_postpone_(\d+)/, async ctx => {
  const userId = parseInt(ctx.match![1]);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (ctx.from?.id !== userId) {
      await ctx.answerCbQuery('‚ùå –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å');
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Å
    const chatId = ctx.chat?.id || 0;
    const reminderTime = Date.now() + 60 * 60 * 1000; // 1 —á–∞—Å
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–∫—Ç–∏–∫–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    const session = scheduler.getInteractiveSession(userId);
    if (session) {
      session.practicePostponed = true;
      session.postponedUntil = reminderTime;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    setTimeout(async () => {
      try {
        const reminderMessage = '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É! –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç üíö';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        const messageThreadId = (ctx.callbackQuery.message as any)?.message_thread_id;
        const replyOptions: any = {
          parse_mode: 'HTML'
        };
        
        if (messageThreadId) {
          replyOptions.reply_to_message_id = messageThreadId;
        }
        
        await scheduler.getBot().telegram.sendMessage(chatId, reminderMessage, replyOptions);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        saveMessage(userId, reminderMessage, new Date().toISOString(), 0);
        
      } catch (error) {
        botLogger.error({ error, userId }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–µ');
      }
    }, 60 * 60 * 1000); // 1 —á–∞—Å
    
    await ctx.answerCbQuery('‚è∞ –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ —á–∞—Å');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    saveMessage(userId, `[–û—Ç–ª–æ–∂–∏–ª –ø—Ä–∞–∫—Ç–∏–∫—É –Ω–∞ —á–∞—Å]`, new Date().toISOString(), userId);
    
  } catch (error) {
    botLogger.error({ error, userId }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ practice_postpone');
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});
*/

// ========== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ==========

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
bot.on('message', async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
  if (ctx.message && 
      'forward_from_chat' in ctx.message && 
      ctx.message.forward_from_chat &&
      typeof ctx.message.forward_from_chat === 'object' &&
      'type' in ctx.message.forward_from_chat &&
      ctx.message.forward_from_chat.type === 'channel' &&
      'id' in ctx.message.forward_from_chat &&
      ctx.message.forward_from_chat.id === scheduler.CHANNEL_ID &&
      'forward_from_message_id' in ctx.message) {
    
    const channelMessageId = ctx.message.forward_from_message_id as number;
    const discussionMessageId = ctx.message.message_id;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID
    scheduler.saveForwardedMessage(channelMessageId, discussionMessageId);
    
    const currentTime = new Date();
    botLogger.info({
      channelMessageId,
      discussionMessageId,
      chatId: ctx.chat.id,
      isTopicMessage: ctx.message.is_topic_message,
      messageThreadId: (ctx.message as any).message_thread_id,
      fromChat: ctx.message.forward_from_chat,
      receivedAt: currentTime.toISOString(),
      timestamp: currentTime.getTime()
    }, 'üìé –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞');
  }
  
  // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É)
  if (ctx.message && 'message_thread_id' in ctx.message) {
    botLogger.debug({
      messageThreadId: (ctx.message as any).message_thread_id,
      chatId: ctx.chat.id,
      messageId: ctx.message.message_id
    }, 'üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ/—Ç—Ä–µ–¥–µ');
  }
  
  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
  return next();
});

// –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
// –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ –±—É–¥—É—â–µ–º
const AUTO_RESPONSES_ENABLED = false; // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async ctx => {
  const message = ctx.message.text;
  const chatId = ctx.chat.id;
  const userId = ctx.from?.id || 0;
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
  if (message.startsWith('/')) {
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏ –∫–∞–Ω–∞–ª–∞
  const CHAT_ID = scheduler.getChatId();
  const CHANNEL_ID = scheduler.CHANNEL_ID;
  
  // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  botLogger.info(
    { 
      chatId, 
      CHAT_ID, 
      CHANNEL_ID,
      chatType: ctx.chat.type,
      messageId: ctx.message.message_id,
      fromId: ctx.from?.id,
      fromIsBot: ctx.from?.is_bot,
      fromUsername: ctx.from?.username,
      message: message.substring(0, 50) 
    }, 
    'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è'
  );
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
  if (ctx.from?.is_bot) {
    botLogger.debug({ userId: ctx.from?.id, chatId, isBot: ctx.from?.is_bot }, '–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –ª–∏–±–æ –∏–∑ –∫–∞–Ω–∞–ª–∞, –ª–∏–±–æ –∏–∑ —á–∞—Ç–∞
  const isFromChannel = chatId === CHANNEL_ID;
  const isFromChat = CHAT_ID && chatId === CHAT_ID;
  
  // –í–ê–ñ–ù–û: –í Telegram, –∫–æ–≥–¥–∞ –≥—Ä—É–ø–ø–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–∞–Ω–∞–ª—É, —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã
  // –º–æ–≥—É—Ç –∏–º–µ—Ç—å –¥—Ä—É–≥–æ–π chat_id. –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø —á–∞—Ç–∞.
  const isFromLinkedChat = ctx.chat.type === 'supergroup' && !isFromChannel && !isFromChat;
  
  if (!isFromChannel && !isFromChat && !isFromLinkedChat) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –Ω–µ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    botLogger.debug({ chatId, CHAT_ID, CHANNEL_ID, chatType: ctx.chat.type }, '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
    return;
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë ID –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
  const replyToChatId = isFromLinkedChat ? chatId : (CHAT_ID || chatId);
  
  if (!CHAT_ID && !isFromLinkedChat) {
    botLogger.warn('‚ö†Ô∏è CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env! –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤ —á–∞—Ç');
    return;
  }
  
  botLogger.debug({ userId, chatId, messageLength: message.length }, `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ`);
  
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const TARGET_USER_ID = scheduler.getTargetUserId();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (userId === TARGET_USER_ID) {
    const responseTime = new Date().toISOString();
    updateUserResponse(userId, responseTime);
    botLogger.info({ 
      userId, 
      responseTime,
      targetUserId: TARGET_USER_ID 
    }, `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${TARGET_USER_ID}`);
  } else {
    botLogger.debug({ 
      userId, 
      targetUserId: TARGET_USER_ID
    }, `‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ - –Ω–µ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`);
  }
  
  // –û—á–∏—â–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  scheduler.clearReminder(userId);

  try {
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const userMessageTime = new Date().toISOString();
    saveMessage(userId, message, userMessageTime, userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    const messageThreadId = (ctx.message as any).message_thread_id;
    const isInteractive = await scheduler.handleInteractiveUserResponse(
      userId, 
      message, 
      replyToChatId,
      ctx.message.message_id,
      messageThreadId
    );

    if (isInteractive) {
      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    const lastMessages = getLastNMessages(userId, 7);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞—Ç–∞–º–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    const conversationHistory = lastMessages
      .reverse() // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ –±—ã–ª–∏ –≤–≤–µ—Ä—Ö—É, –Ω–æ–≤—ã–µ –≤–Ω–∏–∑—É
      .map(msg => {
        const date = new Date(msg.sent_time).toLocaleString('ru-RU', {
          timeZone: 'Europe/Moscow',
          day: '2-digit',
          month: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
        });
        const author = msg.author_id === 0 ? '–ë–æ—Ç' : msg.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        return `[${date}] ${author}: ${msg.message_text}`;
      })
      .join('\n');

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const calendarEvents = await getUserTodayEvents(userId);

    botLogger.info(
      {
        userId,
        chatId,
        hasConversationHistory: !!conversationHistory,
        hasCalendarEvents: !!calendarEvents,
      },
      'ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
    );
    
    if (AUTO_RESPONSES_ENABLED) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM
      const textResponse = await generateUserResponse(message, conversationHistory, calendarEvents || undefined);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∞—Ç
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã - –æ—Ç–≤–µ—á–∞–µ–º —Ç—É–¥–∞ –∂–µ
      // –ò–Ω–∞—á–µ - –≤ CHAT_ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
      await bot.telegram.sendMessage(replyToChatId, textResponse, { 
        reply_parameters: { 
          message_id: ctx.message.message_id,
          chat_id: chatId // —É–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        } 
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î (author_id = 0 –¥–ª—è –±–æ—Ç–∞)
      const botResponseTime = new Date().toISOString();
      saveMessage(userId, textResponse, botResponseTime, 0);

      botLogger.info({ userId, chatId, responseLength: textResponse.length }, '‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
    } else {
      botLogger.debug({ userId, chatId }, '‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    }
  } catch (error) {
    const err = error as Error;
    botLogger.error({ error: err.message, stack: err.stack, userId, chatId }, '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');

    // Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ - —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤
    if (AUTO_RESPONSES_ENABLED) {
      const fallbackMessage = '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! ü§ç';
      await bot.telegram.sendMessage(replyToChatId, fallbackMessage, {
        reply_parameters: {
          message_id: ctx.message.message_id,
          chat_id: chatId
        }
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º fallback –æ—Ç–≤–µ—Ç –≤ –ë–î
      const fallbackTime = new Date().toISOString();
      saveMessage(userId, fallbackMessage, fallbackTime, 0);
    }
  }
});

// ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–• –ö–ù–û–ü–û–ö ==========

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback_query (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
bot.on('callback_query', async (ctx, next) => {
  const data = 'data' in ctx.callbackQuery ? ctx.callbackQuery.data : undefined;
  const chatId = ctx.callbackQuery.message?.chat?.id;
  
  botLogger.info({
    callbackData: data,
    fromId: ctx.from?.id,
    chatId: chatId,
    messageId: ctx.callbackQuery.message?.message_id,
    isPracticeDone: data?.startsWith('practice_done_'),
    isPracticePostpone: data?.startsWith('practice_postpone_')
  }, 'üîî –ü–æ–ª—É—á–µ–Ω callback_query');
  
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
  if (data?.startsWith('practice_')) {
    botLogger.info({ 
      callbackData: data,
      willBeHandled: true 
    }, '‚úÖ Callback –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
  }
  
  return next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –æ–∫ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" (–±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ)
bot.action('daily_skip_all', async ctx => {
  try {
    await ctx.answerCbQuery('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
  } catch (error) {
    botLogger.error({ error }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –æ–∫ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"');
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è - –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
bot.action(/skip_neg_(\d+)/, async ctx => {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id;
    const userId = ctx.from?.id;
    
    await ctx.answerCbQuery('üëç –•–æ—Ä–æ—à–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª—é—à–∫–∞–º');
    
    botLogger.info({
      action: 'skip_neg',
      channelMessageId,
      messageId,
      chatId,
      userId
    }, 'üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∏–∑ –ë–î
    const { getInteractivePost, updateTaskStatus, escapeHTML } = await import('./db');
    const post = getInteractivePost(channelMessageId);
    
    if (!post) {
      botLogger.error({ channelMessageId }, '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
      return;
    }
    
    // –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ
    updateTaskStatus(channelMessageId, 1, true);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª—é—à–∫–∏ (–≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ)
    let plushkiText = '2. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b> (—Å–∏—Ç—É–∞—Ü–∏—è+—ç–º–æ—Ü–∏—è)';
    if (post.message_data?.positive_part?.additional_text) {
      plushkiText += `\n<blockquote>${escapeHTML(post.message_data.positive_part.additional_text)}</blockquote>`;
    }
    
    await bot.telegram.sendMessage(chatId!, plushkiText, {
      parse_mode: 'HTML',
      reply_parameters: {
        message_id: messageId!
      }
    });
    
    botLogger.info({ channelMessageId }, '‚úÖ –ü–ª—é—à–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞');
    
  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞');
  }
});

// –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
bot.action('daily_skip_negative', async ctx => {
  await ctx.answerCbQuery('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç.');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞–ª" –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ - –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
bot.action(/pract_done_(\d+)/, async ctx => {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;
    
    await ctx.answerCbQuery('üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –º–æ–ª–æ–¥–µ—Ü!');
    
    botLogger.info({ 
      action: 'pract_done',
      channelMessageId,
      userId,
      chatId: ctx.chat?.id 
    }, 'üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ practice_done');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    const { getInteractivePost, updateTaskStatus, setTrophyStatus } = await import('./db');
    const post = getInteractivePost(channelMessageId);
    
    if (!post) {
      botLogger.error({ channelMessageId }, '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –¥–ª—è practice_done');
      return;
    }
    
    // –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ—Ç—å–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
    updateTaskStatus(channelMessageId, 3, true);
    
    // Fallback —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
    const fallbacks = [
      '–¢—ã –º–æ–ª–æ–¥–µ—Ü! üåü –°–µ–≥–æ–¥–Ω—è –º—ã –æ—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –≤–º–µ—Å—Ç–µ.',
      '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üíö –¢—ã –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–µ–±–µ, –∏ —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ.',
      '–°—É–ø–µ—Ä! ‚ú® –ö–∞–∂–¥–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ.',
      '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! üåà –¢—ã —Å–¥–µ–ª–∞–ª –≤–∞–∂–Ω—ã–π —à–∞–≥ –¥–ª—è —Å–≤–æ–µ–≥–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è.',
      '–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è! üéØ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.',
      '–¢—ã –º–æ–ª–æ–¥–µ—Ü! üåô –ü–æ—Ä–∞ –æ—Ç–¥—ã—Ö–∞—Ç—å.',
      '–Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π! üí´ –¢—ã —Å–¥–µ–ª–∞–ª –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É.',
      '–û—Ç–ª–∏—á–Ω–æ! üåø –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã.',
      '–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è.'
    ];
    const congratsMessage = fallbacks[Math.floor(Math.random() * fallbacks.length)];
    
    await ctx.telegram.sendMessage(
      ctx.chat!.id, 
      congratsMessage,
      {
        parse_mode: 'HTML',
        reply_parameters: {
          message_id: ctx.callbackQuery.message!.message_id
        }
      }
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —Ç—Ä–æ—Ñ–µ—è –∫ –ø–æ—Å—Ç—É –≤ –∫–∞–Ω–∞–ª–µ
    if (!post.trophy_set) {
      try {
        await ctx.telegram.setMessageReaction(
          scheduler.CHANNEL_ID,
          channelMessageId,
          [{ type: 'emoji', emoji: 'üèÜ' }]
        );
        
        // –û—Ç–º–µ—á–∞–µ–º –≤ –ë–î —á—Ç–æ —Ç—Ä–æ—Ñ–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        setTrophyStatus(channelMessageId, true);
        
        botLogger.info({ 
          channelMessageId,
          channelId: scheduler.CHANNEL_ID 
        }, 'üèÜ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è —Ç—Ä–æ—Ñ–µ—è –∫ –ø–æ—Å—Ç—É –≤ –∫–∞–Ω–∞–ª–µ');
      } catch (error) {
        botLogger.error({ 
          error: (error as Error).message,
          channelMessageId,
          channelId: scheduler.CHANNEL_ID
        }, '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ –∫ –ø–æ—Å—Ç—É');
      }
    }
    
  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ practice_done');
  }
});

// –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
bot.action(/practice_done_(\d+)/, async ctx => {
  await ctx.answerCbQuery('–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç.');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å"
bot.action(/practice_postpone_(\d+)/, async ctx => {
  botLogger.info({ 
    action: 'practice_postpone',
    match: ctx.match,
    callbackData: 'data' in ctx.callbackQuery ? ctx.callbackQuery.data : undefined,
    fromId: ctx.from?.id,
    chatId: ctx.chat?.id 
  }, '‚è∞ –í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ practice_postpone');
  
  try {
    const userId = parseInt(ctx.match![1]);
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
    
    await ctx.answerCbQuery('‚è∞ –•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ —á–∞—Å');
    
    // –ò—â–µ–º —Å–µ—Å—Å–∏—é –ø–æ adminChatId –∏–ª–∏ userId
    const session = scheduler.getInteractiveSession(adminChatId) || scheduler.getInteractiveSession(userId);
    if (!session) {
      botLogger.warn({ userId, adminChatId }, '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è practice_postpone');
      return;
    }
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ª–µ–≥–∫–æ –∏–∑–º–µ–Ω–∏—Ç—å)
    const PRACTICE_REMINDER_DELAY_MINUTES = 60; // 60 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    const reminderDelayMs = PRACTICE_REMINDER_DELAY_MINUTES * 60 * 1000;
    
    botLogger.info({ 
      delayMinutes: PRACTICE_REMINDER_DELAY_MINUTES,
      delayMs: reminderDelayMs 
    }, '‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∞–∫—Ç–∏–∫–µ');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è
    session.practicePostponed = true;
    session.postponedUntil = Date.now() + reminderDelayMs;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∂–¥–µ–º —á–µ—Ä–µ–∑ —á–∞—Å
    try {
      const waitMessage = PRACTICE_REMINDER_DELAY_MINUTES === 60 
        ? '‚è≥ –ñ–¥—É —Ç–µ–±—è —á–µ—Ä–µ–∑ —á–∞—Å'
        : `‚è≥ –ñ–¥—É —Ç–µ–±—è —á–µ—Ä–µ–∑ ${PRACTICE_REMINDER_DELAY_MINUTES} ${PRACTICE_REMINDER_DELAY_MINUTES === 1 ? '–º–∏–Ω—É—Ç—É' : '–º–∏–Ω—É—Ç'}`;
        
      const waitOptions: any = {
        parse_mode: 'HTML',
        reply_to_message_id: ctx.callbackQuery.message?.message_id
      };
      
      await ctx.telegram.sendMessage(
        ctx.chat!.id,
        waitMessage,
        waitOptions
      );
      
      botLogger.info({ userId }, '‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è');
    } catch (error) {
      botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è');
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    setTimeout(async () => {
      try {
        botLogger.info({ 
          userId,
          chatId: ctx.chat?.id 
        }, 'üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∞–∫—Ç–∏–∫–µ');
        
        const reminderMessage = '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É! –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç üíö';
        
        // –í –≥—Ä—É–ø–ø–∞—Ö —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ reply_to_message_id
        const sendOptions: any = {
          parse_mode: 'HTML',
          reply_to_message_id: ctx.callbackQuery.message?.message_id
        };
        
        await ctx.telegram.sendMessage(
          ctx.chat!.id,
          reminderMessage,
          sendOptions
        );
        
        botLogger.info({ userId }, '‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∞–∫—Ç–∏–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } catch (error) {
        botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
      }
    }, reminderDelayMs);
    
  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ practice_postpone');
  }
});


// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞

// –ù–ï –æ—á–∏—â–∞–µ–º pending updates - –ø—É—Å—Ç—å Telegraf –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
async function clearPendingUpdates() {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é o webhook
    const webhookResponse = await fetch(`https://api.telegram.org/bot${token}/getWebhookInfo`);
    const webhookData = await webhookResponse.json();
    
    if (webhookData.ok && webhookData.result.pending_update_count > 0) {
      logger.info({ 
        pendingCount: webhookData.result.pending_update_count 
      }, 'üîÑ –ù–∞–π–¥–µ–Ω—ã pending updates, Telegraf –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç');
    } else {
      logger.info('‚úÖ –û—á–µ—Ä–µ–¥—å updates –ø—É—Å—Ç–∞');
    }
  } catch (error) {
    logger.warn({ error: (error as Error).message }, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥—å updates');
  }
}

// --- Telegraf polling ---
clearPendingUpdates()
  .then(() => bot.launch())
  .then(() => {
    logger.info({ pid: process.pid, ppid: process.ppid }, 'üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');
    
    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
    logger.info('‚úÖ Polling –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥');
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.info({
      handlers: [
        'callback_query (–æ–±—â–∏–π)',
        'daily_skip_all',
        'daily_skip_negative', 
        'practice_done_*',
        'practice_postpone_*'
      ]
    }, 'üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫');
  })
  .catch(error => {
    logger.error({ error: error.message, stack: error.stack }, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞');
    process.exit(1);
  });

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—É—Å–∫–µ
const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
if (adminChatId) {
  const processInfo = `PID: ${process.pid}${process.env.pm_id ? ` | PM2 ID: ${process.env.pm_id}` : ''}`;
  bot.telegram
    .sendMessage(
      adminChatId, 
      `üöÄ <b>–ë–û–¢ –ó–ê–ü–£–©–ï–ù</b>\n\n` +
      `–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling\n` +
      `üîß ${processInfo}`, 
      { parse_mode: 'HTML' }
    )
    .catch(error => {
      logger.error({ error: error.message, adminChatId }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—É—Å–∫–µ');
    });
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
  logger.info('üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGINT)');
  scheduler.destroy();
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  logger.info('üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGTERM)');
  scheduler.destroy();
  bot.stop('SIGTERM');
});
