import { config } from 'dotenv';
import { Telegraf } from 'telegraf';
import { CalendarService } from './calendar';
import { logger } from './logger';
import { Scheduler } from './scheduler';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
import { wrapTelegramApi } from './message-handler';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
import { registerMiddleware } from './middleware';
import { registerUserCommands } from './commands/user';
import { registerAdminCommands } from './commands/admin';
import { registerCallbackHandlers } from './handlers/callbacks';
import { registerMessageHandlers } from './handlers/messages';
import { registerInlineHandlers } from './handlers/inline';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã
import { createOAuthServer } from './servers/oauth';
import { createWebhookServer } from './servers/webhook';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã
import { clearPendingUpdates } from './utils/clear-updates';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
logger.info(
  {
    IS_TEST_BOT: process.env.IS_TEST_BOT,
    TOKEN_PREFIX: process.env.TELEGRAM_BOT_TOKEN?.substring(0, 10) + '...',
    NODE_ENV: process.env.NODE_ENV,
  },
  'ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'
);

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || '');

// –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º API –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
wrapTelegramApi(bot);

// –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
const calendarService = new CalendarService();
const scheduler = new Scheduler(bot, calendarService);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
registerMiddleware(bot, scheduler);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
registerUserCommands(bot, scheduler, calendarService);
registerAdminCommands(bot, scheduler);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
registerCallbackHandlers(bot, scheduler);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
registerMessageHandlers(bot, scheduler);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∑–∞–ø—Ä–æ—Å–æ–≤
registerInlineHandlers(bot);

// –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
bot.command('show_filter', async ctx => {
  try {
    const lastFilterId = 'AgACAgIAAxkBAAIGzmi024_oBkIH9lBHRljpiIz45X1vAAJt-DEbGZqoSTtoREDebC7PAQADAgADeQADNgQ';
    await ctx.reply('üì∏ –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–ü—Ä–µ—É–º–µ–Ω—å—à–µ–Ω–∏–µ):');
    await ctx.replyWithPhoto(lastFilterId);
  } catch (error) {
    await ctx.reply('–û—à–∏–±–∫–∞: ' + (error as Error).message);
  }
});

// –°–æ–∑–¥–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä—ã
createOAuthServer(bot, calendarService, scheduler);
createWebhookServer(scheduler);

// --- Telegraf polling ---
clearPendingUpdates()
  .then(() => bot.launch())
  .then(() => {
    logger.info({ pid: process.pid, ppid: process.ppid }, 'üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
    logger.info('‚úÖ Polling –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥');

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.info(
      {
        handlers: [
          'test_button_click',
          'logs_*',
          'skip_neg_*',
          'skip_schema_*',
          'pract_done_*',
          'pract_delay_*',
          'callback_query (–æ–±—â–∏–π)',
          'daily_skip_all',
          'daily_skip_negative',
          'practice_done_*',
          'practice_postpone_*',
        ],
      },
      'üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫'
    );

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    // –î–∞–µ–º –≤—Ä–µ–º—è –±–æ—Ç—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    setTimeout(async () => {
      logger.info('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞...');
      try {
        await scheduler.checkUncompletedTasks();
        logger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      } catch (error) {
        logger.error({ error: (error as Error).message }, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞');
      }
    }, 5000);
  })
  .catch(error => {
    logger.error({ error: error.message, stack: error.stack }, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞');
    process.exit(1);
  });

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—É—Å–∫–µ
const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
if (adminChatId) {
  const processInfo = `PID: ${process.pid}${process.env.pm_id ? ` | PM2 ID: ${process.env.pm_id}` : ''}`;
  bot.telegram
    .sendMessage(
      adminChatId,
      `üöÄ <b>–ë–û–¢ –ó–ê–ü–£–©–ï–ù</b>\n\n` + `–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling\n` + `üîß ${processInfo}`,
      { parse_mode: 'HTML' }
    )
    .catch(error => {
      logger.error({ error: error.message, adminChatId }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—É—Å–∫–µ');
    });
}

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));