// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
// –†–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞

import { schedulerLogger } from './logger';
import { 
  getInteractivePostByUserMessage,
  getInteractivePostByBotMessage,
  getUncompletedPostsWithState,
  updateInteractivePostState,
  db
} from './db';

export interface DialogContext {
  post: any;
  lastBotMessage?: any;
  lastUserMessage?: any;
  currentState: string;
  userId: number;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–ª—è –õ–Æ–ë–û–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function trackUserMessage(
  userId: number,
  messageId: number,
  messageText: string,
  replyToMessageId?: number,
  messageThreadId?: number
): Promise<DialogContext | null> {
  schedulerLogger.info({
    userId,
    messageId,
    replyToMessageId,
    messageThreadId,
    messagePreview: messageText.substring(0, 30)
  }, 'üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

  let context: DialogContext | null = null;

  // 1. –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–ø–ª–∞–π - —ç—Ç–æ —Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π —Å–ø–æ—Å–æ–±
  if (replyToMessageId) {
    const post = getInteractivePostByBotMessage(replyToMessageId);
    if (post && post.user_id === userId) {
      context = {
        post,
        currentState: post.current_state || 'unknown',
        userId,
        lastBotMessage: { id: replyToMessageId }
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await saveUserMessageLink(post.channel_message_id, messageId, replyToMessageId, userId, messageText);
    }
  }

  // 2. –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–ø–ª–∞—è - –∏—â–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ—Å—Ç—É
  if (!context) {
    const { getUserIncompletePosts } = await import('./db');
    const incompletePosts = getUserIncompletePosts(userId);
    
    if (incompletePosts.length > 0) {
      const lastPost = incompletePosts[0];
      context = {
        post: lastPost,
        currentState: lastPost.current_state || determineStateFromPost(lastPost),
        userId
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è
      await saveUserMessageLink(lastPost.channel_message_id, messageId, undefined, userId, messageText);
    }
  }

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ messageThreadId –µ—Å–ª–∏ –µ—Å—Ç—å
  if (!context && messageThreadId) {
    const post = await findPostByThreadId(messageThreadId);
    if (post && post.user_id === userId) {
      context = {
        post,
        currentState: post.current_state || 'unknown',
        userId
      };
      
      await saveUserMessageLink(post.channel_message_id, messageId, undefined, userId, messageText);
    }
  }

  if (context) {
    schedulerLogger.info({
      channelMessageId: context.post.channel_message_id,
      currentState: context.currentState,
      method: replyToMessageId ? 'reply' : messageThreadId ? 'thread' : 'active_post'
    }, '‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞');
  } else {
    schedulerLogger.debug({ userId }, '‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    // –î–∞–∂–µ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º 0 –∫–∞–∫ –ø—Å–µ–≤–¥–æ channelMessageId –¥–ª—è –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await saveUserMessageLink(0, messageId, undefined, userId, messageText);
  }

  return context;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–ª—è –õ–Æ–ë–û–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
export async function trackBotMessage(
  botMessageId: number,
  chatId: number,
  messageType: string,
  replyToUserId?: number,
  channelMessageId?: number
): Promise<void> {
  schedulerLogger.info({
    botMessageId,
    chatId,
    messageType,
    replyToUserId,
    channelMessageId
  }, 'ü§ñ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞');

  // –ï—Å–ª–∏ –µ—Å—Ç—å channelMessageId - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å
  if (channelMessageId) {
    await saveBotMessageLink(channelMessageId, botMessageId, messageType);
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
  if (replyToUserId) {
    const post = getInteractivePostByUserMessage(replyToUserId);
    if (post) {
      await saveBotMessageLink(post.channel_message_id, botMessageId, messageType);
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç channelMessageId –∏ –Ω–µ—Ç —Ä–µ–ø–ª–∞—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (!channelMessageId && !replyToUserId) {
    // –î–ª—è –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º 0 –∫–∞–∫ –ø—Å–µ–≤–¥–æ channelMessageId
    // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–∂–µ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ—Å—Ç–∞–º–∏
    await saveBotMessageLink(0, botMessageId, messageType);
  }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤—è–∑—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveUserMessageLink(
  channelMessageId: number,
  userMessageId: number,
  replyToBotMessageId?: number,
  userId?: number,
  messageText?: string
) {
  try {
    // –ï—Å–ª–∏ channelMessageId = 0, —ç—Ç–æ –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–æ—Å—Ç–∞
    if (channelMessageId === 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π userId –∏–ª–∏ 0
      const finalUserId = userId || 0;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ —Ç–∞–±–ª–∏—Ü—É message_links
      const messagePreview = messageText ? messageText.substring(0, 500) : null;
      const save = db.query(`
        INSERT INTO message_links (
          channel_message_id,
          message_id,
          message_type,
          user_id,
          reply_to_message_id,
          message_preview,
          created_at
        ) VALUES (?, ?, 'user', ?, ?, ?, datetime('now'))
      `);

      save.run(0, userMessageId, finalUserId, replyToBotMessageId || null, messagePreview);
      return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–µ –ø–æ–ª–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const post = await getPostById(channelMessageId);
    if (!post) return;

    const updateData: any = {};
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
    if (!post.user_task1_message_id && post.current_state?.includes('task1')) {
      updateData.user_task1_message_id = userMessageId;
    } else if (!post.user_schema_message_id && post.current_state?.includes('schema')) {
      updateData.user_schema_message_id = userMessageId;
    } else if (!post.user_task2_message_id && post.current_state?.includes('task2')) {
      updateData.user_task2_message_id = userMessageId;
    }
    
    // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
    const messagePreview = messageText ? messageText.substring(0, 500) : null;
    const save = db.query(`
      INSERT INTO message_links (
        channel_message_id,
        message_id,
        message_type,
        user_id,
        reply_to_message_id,
        message_preview,
        created_at
      ) VALUES (?, ?, 'user', ?, ?, ?, datetime('now'))
    `);

    save.run(channelMessageId, userMessageId, post.user_id, replyToBotMessageId, messagePreview);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
    if (Object.keys(updateData).length > 0) {
      updateData.last_interaction_at = new Date().toISOString();
      updateInteractivePostState(channelMessageId, post.current_state, updateData);
    }
    
  } catch (error) {
    schedulerLogger.error({ error, channelMessageId, userMessageId }, '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
}

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤—è–∑—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç–∞
async function saveBotMessageLink(
  channelMessageId: number,
  botMessageId: number,
  messageType: string
) {
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É —Å–≤—è–∑–µ–π
    const save = db.query(`
      INSERT INTO message_links (
        channel_message_id,
        message_id,
        message_type,
        user_id,
        created_at
      ) VALUES (?, ?, ?, 0, datetime('now'))
    `);
    
    save.run(channelMessageId, botMessageId, `bot_${messageType}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    const updateData: any = {};
    
    switch (messageType) {
      case 'task1':
        updateData.bot_task1_message_id = botMessageId;
        break;
      case 'schema':
        updateData.bot_schema_message_id = botMessageId;
        break;
      case 'task2':
        updateData.bot_task2_message_id = botMessageId;
        break;
      case 'task3':
        updateData.bot_task3_message_id = botMessageId;
        break;
    }
    
    if (Object.keys(updateData).length > 0) {
      const post = await getPostById(channelMessageId);
      if (post) {
        updateInteractivePostState(channelMessageId, post.current_state, updateData);
      }
    }
    
  } catch (error) {
    schedulerLogger.error({ error, channelMessageId, botMessageId }, '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç–∞');
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function getPostById(channelMessageId: number) {
  const get = db.query('SELECT * FROM interactive_posts WHERE channel_message_id = ?');
  const row = get.get(channelMessageId) as any;
  if (row && row.message_data) {
    row.message_data = JSON.parse(row.message_data);
  }
  return row;
}

async function findPostByThreadId(threadId: number) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ thread_mappings –∏ –ø–æ –ø—Ä—è–º–æ–º—É –ø–æ–∏—Å–∫—É
  const { getChannelMessageIdByThreadId } = await import('./db');
  const channelMessageId = getChannelMessageIdByThreadId(threadId);
  
  if (channelMessageId) {
    return getPostById(channelMessageId);
  }
  
  // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const get = db.query(`
    SELECT * FROM interactive_posts 
    WHERE bot_task1_message_id = ? 
       OR bot_schema_message_id = ?
       OR bot_task2_message_id = ?
       OR bot_task3_message_id = ?
    LIMIT 1
  `);
  
  const row = get.get(threadId, threadId, threadId, threadId) as any;
  if (row && row.message_data) {
    row.message_data = JSON.parse(row.message_data);
  }
  return row;
}

function determineStateFromPost(post: any): string {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
  if (!post.task1_completed) {
    return 'waiting_task1';
  } else if (!post.task2_completed) {
    return 'waiting_positive';
  } else if (!post.task3_completed) {
    return 'waiting_task3';
  }
  return 'completed';
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
export async function restoreUncompletedDialogs(bot: any) {
  schedulerLogger.info('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤...');
  
  const uncompletedPosts = getUncompletedPostsWithState();
  
  for (const post of uncompletedPosts) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–∞
      const history = await getMessageHistory(post.channel_message_id);
      
      schedulerLogger.info({
        channelMessageId: post.channel_message_id,
        userId: post.user_id,
        currentState: post.current_state,
        messageCount: history.length,
        lastInteraction: post.last_interaction_at
      }, 'üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å
      const action = determineNextAction(post, history);
      
      if (action) {
        schedulerLogger.info({
          action: action.type,
          channelMessageId: post.channel_message_id
        }, '‚û°Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
        
        // –î–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –±–æ—Ç–∞
        // –ó–¥–µ—Å—å –º—ã —Ç–æ–ª—å–∫–æ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      }
      
    } catch (error) {
      schedulerLogger.error({ 
        error, 
        postId: post.channel_message_id 
      }, '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞');
    }
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–∞
async function getMessageHistory(channelMessageId: number) {
  const get = db.query(`
    SELECT * FROM message_links
    WHERE channel_message_id = ?
    ORDER BY created_at ASC
  `);
  
  return get.all(channelMessageId) as any[];
}

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
function determineNextAction(post: any, history: any[]) {
  const lastUserMessage = history.filter(m => m.message_type === 'user').pop();
  const lastBotMessage = history.filter(m => m.message_type.startsWith('bot_')).pop();
  
  if (!lastUserMessage || !lastBotMessage) {
    return null;
  }
  
  // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
  const timeSinceLastMessage = Date.now() - new Date(lastUserMessage.created_at).getTime();
  const timeSinceLastBot = Date.now() - new Date(lastBotMessage.created_at).getTime();
  
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –ø–æ—Å–ª–µ –±–æ—Ç–∞ - –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç
  if (new Date(lastUserMessage.created_at) > new Date(lastBotMessage.created_at)) {
    return { type: 'process_user_response', userMessageId: lastUserMessage.message_id };
  }
  
  // –ï—Å–ª–∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º—è - –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
  if (timeSinceLastBot > 2 * 60 * 60 * 1000) { // 2 —á–∞—Å–∞
    return { type: 'send_reminder' };
  }
  
  return null;
}