// –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–ª–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º ID

import { schedulerLogger } from './logger';
import { 
  updateInteractivePostState, 
  getInteractivePostByUserMessage,
  getInteractivePostByBotMessage,
  getUncompletedPostsWithState,
  saveMessage,
  updateTaskStatus
} from './db';

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞ –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
export async function determineUserResponse(
  userId: number,
  messageId: number,
  replyToMessageId?: number,
  messageThreadId?: number
) {
  schedulerLogger.info({
    userId,
    messageId,
    replyToMessageId,
    messageThreadId
  }, 'üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');

  // 1. –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–ø–ª–∞–π - –∏—â–µ–º –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
  if (replyToMessageId) {
    const postByReply = getInteractivePostByBotMessage(replyToMessageId);
    if (postByReply && postByReply.user_id === userId) {
      schedulerLogger.info({
        channelMessageId: postByReply.channel_message_id,
        currentState: postByReply.current_state,
        replyTo: replyToMessageId
      }, '‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç –ø–æ —Ä–µ–ø–ª–∞—é');
      
      return {
        post: postByReply,
        responseType: determineResponseTypeByBotMessage(postByReply, replyToMessageId)
      };
    }
  }

  // 2. –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { getUserIncompletePosts } = await import('./db');
  const incompletePosts = getUserIncompletePosts(userId);
  
  if (incompletePosts.length > 0) {
    const lastPost = incompletePosts[0];
    schedulerLogger.info({
      channelMessageId: lastPost.channel_message_id,
      currentState: lastPost.current_state
    }, '‚úÖ –ù–∞–π–¥–µ–Ω –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    return {
      post: lastPost,
      responseType: lastPost.current_state
    };
  }

  schedulerLogger.info({ userId }, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤');
  return null;
}

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
function determineResponseTypeByBotMessage(post: any, botMessageId: number): string {
  if (post.bot_task1_message_id === botMessageId) {
    return 'waiting_schema'; // –û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
  } else if (post.bot_schema_message_id === botMessageId) {
    return 'waiting_task2'; // –û—Ç–≤–µ—Ç –Ω–∞ —Å—Ö–µ–º—É
  } else if (post.bot_task2_message_id === botMessageId) {
    return 'waiting_task3'; // –û—Ç–≤–µ—Ç –Ω–∞ –ø–ª—é—à–∫–∏
  } else if (post.bot_task3_message_id === botMessageId) {
    return 'waiting_practice'; // –û—Ç–≤–µ—Ç –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  return post.current_state || 'waiting_task1';
}

// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
export async function processUserResponse(
  scheduler: any,
  userId: number,
  messageText: string,
  messageId: number,
  replyToChatId: number,
  replyToMessageId?: number,
  messageThreadId?: number
) {
  const responseInfo = await determineUserResponse(userId, messageId, replyToMessageId, messageThreadId);
  
  if (!responseInfo) {
    return false;
  }

  const { post, responseType } = responseInfo;
  const channelMessageId = post.channel_message_id;

  schedulerLogger.info({
    userId,
    channelMessageId,
    responseType,
    messageText: messageText.substring(0, 50)
  }, 'üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

  switch (responseType) {
    case 'waiting_task1':
    case 'waiting_schema':
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
      await handleFirstTaskResponse(scheduler, post, userId, messageId, messageText, replyToChatId);
      break;
      
    case 'waiting_task2':
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å—Ö–µ–º—É —Ä–∞–∑–±–æ—Ä–∞
      await handleSchemaResponse(scheduler, post, userId, messageId, messageText, replyToChatId);
      break;
      
    case 'waiting_task3':
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–ª—é—à–∫–∏
      await handleSecondTaskResponse(scheduler, post, userId, messageId, messageText, replyToChatId);
      break;
      
    default:
      schedulerLogger.warn({ responseType }, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞');
      return false;
  }

  return true;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
async function handleFirstTaskResponse(
  scheduler: any,
  post: any,
  userId: number,
  userMessageId: number,
  messageText: string,
  replyToChatId: number
) {
  const channelMessageId = post.channel_message_id;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateInteractivePostState(channelMessageId, 'waiting_schema', {
    user_task1_message_id: userMessageId
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É —Ä–∞–∑–±–æ—Ä–∞
  const responseText = `–î–∞–≤–∞–π —Ä–∞–∑–ª–æ–∂–∏–º —Å–∞–º—É—é –±–µ—Å–ø–æ–∫–æ—è—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ —Å—Ö–µ–º–µ: –¢—Ä–∏–≥–≥–µ—Ä - –º—ã—Å–ª–∏ - —á—É–≤—Å—Ç–≤–∞ - —Ç–µ–ª–æ - –¥–µ–π—Å—Ç–≤–∏—è`;
  
  const schemaMessage = await scheduler.bot.telegram.sendMessage(replyToChatId, responseText, {
    parse_mode: 'HTML',
    reply_parameters: {
      message_id: userMessageId
    }
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ö–µ–º–æ–π
  updateInteractivePostState(channelMessageId, 'waiting_schema', {
    bot_schema_message_id: schemaMessage.message_id
  });

  saveMessage(userId, responseText, new Date().toISOString(), 0);
  
  schedulerLogger.info({
    userId,
    channelMessageId,
    schemaMessageId: schemaMessage.message_id
  }, '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ö–µ–º–∞ —Ä–∞–∑–±–æ—Ä–∞');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å—Ö–µ–º—É
async function handleSchemaResponse(
  scheduler: any,
  post: any,
  userId: number,
  userMessageId: number,
  messageText: string,
  replyToChatId: number
) {
  const channelMessageId = post.channel_message_id;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  updateInteractivePostState(channelMessageId, 'waiting_task2', {
    user_schema_message_id: userMessageId
  });
  
  // –¢–µ–ø–µ—Ä—å –æ—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
  updateTaskStatus(channelMessageId, 1, true);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ + –ø–ª—é—à–∫–∏
  const supportText = scheduler.getRandomSupportText();
  const responseText = `<i>${supportText}</i>\n\n${scheduler.buildSecondPart(post.message_data)}`;
  
  const task2Message = await scheduler.bot.telegram.sendMessage(replyToChatId, responseText, {
    parse_mode: 'HTML',
    reply_parameters: {
      message_id: userMessageId
    }
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª—é—à–∫–∞–º–∏
  updateInteractivePostState(channelMessageId, 'waiting_task2', {
    bot_task2_message_id: task2Message.message_id
  });

  saveMessage(userId, responseText, new Date().toISOString(), 0);
  
  schedulerLogger.info({
    userId,
    channelMessageId,
    task2MessageId: task2Message.message_id
  }, '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–ª—é—à–∫–∏');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–ª—é—à–∫–∏
async function handleSecondTaskResponse(
  scheduler: any,
  post: any,
  userId: number,
  userMessageId: number,
  messageText: string,
  replyToChatId: number
) {
  const channelMessageId = post.channel_message_id;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
  updateInteractivePostState(channelMessageId, 'waiting_task3', {
    user_task2_message_id: userMessageId
  });
  
  updateTaskStatus(channelMessageId, 2, true);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
  let finalMessage = '–£ –Ω–∞—Å –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥\n\n';
  if (post.relaxation_type === 'body') {
    finalMessage += '3. <b>–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ç–µ–ª–∞</b>\n–û—Ç –ò—Ä–∏–Ω—ã üëâüèª clck.ru/3LmcNv üëàüèª –∏–ª–∏ —Å–≤–æ–µ';
  } else {
    finalMessage += '3. <b>–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</b>';
  }
  
  const practiceKeyboard = {
    inline_keyboard: [
      [{ text: '‚úÖ –°–¥–µ–ª–∞–ª', callback_data: `pract_done_${channelMessageId}` }],
      [{ text: '‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å', callback_data: `pract_delay_${channelMessageId}` }]
    ]
  };

  const task3Message = await scheduler.bot.telegram.sendMessage(replyToChatId, finalMessage, {
    parse_mode: 'HTML',
    reply_markup: practiceKeyboard,
    reply_parameters: {
      message_id: userMessageId
    }
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  updateInteractivePostState(channelMessageId, 'waiting_task3', {
    bot_task3_message_id: task3Message.message_id
  });

  saveMessage(userId, finalMessage, new Date().toISOString(), 0);
  
  schedulerLogger.info({
    userId,
    channelMessageId,
    task3MessageId: task3Message.message_id
  }, '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ');
}

// –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è checkUncompletedTasks
export async function checkUncompletedTasksV2(scheduler: any) {
  try {
    schedulerLogger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π V2...');
    
    const uncompletedPosts = getUncompletedPostsWithState();
    
    schedulerLogger.info({ 
      count: uncompletedPosts.length
    }, `–ù–∞–π–¥–µ–Ω–æ ${uncompletedPosts.length} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤`);
    
    for (const post of uncompletedPosts) {
      try {
        await processUncompletedPost(scheduler, post);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
      } catch (error) {
        schedulerLogger.error({ 
          error, 
          postId: post.channel_message_id 
        }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞');
      }
    }
    
    schedulerLogger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π V2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
  } catch (error) {
    schedulerLogger.error({ error }, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π V2');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
async function processUncompletedPost(scheduler: any, post: any) {
  const userId = post.user_id;
  const channelMessageId = post.channel_message_id;
  const currentState = post.current_state || 'waiting_task1';
  const CHAT_ID = scheduler.getChatId();
  
  schedulerLogger.info({
    userId,
    channelMessageId,
    currentState,
    lastInteraction: post.last_interaction_at
  }, 'üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
  switch (currentState) {
    case 'waiting_task1':
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
      // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º - –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
      schedulerLogger.info({ channelMessageId }, '–ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ');
      break;
      
    case 'waiting_schema':
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–æ –±–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ö–µ–º—É
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É
      await sendPendingSchema(scheduler, post, CHAT_ID);
      break;
      
    case 'waiting_task2':
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å—Ö–µ–º—É, –Ω–æ –±–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–ª—é—à–∫–∏
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª—é—à–∫–∏
      await sendPendingTask2(scheduler, post, CHAT_ID);
      break;
      
    case 'waiting_task3':
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–ª—é—à–∫–∏, –Ω–æ –±–æ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
      await sendPendingTask3(scheduler, post, CHAT_ID);
      break;
  }
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ö–µ–º—É —Ä–∞–∑–±–æ—Ä–∞ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
async function sendPendingSchema(scheduler: any, post: any, chatId: number) {
  const channelMessageId = post.channel_message_id;
  const threadId = post.thread_id;
  
  const responseText = `–î–∞–≤–∞–π —Ä–∞–∑–ª–æ–∂–∏–º —Å–∞–º—É—é –±–µ—Å–ø–æ–∫–æ—è—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ —Å—Ö–µ–º–µ: –¢—Ä–∏–≥–≥–µ—Ä - –º—ã—Å–ª–∏ - —á—É–≤—Å—Ç–≤–∞ - —Ç–µ–ª–æ - –¥–µ–π—Å—Ç–≤–∏—è`;
  
  const sendOptions: any = {
    parse_mode: 'HTML'
  };
  
  if (threadId) {
    sendOptions.reply_to_message_id = threadId;
  }
  
  const message = await scheduler.bot.telegram.sendMessage(chatId, responseText, sendOptions);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  updateInteractivePostState(channelMessageId, 'waiting_schema', {
    bot_schema_message_id: message.message_id
  });
  
  schedulerLogger.info({ 
    channelMessageId,
    schemaMessageId: message.message_id
  }, '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ö–µ–º–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª—é—à–∫–∏ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
async function sendPendingTask2(scheduler: any, post: any, chatId: number) {
  const channelMessageId = post.channel_message_id;
  const threadId = post.thread_id;
  
  // –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
  updateTaskStatus(channelMessageId, 1, true);
  
  const supportText = scheduler.getRandomSupportText();
  const responseText = `<i>${supportText}</i>\n\n${scheduler.buildSecondPart(post.message_data)}`;
  
  const sendOptions: any = {
    parse_mode: 'HTML'
  };
  
  if (threadId) {
    sendOptions.reply_to_message_id = threadId;
  }
  
  const message = await scheduler.bot.telegram.sendMessage(chatId, responseText, sendOptions);
  
  updateInteractivePostState(channelMessageId, 'waiting_task2', {
    bot_task2_message_id: message.message_id
  });
  
  schedulerLogger.info({ 
    channelMessageId,
    task2MessageId: message.message_id
  }, '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–ª—é—à–∫–∏ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
async function sendPendingTask3(scheduler: any, post: any, chatId: number) {
  const channelMessageId = post.channel_message_id;
  const threadId = post.thread_id;
  
  // –û—Ç–º–µ—á–∞–µ–º –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
  updateTaskStatus(channelMessageId, 2, true);
  
  let finalMessage = '–£ –Ω–∞—Å –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥\n\n';
  if (post.relaxation_type === 'body') {
    finalMessage += '3. <b>–†–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ç–µ–ª–∞</b>\n–û—Ç –ò—Ä–∏–Ω—ã üëâüèª clck.ru/3LmcNv üëàüèª –∏–ª–∏ —Å–≤–æ–µ';
  } else {
    finalMessage += '3. <b>–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</b>';
  }
  
  const practiceKeyboard = {
    inline_keyboard: [
      [{ text: '‚úÖ –°–¥–µ–ª–∞–ª', callback_data: `pract_done_${channelMessageId}` }],
      [{ text: '‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å', callback_data: `pract_delay_${channelMessageId}` }]
    ]
  };
  
  const sendOptions: any = {
    parse_mode: 'HTML',
    reply_markup: practiceKeyboard
  };
  
  if (threadId) {
    sendOptions.reply_to_message_id = threadId;
  }
  
  const message = await scheduler.bot.telegram.sendMessage(chatId, responseText, sendOptions);
  
  updateInteractivePostState(channelMessageId, 'waiting_task3', {
    bot_task3_message_id: message.message_id
  });
  
  schedulerLogger.info({ 
    channelMessageId,
    task3MessageId: message.message_id
  }, '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞');
}