import { Telegraf, Markup } from 'telegraf';
import { botLogger } from './logger';
import { addJoySource, getAllJoySources } from './db';
import { sendWithRetry } from './utils/telegram-retry';
import { generateMessage } from './llm';

/**
 * JoyHandler - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–∞–¥–æ—Å—Ç–∏ –∏ —ç–Ω–µ—Ä–≥–∏–∏"
 *
 * –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
 * 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑—ã–≤–∞–µ—Ç /joy
 * 2. –ë–æ—Ç –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º
 * 3. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –ø–æ—Å—Ç—É –±–æ—Ç –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–∞–¥–æ—Å—Ç–∏
 * 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç
 * 5. –ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ö–æ–≥–¥–∞ –ø–µ—Ä–µ—á–∏—Å–ª–∏—à—å –≤—Å–µ - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ" + –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å üî•"
 * 6. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
 * 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ ‚ö°Ô∏è" –∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
 */
export class JoyHandler {
  private bot: Telegraf;
  private chatId: number; // ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É)
  private userId: number; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ë–î
  private channelMessageId: number; // ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)

  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º)
  // –í–ê–ñ–ù–û: –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∏–∑ Scheduler, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏
  private pendingMessages: Map<string, string[]>;
  // ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–î–æ–±–∞–≤–∏—Ç—å üî•"
  // –í–ê–ñ–ù–û: –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∏–∑ Scheduler, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏
  private lastButtonMessageId: Map<string, number>;

  constructor(
    bot: Telegraf,
    chatId: number,
    userId: number,
    channelMessageId: number,
    pendingMessages: Map<string, string[]>,
    lastButtonMessageId: Map<string, number>
  ) {
    this.bot = bot;
    this.chatId = chatId;
    this.userId = userId;
    this.channelMessageId = channelMessageId;
    this.pendingMessages = pendingMessages;
    this.lastButtonMessageId = lastButtonMessageId;
  }

  /**
   * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å retry
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç reply_parameters –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–¥–∞
   */
  private async sendMessage(
    text: string,
    replyToMessageId?: number,
    extra?: any
  ) {
    try {
      return await sendWithRetry(
        async () => {
          const sendOptions: any = { ...extra };

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º reply_parameters - Telegram —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç—Ä–µ–¥
          if (replyToMessageId) {
            sendOptions.reply_parameters = { message_id: replyToMessageId };
          }

          return await this.bot.telegram.sendMessage(this.chatId, text, sendOptions);
        },
        {
          chatId: this.chatId,
          messageType: 'joy_message',
          userId: this.userId
        },
        {
          maxAttempts: 5,
          intervalMs: 3000
        }
      );
    } catch (error) {
      botLogger.error(
        { error, chatId: this.chatId, replyToMessageId },
        '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ JoyHandler'
      );
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
   */
  async startInteractiveSession(replyToMessageId: number) {
    try {
      const text = '–¢–µ–ø–µ—Ä—å –ø–æ–¥—É–º–∞–π –∏ –Ω–∞–ø–∏—à–∏:\n\n<b>–ß—Ç–æ —Ç–µ–±—è —Ä–∞–¥—É–µ—Ç –∏ –¥–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é? ‚ù§Ô∏è‚Äçüî•</b>';

      const result = await this.sendMessage(text, replyToMessageId, {
        parse_mode: 'HTML'
      });

      botLogger.info(
        { chatId: this.chatId, channelMessageId: this.channelMessageId },
        '–ó–∞–ø—É—â–µ–Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–¥–æ—Å—Ç–∏'
      );

      return result;
    } catch (error) {
      botLogger.error(
        { error, chatId: this.chatId },
        '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞–¥–æ—Å—Ç–∏'
      );
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∑—è—â—É—é –∫–Ω–æ–ø–∫—É
   */
  async handleUserMessage(userMessage: string, userMessageId: number) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
      const sessionKey = `${this.userId}_${this.channelMessageId}`;

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º
      const messages = this.pendingMessages.get(sessionKey) || [];
      messages.push(userMessage);
      this.pendingMessages.set(sessionKey, messages);

      botLogger.info(
        { userId: this.userId, messagesCount: messages.length },
        '–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å'
      );

      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
      const lastButtonId = this.lastButtonMessageId.get(sessionKey);
      if (lastButtonId) {
        try {
          await this.bot.telegram.deleteMessage(this.chatId, lastButtonId);
        } catch (error) {
          botLogger.warn(
            { error, messageId: lastButtonId },
            '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
          );
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
      const buttonText = '–ö–æ–≥–¥–∞ –ø–µ—Ä–µ—á–∏—Å–ª–∏—à—å –≤—Å–µ - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ';
      const result = await this.sendMessage(
        buttonText,
        userMessageId,
        Markup.inlineKeyboard([
          [Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å üî•', `joy_add_${this.channelMessageId}`)]
        ])
      );

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (result && result.message_id) {
        this.lastButtonMessageId.set(sessionKey, result.message_id);
      }

      return result;
    } catch (error) {
      botLogger.error(
        { error, userId: this.userId },
        '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JoyHandler'
      );
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ä–∞–¥–æ—Å—Ç–∏ –≤ –ë–î
   */
  async saveJoySources(replyToMessageId?: number) {
    try {
      const sessionKey = `${this.userId}_${this.channelMessageId}`;
      const messages = this.pendingMessages.get(sessionKey) || [];

      if (messages.length === 0) {
        await this.sendMessage(
          '–¢—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª ü§î\n–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è —Ä–∞–¥—É–µ—Ç!',
          replyToMessageId
        );
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–∞–¥–æ—Å—Ç–∏
      const existingSources = getAllJoySources(this.userId);
      const existingTexts = existingSources.map(s => s.text.toLowerCase());

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      const prompt = `–ó–∞–¥–∞—á–∞: –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–∞–¥–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –°–ü–ò–°–û–ö (—É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω):
${existingSources.length > 0 ? existingSources.map((s, i) => `${i + 1}. ${s.text}`).join('\n') : '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç'}

–ù–û–í–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò (–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):
${messages.map((m, i) => `${i + 1}. ${m}`).join('\n')}

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –ò—Å–ø—Ä–∞–≤—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
2. –£–±–µ—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã:
   - –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ —Å–º—ã—Å–ª—É —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º - –ù–ï –¥–æ–±–∞–≤–ª—è–π –µ–≥–æ
   - –ï—Å–ª–∏ –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ - –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω
3. –°–æ—Ö—Ä–∞–Ω–∏ –∫—Ä–∞—Ç–∫–æ—Å—Ç—å –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê - —Å—Ç—Ä–æ–≥–æ JSON –º–∞—Å—Å–∏–≤:
["–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ 1", "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ 2"]

–ï—Å–ª–∏ –≤—Å–µ –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ - –¥—É–±–ª–∏–∫–∞—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö, –≤–µ—Ä–Ω–∏: []

–í–ï–†–ù–ò –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;

      let uniqueSources: string[] = [];
      try {
        const llmResponse = await generateMessage(prompt);

        // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        const jsonMatch = llmResponse.match(/\[[\s\S]*\]/);
        if (jsonMatch) {
          uniqueSources = JSON.parse(jsonMatch[0]);
        } else {
          botLogger.warn({ llmResponse }, 'LLM –Ω–µ –≤–µ—Ä–Ω—É–ª JSON, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å');
          // –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤—Ä—É—á–Ω—É—é
          uniqueSources = messages.filter(msg =>
            !existingTexts.includes(msg.toLowerCase())
          );
        }
      } catch (error) {
        botLogger.error({ error }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ LLM, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å');
        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤—Ä—É—á–Ω—É—é
        uniqueSources = messages.filter(msg =>
          !existingTexts.includes(msg.toLowerCase())
        );
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
      for (const source of uniqueSources) {
        addJoySource(this.userId, source, 'manual');
      }

      botLogger.info(
        { userId: this.userId, newCount: messages.length, savedCount: uniqueSources.length },
        '–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–∞–¥–æ—Å—Ç–∏ (–ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)'
      );

      // –û—á–∏—â–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      this.pendingMessages.delete(sessionKey);

      // –ù–ï —É–¥–∞–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–î–æ–±–∞–≤–∏—Ç—å" - –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è!
      // –ü—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ
      this.lastButtonMessageId.delete(sessionKey);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–µ–Ω—é (—Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
      await this.showMenu(replyToMessageId);

    } catch (error) {
      botLogger.error(
        { error, userId: this.userId },
        '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ä–∞–¥–æ—Å—Ç–∏'
      );
      throw error;
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞ÔøΩÔøΩ—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ä–∞–¥–æ—Å—Ç–∏
   */
  async showJoyList(replyToMessageId?: number) {
    try {
      const sources = getAllJoySources(this.userId);

      if (sources.length === 0) {
        await this.sendMessage(
          '–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç ü§∑\n–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è —Ä–∞–¥—É–µ—Ç!',
          replyToMessageId
        );
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
      let listText = '<b>–ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–∞–¥–æ—Å—Ç–∏ –∏ —ç–Ω–µ—Ä–≥–∏–∏ ü§©</b>\n\n';
      sources.forEach((source) => {
        listText += `‚ö°Ô∏è ${source.text}\n`;
      });

      await this.sendMessage(listText, replyToMessageId, {
        parse_mode: 'HTML'
      });

      botLogger.info(
        { userId: this.userId, count: sources.length },
        '–ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ä–∞–¥–æ—Å—Ç–∏'
      );
    } catch (error) {
      botLogger.error(
        { error, userId: this.userId },
        '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ä–∞–¥–æ—Å—Ç–∏'
      );
      throw error;
    }
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ" –∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
   */
  async showMenu(replyToMessageId?: number) {
    try {
      const menuText = '–¢—ã –º–æ–∂–µ—à—å –ø–æ–ø–æ–ª–Ω—è—Ç—å –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–π —Å–ø–∏—Å–æ–∫ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /joy';

      await this.sendMessage(
        menuText,
        replyToMessageId,
        Markup.inlineKeyboard([
          [Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ ‚ö°Ô∏è', `joy_add_more_${this.channelMessageId}`)],
          [Markup.button.callback('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', `joy_view_${this.channelMessageId}`)]
        ])
      );
    } catch (error) {
      botLogger.error(
        { error, userId: this.userId },
        '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ä–∞–¥–æ—Å—Ç–∏'
      );
      throw error;
    }
  }

  /**
   * –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ")
   */
  async startAddMoreSession(replyToMessageId?: number) {
    try {
      const text = '–ù–∞–ø–∏—à–∏, —á—Ç–æ –µ—â–µ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å';

      await this.sendMessage(text, replyToMessageId);

      botLogger.info(
        { userId: this.userId },
        '–ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ä–∞–¥–æ—Å—Ç–∏'
      );
    } catch (error) {
      botLogger.error(
        { error, userId: this.userId },
        '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'
      );
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getUserId(): number {
    return this.userId;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  getChannelMessageId(): number {
    return this.channelMessageId;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
   */
  hasPendingMessages(): boolean {
    const sessionKey = `${this.userId}_${this.channelMessageId}`;
    const messages = this.pendingMessages.get(sessionKey) || [];
    return messages.length > 0;
  }
}
