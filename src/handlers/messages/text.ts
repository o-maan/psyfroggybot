import { Telegraf } from 'telegraf';
import { Scheduler } from '../../scheduler';
import { botLogger } from '../../logger';
import { updateUserResponse, saveMessage, getLastNMessages } from '../../db';
import { generateUserResponse } from '../../llm';
import { getUserTodayEvents } from '../../calendar';

// –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
// –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ –±—É–¥—É—â–µ–º
const AUTO_RESPONSES_ENABLED = false; // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
export function registerTextMessageHandler(bot: Telegraf, scheduler: Scheduler) {
  bot.on('text', async ctx => {
    const message = ctx.message.text;
    const chatId = ctx.chat.id;
    const userId = ctx.from?.id || 0;

    // –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    botLogger.info(
      {
        message: message.substring(0, 100),
        chatId,
        userId,
        chatType: ctx.chat.type,
        messageThreadId: (ctx.message as any).message_thread_id,
        isBot: ctx.from?.is_bot,
        timestamp: new Date().toISOString(),
      },
      'üì® –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
    );

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    if (message.startsWith('/')) {
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏ –∫–∞–Ω–∞–ª–∞
    const CHAT_ID = scheduler.getChatId();
    const CHANNEL_ID = scheduler.CHANNEL_ID;

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    botLogger.info(
      {
        chatId,
        CHAT_ID,
        CHANNEL_ID,
        chatType: ctx.chat.type,
        messageId: ctx.message.message_id,
        fromId: ctx.from?.id,
        fromIsBot: ctx.from?.is_bot,
        fromUsername: ctx.from?.username,
        message: message.substring(0, 50),
      },
      'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è'
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
    if (ctx.from?.is_bot) {
      botLogger.debug({ userId: ctx.from?.id, chatId, isBot: ctx.from?.is_bot }, '–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –ª–∏–±–æ –∏–∑ –∫–∞–Ω–∞–ª–∞, –ª–∏–±–æ –∏–∑ —á–∞—Ç–∞
    const isFromChannel = chatId === CHANNEL_ID;
    const isFromChat = CHAT_ID && chatId === CHAT_ID;

    // –í–ê–ñ–ù–û: –í Telegram, –∫–æ–≥–¥–∞ –≥—Ä—É–ø–ø–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–∞–Ω–∞–ª—É, —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã
    // –º–æ–≥—É—Ç –∏–º–µ—Ç—å –¥—Ä—É–≥–æ–π chat_id. –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø —á–∞—Ç–∞.
    const isFromLinkedChat = ctx.chat.type === 'supergroup' && !isFromChannel && !isFromChat;

    if (!isFromChannel && !isFromChat && !isFromLinkedChat) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –Ω–µ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
      botLogger.debug(
        { chatId, CHAT_ID, CHANNEL_ID, chatType: ctx.chat.type },
        '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º'
      );
      return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë ID –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    const replyToChatId = isFromLinkedChat ? chatId : CHAT_ID || chatId;

    if (!CHAT_ID && !isFromLinkedChat) {
      botLogger.warn('‚ö†Ô∏è CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env! –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤ —á–∞—Ç');
      return;
    }

    botLogger.debug({ userId, chatId, messageLength: message.length }, `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ`);

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const TARGET_USER_ID = scheduler.getTargetUserId();

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userId === TARGET_USER_ID) {
      const responseTime = new Date().toISOString();
      updateUserResponse(userId, responseTime);
      botLogger.info(
        {
          userId,
          responseTime,
          targetUserId: TARGET_USER_ID,
        },
        `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${TARGET_USER_ID}`
      );
    } else {
      botLogger.debug(
        {
          userId,
          targetUserId: TARGET_USER_ID,
        },
        `‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ - –Ω–µ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`
      );
    }

    // –û—á–∏—â–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    scheduler.clearReminder(userId);

    try {
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
      const userMessageTime = new Date().toISOString();
      saveMessage(userId, message, userMessageTime, userId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
      const messageThreadId = (ctx.message as any).message_thread_id;
      const isInteractive = await scheduler.handleInteractiveUserResponse(
        userId,
        message,
        replyToChatId,
        ctx.message.message_id,
        messageThreadId
      );

      if (isInteractive) {
        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
      const lastMessages = getLastNMessages(userId, 7);

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞—Ç–∞–º–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
      const conversationHistory = lastMessages
        .reverse() // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ –±—ã–ª–∏ –≤–≤–µ—Ä—Ö—É, –Ω–æ–≤—ã–µ –≤–Ω–∏–∑—É
        .map(msg => {
          const date = new Date(msg.sent_time).toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
            day: '2-digit',
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
          });
          const author = msg.author_id === 0 ? '–ë–æ—Ç' : msg.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
          return `[${date}] ${author}: ${msg.message_text}`;
        })
        .join('\n');

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const calendarEvents = await getUserTodayEvents(userId);

      botLogger.info(
        {
          userId,
          chatId,
          hasConversationHistory: !!conversationHistory,
          hasCalendarEvents: !!calendarEvents,
        },
        'ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
      );

      if (AUTO_RESPONSES_ENABLED) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM
        const textResponse = await generateUserResponse(message, conversationHistory, calendarEvents || undefined);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∞—Ç
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã - –æ—Ç–≤–µ—á–∞–µ–º —Ç—É–¥–∞ –∂–µ
        // –ò–Ω–∞—á–µ - –≤ CHAT_ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        await bot.telegram.sendMessage(replyToChatId, textResponse, {
          reply_parameters: {
            message_id: ctx.message.message_id,
            chat_id: chatId, // —É–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
          },
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î (author_id = 0 –¥–ª—è –±–æ—Ç–∞)
        const botResponseTime = new Date().toISOString();
        saveMessage(userId, textResponse, botResponseTime, 0);

        botLogger.info(
          { userId, chatId, responseLength: textResponse.length },
          '‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
        );
      } else {
        botLogger.debug({ userId, chatId }, '‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
      }
    } catch (error) {
      const err = error as Error;
      botLogger.error({ error: err.message, stack: err.stack, userId, chatId }, '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');

      // Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ - —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤
      if (AUTO_RESPONSES_ENABLED) {
        const fallbackMessage = '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! ü§ç';
        await bot.telegram.sendMessage(replyToChatId, fallbackMessage, {
          reply_parameters: {
            message_id: ctx.message.message_id,
            chat_id: chatId,
          },
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º fallback –æ—Ç–≤–µ—Ç –≤ –ë–î
        const fallbackTime = new Date().toISOString();
        saveMessage(userId, fallbackMessage, fallbackTime, 0);
      }
    }
  });
}