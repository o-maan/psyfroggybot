import { Telegraf } from 'telegraf';
import { InlineQueryResultCachedPhoto } from 'telegraf/types';
import { logger } from '../../logger';
import { getAllFrogImages } from '../../db';

export function registerInlineHandlers(bot: Telegraf): void {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∑–∞–ø—Ä–æ—Å–æ–≤
  bot.on('inline_query', async ctx => {
    try {
      const query = ctx.inlineQuery.query.toLowerCase();

      logger.info(
        {
          query,
          userId: ctx.from.id,
          username: ctx.from.username,
        },
        '–ü–æ–ª—É—á–µ–Ω inline –∑–∞–ø—Ä–æ—Å'
      );

      // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ª—è–≥—É—à–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const frogImages = getAllFrogImages();

      if (frogImages.length === 0) {
        logger.warn('–ù–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ª—è–≥—É—à–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        await ctx.answerInlineQuery([], {
          button: {
            text: 'üê∏ –ö–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
            start_parameter: 'no_frogs',
          },
        });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –±–∞–∑–µ
      const results: InlineQueryResultCachedPhoto[] = frogImages.map((image) => ({
        type: 'photo',
        id: `frog_${image.id}`,
        photo_file_id: image.file_id,
        title: image.title,
        description: image.description,
        caption: image.title
      }));

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É (–µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π)
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
      const filteredResults = query
        ? results.filter(r => r.title?.toLowerCase().includes(query) || r.description?.toLowerCase().includes(query))
        : results;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      await ctx.answerInlineQuery(filteredResults, {
        cache_time: 1, // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
        is_personal: false, // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª—è –≤—Å–µ—Ö
        button: {
          text: 'üê∏ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ª—è–≥—É—à–∫–∏',
          start_parameter: 'frog_support',
        },
      });

      logger.info(
        {
          resultsCount: filteredResults.length,
          query,
          totalImages: frogImages.length,
        },
        'Inline –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω'
      );
    } catch (error) {
      logger.error({ error }, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ inline –∑–∞–ø—Ä–æ—Å–∞');
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      await ctx.answerInlineQuery([]);
    }
  });

  logger.info('–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
}
