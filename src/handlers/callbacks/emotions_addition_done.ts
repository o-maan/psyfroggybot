import { Context } from 'telegraf';
import { botLogger } from '../../logger';
import { Telegraf } from 'telegraf';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ø–∏—Å–∞–ª ‚òëÔ∏è" –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π (B1/B4)
 * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –¥–æ–±–∞–≤–ª—è—Ç—å —ç–º–æ—Ü–∏–∏ ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ü–ª—é—à–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
 */
export async function handleEmotionsAdditionDone(ctx: Context, bot: Telegraf) {
  const callbackQuery = ctx.callbackQuery;
  if (!callbackQuery || !('data' in callbackQuery)) return;

  const match = callbackQuery.data.match(/emotions_addition_done_(\d+)/);
  if (!match) return;

  const channelMessageId = parseInt(match[1], 10);
  const chatId = ctx.chat?.id;
  const messageId = ctx.callbackQuery?.message?.message_id;
  const userId = ctx.from?.id;

  botLogger.info({ channelMessageId, chatId, userId }, '‚úÖ –ö–Ω–æ–ø–∫–∞ "–û–ø–∏—Å–∞–ª" –Ω–∞–∂–∞—Ç–∞');

  await ctx.answerCbQuery();

  if (!chatId || !userId) {
    botLogger.error({ channelMessageId }, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chatId –∏–ª–∏ userId');
    return;
  }

  try {
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–û–ø–∏—Å–∞–ª"
    if (messageId) {
      try {
        await bot.telegram.deleteMessage(chatId, messageId);
        botLogger.info({ channelMessageId, messageId }, 'üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ö–æ–≥–¥–∞ –æ–ø–∏—à–µ—à—å..."');
      } catch (deleteError) {
        botLogger.warn({ error: deleteError }, '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π');
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è reply
    const { db } = await import('../../db');
    const lastUserMessageQuery = db.query(`
      SELECT message_id FROM message_links
      WHERE channel_message_id = ? AND message_type = 'user'
      ORDER BY created_at DESC
      LIMIT 1
    `);
    const lastUserMessage = lastUserMessageQuery.get(channelMessageId) as { message_id: number } | null;
    const replyToMessageId = lastUserMessage?.message_id || messageId || 0;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ü–ª—é—à–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–∏–∑ 24 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
    const { EMOTIONS_SUPPORT_TEXTS } = await import('../../constants/emotions-support-texts');
    const { getLastUsedEmotionsSupportTexts, addUsedEmotionsSupportText } = await import('../../db');

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
    const lastUsed = getLastUsedEmotionsSupportTexts(5);

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
    let availableTexts = EMOTIONS_SUPPORT_TEXTS.map((_, idx) => idx).filter(idx => !lastUsed.includes(idx));

    // –ï—Å–ª–∏ –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ
    if (availableTexts.length === 0) {
      availableTexts = EMOTIONS_SUPPORT_TEXTS.map((_, idx) => idx);
    }

    const randomIndex = availableTexts[Math.floor(Math.random() * availableTexts.length)];
    const randomSupportText = EMOTIONS_SUPPORT_TEXTS[randomIndex];

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    addUsedEmotionsSupportText(randomIndex);
    const plushkiText = `<i>${randomSupportText}</i>\n\n2. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b>\n\n–í—Å–ø–æ–º–Ω–∏ –∏ –Ω–∞–ø–∏—à–∏ –≤—Å–µ –ø—Ä–∏—è—Ç–Ω–æ–µ –∑–∞ –¥–µ–Ω—å\n–¢—É—Ç —Ç–æ–∂–µ –æ–ø–∏—à–∏ —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏—Å–ø—ã—Ç–∞–ª üòç`;

    const { scenarioSendWithRetry } = await import('../../utils/telegram-retry');

    const plushkiMessage = await scenarioSendWithRetry(
      bot,
      chatId,
      userId,
      () =>
        bot.telegram.sendMessage(chatId, plushkiText, {
          parse_mode: 'HTML',
          reply_parameters: { message_id: replyToMessageId },
          reply_markup: {
            inline_keyboard: [[{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }]],
          },
        }),
      'emotions_addition_done_plushki',
      { maxAttempts: 5, intervalMs: 3000 }
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Ç–µ–ø–µ—Ä—å –∂–¥–µ–º –ü–ª—é—à–∫–∏
    const { updateInteractivePostState, updateTaskStatus, saveMessage } = await import('../../db');

    // –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
    updateTaskStatus(channelMessageId, 1, true);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    saveMessage(userId, plushkiText, new Date().toISOString(), 0);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    updateInteractivePostState(channelMessageId, 'waiting_positive', {
      bot_task2_message_id: plushkiMessage.message_id,
    });

    botLogger.info({ channelMessageId, plushkiMessageId: plushkiMessage.message_id }, '‚úÖ –ü–ª—é—à–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π');
  } catch (error) {
    botLogger.error({ error, channelMessageId }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–û–ø–∏—Å–∞–ª"');
  }
}
