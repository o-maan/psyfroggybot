import { botLogger } from '../../logger';
import type { BotContext } from '../../types';
import type { Scheduler } from '../../scheduler';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å" - —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
export async function handlePracticePostpone(ctx: BotContext, scheduler: Scheduler) {
  botLogger.info(
    {
      action: 'practice_postpone',
      match: ctx.match,
      callbackData: 'data' in ctx.callbackQuery ? ctx.callbackQuery.data : undefined,
      fromId: ctx.from?.id,
      chatId: ctx.chat?.id,
    },
    '‚è∞ –í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ practice_postpone'
  );

  try {
    const userId = parseInt(ctx.match![1]);
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    await ctx.answerCbQuery('‚è∞ –•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ —á–∞—Å');

    // –ò—â–µ–º —Å–µ—Å—Å–∏—é –ø–æ adminChatId –∏–ª–∏ userId
    const session = scheduler.getInteractiveSession(adminChatId) || scheduler.getInteractiveSession(userId);
    if (!session) {
      botLogger.warn({ userId, adminChatId }, '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è practice_postpone');
      return;
    }

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ª–µ–≥–∫–æ –∏–∑–º–µ–Ω–∏—Ç—å)
    const PRACTICE_REMINDER_DELAY_MINUTES = 60; // 60 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    const reminderDelayMs = PRACTICE_REMINDER_DELAY_MINUTES * 60 * 1000;

    botLogger.info(
      {
        delayMinutes: PRACTICE_REMINDER_DELAY_MINUTES,
        delayMs: reminderDelayMs,
      },
      '‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∞–∫—Ç–∏–∫–µ'
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è
    session.practicePostponed = true;
    session.postponedUntil = Date.now() + reminderDelayMs;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∂–¥–µ–º —á–µ—Ä–µ–∑ —á–∞—Å
    try {
      const waitMessage =
        PRACTICE_REMINDER_DELAY_MINUTES === 60
          ? '‚è≥ –ñ–¥—É —Ç–µ–±—è —á–µ—Ä–µ–∑ —á–∞—Å'
          : `‚è≥ –ñ–¥—É —Ç–µ–±—è —á–µ—Ä–µ–∑ ${PRACTICE_REMINDER_DELAY_MINUTES} ${
              PRACTICE_REMINDER_DELAY_MINUTES === 1 ? '–º–∏–Ω—É—Ç—É' : '–º–∏–Ω—É—Ç'
            }`;

      const waitOptions: any = {
        parse_mode: 'HTML',
        reply_to_message_id: ctx.callbackQuery.message?.message_id,
      };

      await ctx.telegram.sendMessage(ctx.chat!.id, waitMessage, waitOptions);

      botLogger.info({ userId }, '‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è');
    } catch (error) {
      botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è');
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    setTimeout(async () => {
      try {
        botLogger.info(
          {
            userId,
            chatId: ctx.chat?.id,
          },
          'üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∞–∫—Ç–∏–∫–µ'
        );

        const reminderMessage = '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É! –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç üíö';

        // –í –≥—Ä—É–ø–ø–∞—Ö —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ reply_to_message_id
        const sendOptions: any = {
          parse_mode: 'HTML',
          reply_to_message_id: ctx.callbackQuery.message?.message_id,
        };

        await ctx.telegram.sendMessage(ctx.chat!.id, reminderMessage, sendOptions);

        botLogger.info({ userId }, '‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∞–∫—Ç–∏–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } catch (error) {
        botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
      }
    }, reminderDelayMs);
  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ practice_postpone');
  }
}