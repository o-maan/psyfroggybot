import type { BotContext } from '../../types';
import { Telegraf } from 'telegraf';
import { botLogger } from '../../logger';

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è HTML (Telegram) 
function escapeHTML(text: string): string {
  return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª—É–±–æ–∫–∞—è —Ä–∞–±–æ—Ç–∞"
export async function handleScenarioDeep(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id;
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üßòüèª –û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –≥–ª—É–±–æ–∫—É—é —Ä–∞–±–æ—Ç—É');

    botLogger.info(
      {
        action: 'scenario_deep',
        channelMessageId,
        messageId,
        chatId,
        userId,
      },
      'üîò –í—ã–±—Ä–∞–Ω–∞ –≥–ª—É–±–æ–∫–∞—è —Ä–∞–±–æ—Ç–∞'
    );

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∏–∑ –ë–î
    const { getInteractivePost } = await import('../../db');
    const post = getInteractivePost(channelMessageId);
    if (!post) {
      botLogger.error({ channelMessageId }, '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
      return;
    }

    // –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    const firstTaskText = '–í–æ—Ç —ç—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π! üî•\n\n1. <b>–ß—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç?</b>\n–ü–µ—Ä–µ—á–∏—Å–ª–∏ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ—è—Ç';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó –∫–Ω–æ–ø–æ–∫
    const firstTaskMessage = await bot.telegram.sendMessage(chatId!, firstTaskText, {
      parse_mode: 'HTML',
      reply_parameters: {
        message_id: messageId!,
      },
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã - –∂–¥–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–π
    const { updateInteractivePostState } = await import('../../db');
    updateInteractivePostState(channelMessageId, 'deep_waiting_situations_list', {
      bot_task1_message_id: firstTaskMessage.message_id,
    });

    botLogger.info({ channelMessageId }, '‚úÖ –ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã');
  }
}