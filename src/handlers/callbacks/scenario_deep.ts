import type { BotContext } from '../../types';
import { botLogger } from '../../logger';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª—É–±–æ–∫–∞—è —Ä–∞–±–æ—Ç–∞"
export async function handleScenarioDeep(ctx: BotContext) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id;
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üßòüèª –û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –≥–ª—É–±–æ–∫—É—é —Ä–∞–±–æ—Ç—É');

    botLogger.info(
      {
        action: 'scenario_deep',
        channelMessageId,
        messageId,
        chatId,
        userId,
      },
      'üîò –í—ã–±—Ä–∞–Ω–∞ –≥–ª—É–±–æ–∫–∞—è —Ä–∞–±–æ—Ç–∞'
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    await ctx.reply('üßòüèª –ì–ª—É–±–æ–∫–∞—è —Ä–∞–±–æ—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏!', {
      reply_parameters: {
        message_id: messageId!,
      },
    });

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã');
  }
}