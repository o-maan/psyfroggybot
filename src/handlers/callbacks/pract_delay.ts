import { botLogger } from '../../logger';
import type { BotContext } from '../../types';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å" - –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
export async function handlePractDelay(ctx: BotContext) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const isTestBot = process.env.IS_TEST_BOT === 'true';

    await ctx.answerCbQuery('‚è∞ –•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ ' + (isTestBot ? '1 –º–∏–Ω—É—Ç—É' : '—á–∞—Å'));

    // –ó–∞–¥–µ—Ä–∂–∫–∞: 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞, 60 –º–∏–Ω—É—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ
    const PRACTICE_REMINDER_DELAY_MINUTES = isTestBot ? 1 : 60;
    const reminderDelayMs = PRACTICE_REMINDER_DELAY_MINUTES * 60 * 1000;

    botLogger.info(
      {
        action: 'pract_delay',
        channelMessageId,
        isTestBot,
        delayMinutes: PRACTICE_REMINDER_DELAY_MINUTES,
      },
      '‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∞–∫—Ç–∏–∫–µ'
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∂–¥–µ–º
    const waitMessage = isTestBot ? '‚è≥ –ñ–¥—É —Ç–µ–±—è —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)' : '‚è≥ –ñ–¥—É —Ç–µ–±—è —á–µ—Ä–µ–∑ —á–∞—Å';

    await ctx.telegram.sendMessage(ctx.chat!.id, waitMessage, {
      parse_mode: 'HTML',
      reply_parameters: {
        message_id: ctx.callbackQuery.message!.message_id,
      },
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    setTimeout(async () => {
      try {
        const reminderMessage = '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ—Ä–∞ —Å–¥–µ–ª–∞—Ç—å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É! –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç üíö';

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–¥–µ–ª–∞–ª" –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é
        const practiceKeyboard = {
          inline_keyboard: [[{ text: '‚úÖ –°–¥–µ–ª–∞–ª', callback_data: `pract_done_${channelMessageId}` }]],
        };

        await ctx.telegram.sendMessage(ctx.chat!.id, reminderMessage, {
          parse_mode: 'HTML',
          reply_parameters: {
            message_id: ctx.callbackQuery.message!.message_id,
          },
          reply_markup: practiceKeyboard,
        });

        botLogger.info({ channelMessageId }, '‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∞–∫—Ç–∏–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } catch (error) {
        botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
      }
    }, reminderDelayMs);
  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ pract_delay');
  }
}