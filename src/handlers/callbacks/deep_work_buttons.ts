import type { BotContext } from '../../types';
import { Telegraf } from 'telegraf';
import { botLogger } from '../../logger';
import { DeepWorkHandler } from '../../deep-work-handler';

// –•—Ä–∞–Ω–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞/—Ç—Ä–µ–¥–∞
const deepWorkHandlers = new Map<string, DeepWorkHandler>();

export function getDeepWorkHandler(bot: Telegraf, chatId: number): DeepWorkHandler {
  if (!deepWorkHandlers.has(`${chatId}`)) {
    deepWorkHandlers.set(`${chatId}`, new DeepWorkHandler(bot, chatId));
  }
  return deepWorkHandlers.get(`${chatId}`)!;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–∏—Ç—É–∞—Ü–∏–∏
export async function handleDeepSituationChoice(ctx: BotContext, bot: Telegraf) {
  try {
    const match = ctx.match![0].split('_');
    const channelMessageId = parseInt(match[2]);
    const situationIndex = parseInt(match[3]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('‚úÖ –°–∏—Ç—É–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞');

    botLogger.info({
      action: 'deep_situation_choice',
      channelMessageId,
      situationIndex,
      userId
    }, '–í—ã–±—Ä–∞–Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞');

    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const handler = getDeepWorkHandler(bot, chatId);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É –∏–∑ –ë–î
    const { getInteractivePost } = await import('../../db');
    const post = getInteractivePost(channelMessageId);
    const techniqueType = post?.message_data?.recommended_technique || 'percept_filters';
    
    botLogger.info({
      channelMessageId,
      techniqueType,
      hasRecommendation: !!post?.message_data?.recommended_technique
    }, '–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Ö–Ω–∏–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏');
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞ "—Ä–∞–∑–±–æ—Ä –ø–æ —Å—Ö–µ–º–µ" - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if (techniqueType === 'schema' || techniqueType === 'abc') {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, —Å–æ—Ö—Ä–∞–Ω–∏–≤ —Ç–µ–∫—Å—Ç —Å–∏—Ç—É–∞—Ü–∏–∏)
      await handler.generateAndSaveSupportWords(channelMessageId, '–≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è', userId!);
    }
    
    const messageId = ctx.callbackQuery.message?.message_id;
    await handler.startTechnique(channelMessageId, techniqueType, userId!, messageId);

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∏—Ç—É–∞—Ü–∏–∏');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
export async function handleDeepFiltersStart(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üöÄ –ù–∞—á–∏–Ω–∞–µ–º!');

    botLogger.info({
      action: 'deep_filters_start',
      channelMessageId,
      userId
    }, '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è');

    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const handler = getDeepWorkHandler(bot, chatId);
    await handler.handleFiltersStart(channelMessageId, userId!, messageId);

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤');
  }
}

// –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
export async function handleDeepFiltersExample(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const handler = getDeepWorkHandler(bot, chatId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –ª–∏ –ø—Ä–∏–º–µ—Ä—ã
    const key = `examples_${channelMessageId}`;
    const count = (handler as any).exampleCounters?.get(key) || 0;
    
    if (count >= 5) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç
      await ctx.answerCbQuery('–ê –≤—Å–µ, –±–æ–ª—å—à–µ –Ω–µ—Ç üòÅ');
      return;
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—á–µ—Ç—á–∏–∫–∞
    let callbackText = 'üí° –ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–∏–º–µ—Ä';
    if (count === 3 || count === 4) {
      callbackText = 'üé¥ –°–º–æ—Ç—Ä–∏ —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è';
    }
    
    await ctx.answerCbQuery(callbackText);
    await handler.showThoughtsExample(channelMessageId, userId!, messageId);

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–∞ –º—ã—Å–ª–µ–π (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
export async function handleDeepFiltersExampleThoughts(ctx: BotContext, bot: Telegraf) {
  return handleDeepFiltersExample(ctx, bot);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–∫–∞–∂–µ–Ω–∏–π (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
export async function handleDeepFiltersExampleDistortions(ctx: BotContext, bot: Telegraf) {
  return handleDeepFiltersExample(ctx, bot);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
export async function handleDeepFiltersExampleRational(ctx: BotContext, bot: Telegraf) {
  return handleDeepFiltersExample(ctx, bot);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
export async function handleDeepShowFilters(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üé¥ –ü–æ–∫–∞–∑—ã–≤–∞—é —Ñ–∏–ª—å—Ç—Ä—ã');

    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const handler = getDeepWorkHandler(bot, chatId);
    await handler.showFiltersCards(channelMessageId, userId!, messageId);

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–ª—é—à–∫–∞–º
export async function handleDeepContinueToTreats(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('ü§ó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∏—è—Ç–Ω–æ–º—É!');

    botLogger.info({
      action: 'deep_continue_to_treats',
      channelMessageId,
      userId
    }, '–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–ª—é—à–∫–∞–º –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤');

    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const handler = getDeepWorkHandler(bot, chatId);
    await handler.continueToPluskas(channelMessageId, userId!, messageId);

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–ª—é—à–∫–∞–º');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
export async function handleShowFilters(ctx: any, bot: Telegraf) {
  try {
    await ctx.answerCbQuery();
    
    const match = ctx.callbackQuery.data.match(/show_filters_(\d+)/);
    if (!match) return;
    
    const channelMessageId = parseInt(match[1]);
    const userId = ctx.from?.id;
    
    if (!userId) {
      botLogger.error('–ù–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ callback –∑–∞–ø—Ä–æ—Å–µ');
      return;
    }

    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const handler = getDeepWorkHandler(bot, chatId);
    await handler.showFilters(channelMessageId, userId, messageId);

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–æ—Ä–∞ –ø–æ —Å—Ö–µ–º–µ
export async function handleSchemaStart(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üöÄ –ü–æ–µ—Ö–∞–ª–∏!');

    botLogger.info({
      action: 'schema_start',
      channelMessageId,
      userId
    }, '–ù–∞—á–∞–ª–æ —Ä–∞–∑–±–æ—Ä–∞ –ø–æ —Å—Ö–µ–º–µ');

    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const handler = getDeepWorkHandler(bot, chatId);
    await handler.handleSchemaStart(channelMessageId, userId!, messageId);

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–±–æ—Ä–∞ –ø–æ —Å—Ö–µ–º–µ');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –ø–æ —Å—Ö–µ–º–µ
export async function handleSchemaExample(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;
    
    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const handler = getDeepWorkHandler(bot, chatId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
    const key = `schema_examples_${channelMessageId}`;
    const count = (handler as any).schemaExampleCounters?.get(key) || 0;
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è callback
    let callbackText = '–ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–∏–º–µ—Ä';
    if (count === 3) {
      callbackText = '–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–∏–º–µ—Ä—ã';
    } else if (count === 4) {
      callbackText = '–ù–µ—Ç—å –ø—Ä–∏–º–µ—Ä–æ–≤';
    } else if (count >= 5) {
      // –ö–Ω–æ–ø–∫–∏ –±–æ–ª—å—à–µ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É—é—Ç
      await ctx.answerCbQuery();
      return;
    }

    await ctx.answerCbQuery(callbackText);

    const messageId = ctx.callbackQuery.message?.message_id;
    await handler.showSchemaExample(channelMessageId, userId!, messageId);

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è —Å—Ö–µ–º—ã');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–∞–∑–±–æ—Ä–∞ –ø–æ —Å—Ö–µ–º–µ
export async function handleSchemaContinue(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('ü§ó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª—é—à–∫–∞–º!');

    botLogger.info({
      action: 'schema_continue',
      channelMessageId,
      userId
    }, '–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–ª—é—à–∫–∞–º –ø–æ—Å–ª–µ —Ä–∞–∑–±–æ—Ä–∞ –ø–æ —Å—Ö–µ–º–µ');

    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const handler = getDeepWorkHandler(bot, chatId);
    await handler.continueToPluskas(channelMessageId, userId!, messageId);

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–ª—é—à–∫–∞–º –∏–∑ —Å—Ö–µ–º—ã');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í –¥—Ä—É–≥–æ–π —Ä–∞–∑" –¥–ª—è —ç–º–æ—Ü–∏–π –≤ —Å—Ö–µ–º–µ
export async function handleSkipNegSchema(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üëç –•–æ—Ä–æ—à–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º');

    botLogger.info({
      action: 'skip_neg_schema',
      channelMessageId,
      userId
    }, '–ü—Ä–æ–ø—É—Å–∫ —É—Ç–æ—á–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–π –≤ —Å—Ö–µ–º–µ');

    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const handler = getDeepWorkHandler(bot, chatId);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –¥–ª—è —Å–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    const { getInteractivePost } = await import('../../db');
    const post = getInteractivePost(channelMessageId);
    let supportText = '<i>–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è üíö</i>';
    
    if (post?.message_data?.schema_support?.text) {
      supportText = `<i>${post.message_data.schema_support.text}</i>`;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    const handler2 = handler as any;
    const buttonText = handler2.getSchemaExampleButtonText ? handler2.getSchemaExampleButtonText(channelMessageId) : '';
    const messageOptions: any = {};
    
    if (buttonText) {
      messageOptions.reply_markup = {
        inline_keyboard: [[
          { text: buttonText, callback_data: `schema_example_${channelMessageId}` }
        ]]
      };
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Telegram API
    await bot.telegram.sendMessage(
      chatId,
      supportText + '\n\n<b>–ö–∞–∫–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ üíÉ –∏–ª–∏ –∏–º–ø—É–ª—å—Å –∫ –¥–µ–π—Å—Ç–≤–∏—é —Å–ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞–ª–∞ —Å–∏—Ç—É–∞—Ü–∏—è?</b>\n<i>–ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª? –ö–∞–∫ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª? –ò–ª–∏ —á—Ç–æ —Ö–æ—Ç–µ–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å?</i>',
      {
        parse_mode: 'HTML',
        reply_parameters: messageId ? { message_id: messageId } : undefined,
        ...messageOptions
      }
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const { updateInteractivePostState } = await import('../../db');
    updateInteractivePostState(channelMessageId, 'schema_waiting_behavior');

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–π –≤ —Å—Ö–µ–º–µ');
  }
}