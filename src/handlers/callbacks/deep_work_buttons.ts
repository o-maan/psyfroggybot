import type { BotContext } from '../../types';
import { Telegraf } from 'telegraf';
import { botLogger } from '../../logger';
import { DeepWorkHandler } from '../../deep-work-handler';

// –•—Ä–∞–Ω–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
const deepWorkHandlers = new Map<number, DeepWorkHandler>();

function getDeepWorkHandler(bot: Telegraf, chatId: number): DeepWorkHandler {
  if (!deepWorkHandlers.has(chatId)) {
    deepWorkHandlers.set(chatId, new DeepWorkHandler(bot, chatId));
  }
  return deepWorkHandlers.get(chatId)!;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–∏—Ç—É–∞—Ü–∏–∏
export async function handleDeepSituationChoice(ctx: BotContext, bot: Telegraf) {
  try {
    const match = ctx.match![0].split('_');
    const channelMessageId = parseInt(match[2]);
    const situationIndex = parseInt(match[3]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('‚úÖ –°–∏—Ç—É–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞');

    botLogger.info({
      action: 'deep_situation_choice',
      channelMessageId,
      situationIndex,
      userId
    }, '–í—ã–±—Ä–∞–Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞');

    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const handler = getDeepWorkHandler(bot, chatId);
    
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    // TODO: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–µ—Ö–Ω–∏–∫—É
    const messageId = ctx.callbackQuery.message?.message_id;
    await handler.startTechnique(channelMessageId, 'percept_filters', userId!, messageId);

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∏—Ç—É–∞—Ü–∏–∏');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
export async function handleDeepFiltersStart(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üöÄ –ù–∞—á–∏–Ω–∞–µ–º!');

    botLogger.info({
      action: 'deep_filters_start',
      channelMessageId,
      userId
    }, '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è');

    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const handler = getDeepWorkHandler(bot, chatId);
    await handler.handleFiltersStart(channelMessageId, userId!, messageId);

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–∞ –º—ã—Å–ª–µ–π
export async function handleDeepFiltersExampleThoughts(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üí° –ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–∏–º–µ—Ä');

    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const handler = getDeepWorkHandler(bot, chatId);
    await handler.showThoughtsExample(channelMessageId, userId!, messageId);

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–∞ –º—ã—Å–ª–µ–π');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–∫–∞–∂–µ–Ω–∏–π
export async function handleDeepFiltersExampleDistortions(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üí° –ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–∏–º–µ—Ä');

    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const handler = getDeepWorkHandler(bot, chatId);
    await handler.showDistortionsExample(channelMessageId, userId!, messageId);

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–∫–∞–∂–µ–Ω–∏–π');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
export async function handleDeepFiltersExampleRational(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üí° –ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–∏–º–µ—Ä');

    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const handler = getDeepWorkHandler(bot, chatId);
    await handler.showRationalExample(channelMessageId, userId!, messageId);

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–º–µ—Ä–∞ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
export async function handleDeepShowFilters(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üé¥ –ü–æ–∫–∞–∑—ã–≤–∞—é —Ñ–∏–ª—å—Ç—Ä—ã');

    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const handler = getDeepWorkHandler(bot, chatId);
    await handler.showFiltersCards(channelMessageId, userId!, messageId);

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤');
  }
}