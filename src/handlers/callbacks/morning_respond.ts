import type { BotContext } from '../../types';
import { botLogger } from '../../logger';
import { getMorningPost, updateMorningPostStep, getMorningPostUserMessages, getMorningPostMessagesAfterLastFinal, updateMorningPostFinalMessageTime } from '../../db';
import { generateMessage, analyzeWithLowTemp } from '../../llm';
import { cleanLLMText } from '../../utils/clean-llm-text';
import { extractJsonFromLLM } from '../../utils/extract-json-from-llm';
import { readFileSync } from 'fs';
import { callbackSendWithRetry } from '../../utils/telegram-retry';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç—å –º–Ω–µ" –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤
export async function handleMorningRespond(ctx: BotContext) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    if (!userId) {
      botLogger.error({ channelMessageId }, '–ù–µ—Ç userId –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ');
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—à–∫—É "Froggy –ø–∏—à–µ—Ç..."
    await ctx.answerCbQuery('Froggy –ø–∏—à–µ—Ç...');

    botLogger.info(
      {
        action: 'morning_respond',
        channelMessageId,
        userId,
      },
      'üåÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–≤–µ—Ç—å –º–Ω–µ" –Ω–∞ —É—Ç—Ä–µ–Ω–Ω–µ–º –ø–æ—Å—Ç–µ'
    );

    // –ü–æ–ª—É—á–∞–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç
    const morningPost = await getMorningPost(channelMessageId);

    if (!morningPost) {
      botLogger.error({ channelMessageId }, '–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –Ω–∞ —Å–≤–æ–µ–º –ø–æ—Å—Ç–µ
    if (morningPost.user_id !== userId) {
      botLogger.warn({ userId, postUserId: morningPost.user_id }, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ —á—É–∂–æ–π —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç');
      await ctx.answerCbQuery('–≠—Ç–æ –Ω–µ —Ç–≤–æ–π –ø–æ—Å—Ç üòä');
      return;
    }

    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const replyToMessageId = ctx.callbackQuery.message?.message_id;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "Froggy –ø–∏—à–µ—Ç... üíª\n–ü–æ–¥–æ–∂–¥–∏ –º–∏–Ω—É—Ç–∫—É" (–∫—É—Ä—Å–∏–≤–æ–º)
    await ctx.telegram.sendMessage(chatId, '<i>Froggy –ø–∏—à–µ—Ç... üíª\n–ü–æ–¥–æ–∂–¥–∏ –º–∏–Ω—É—Ç–∫—É</i>', {
      reply_parameters: { message_id: replyToMessageId! },
      parse_mode: 'HTML'
    });

    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å–≤—è–∑–Ω–æ—Å—Ç–∏)
    const allDayMessages = getMorningPostUserMessages(userId, channelMessageId);
    const allDayUserMessages = allDayMessages
      .map(m => m.message_text)
      .join('\n');

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ù–û–í–û–ì–û —Ü–∏–∫–ª–∞ (–ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
    // –≠—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ sentiment - –æ—Ç–≤–µ—á–∞–µ–º –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ –ù–û–í–£–Æ —Å–∏—Ç—É–∞—Ü–∏—é
    const newCycleMessages = getMorningPostMessagesAfterLastFinal(userId, channelMessageId);
    const newCycleUserMessages = newCycleMessages
      .map(m => m.message_text)
      .join('\n');

    botLogger.info({
      userId,
      allDayMessagesCount: allDayMessages.length,
      newCycleMessagesCount: newCycleMessages.length
    }, '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏ –ù–û–í–û–ì–û —Ü–∏–∫–ª–∞ —Å –ø–æ–º–æ—â—å—é LLM (—Å –Ω–∏–∑–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)
    const analyzePromptTemplate = readFileSync('assets/prompts/morning-analyze-emotions.md', 'utf-8');
    const analyzePrompt = analyzePromptTemplate.replace('{{USER_MESSAGES}}', newCycleUserMessages);

    const analyzeResult = await analyzeWithLowTemp(analyzePrompt);
    const cleanedAnalyzeResult = extractJsonFromLLM(analyzeResult);

    let analysisData: { sentiment: string; emotions_count: number; emotions_described: boolean } | null = null;
    try {
      const parsed = JSON.parse(cleanedAnalyzeResult) as any;
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–ª—é—á–∏ (LLM –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å emotionscount –≤–º–µ—Å—Ç–æ emotions_count)
      analysisData = {
        sentiment: parsed.sentiment || 'neutral',
        emotions_count: parsed.emotions_count ?? parsed.emotionscount ?? 0,
        emotions_described: parsed.emotions_described ?? parsed.emotionsdescribed ?? false
      };
    } catch (parseError) {
      botLogger.error(
        { error: parseError, result: cleanedAnalyzeResult },
        '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π'
      );
    }

    if (!analysisData) {
      // Fallback - –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
      analysisData = { sentiment: 'neutral', emotions_count: 0, emotions_described: false };
    }

    botLogger.info({ userId, analysisData }, '–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π');

    // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–æ 3 –∏ –±–æ–ª–µ–µ —ç–º–æ—Ü–∏–π - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É
    if (analysisData.emotions_count >= 3) {
      botLogger.info({ userId }, '–ù–∞–∑–≤–∞–Ω–æ 3+ —ç–º–æ—Ü–∏–π, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞)
      const finalPromptTemplate = readFileSync('assets/prompts/morning-first-final-response.md', 'utf-8');
      const finalPrompt = finalPromptTemplate
        .replace('{{USER_MESSAGES}}', allDayUserMessages)
        .replace('{{SENTIMENT_TYPE}}', analysisData.sentiment)
        .replace('{{#if isNegative}}', analysisData.sentiment === 'negative' ? '' : '<!--')
        .replace('{{else}}', analysisData.sentiment === 'negative' ? '-->' : '')
        .replace('{{/if}}', '');

      const finalResponse = await generateMessage(finalPrompt);
      const cleanedFinalResponse = cleanLLMText(finalResponse);

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞
      const fullMessage = `${cleanedFinalResponse}\n\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –µ—â–µ —á–µ–º-—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è - —è —Ä—è–¥–æ–º ü§ó`;

      const sendOptions: any = { parse_mode: 'HTML' };
      if (replyToMessageId) {
        sendOptions.reply_parameters = { message_id: replyToMessageId };
      }

      await callbackSendWithRetry(
        ctx,
        () => ctx.telegram.sendMessage(chatId, fullMessage, sendOptions),
        'morning_final_response'
      );

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º timestamp —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
      const finalMessageTimestamp = new Date().toISOString();
      updateMorningPostFinalMessageTime(channelMessageId, finalMessageTimestamp);
      botLogger.info({ userId, timestamp: finalMessageTimestamp }, '‚è±Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω timestamp —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');

      // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –Ω–∞ "waiting_more" —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Å–ª—É—à–∞—Ç—å (—Ä–∞–±–æ—Ç–∞ –ø–æ –∫—Ä—É–≥—É)
      updateMorningPostStep(channelMessageId, 'waiting_more');

      botLogger.info({ userId }, '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (3+ —ç–º–æ—Ü–∏–π)');
      return;
    }

    // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 3 —ç–º–æ—Ü–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å —ç–º–æ—Ü–∏–∏
    botLogger.info({ userId, emotionsCount: analysisData.emotions_count, sentiment: analysisData.sentiment }, '–ú–µ–Ω—å—à–µ 3 —ç–º–æ—Ü–∏–π, –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –ø—Ä–æ–º–ø—Ç
    const needsEmotions = analysisData.emotions_count === 0;
    const needsMoreEmotions = analysisData.emotions_count > 0 && analysisData.emotions_count < 3;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –¥–≤—É–º—è —á–∞—Å—Ç—è–º–∏
    let responsePrompt = '';

    if (analysisData.sentiment === 'negative') {
      // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      if (needsEmotions) {
        responsePrompt = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏, –Ω–æ –Ω–µ –Ω–∞–∑–≤–∞–ª —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏.

–ù–û–í–ê–Ø —Å–∏—Ç—É–∞—Ü–∏—è (–æ—Ç–≤–µ—á–∞–π –Ω–∞ –≠–¢–û):
${newCycleUserMessages}

–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ–≥–æ –¥–Ω—è (–∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä—è–º–∞—è —Å–≤—è–∑—å —Å –Ω–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π, –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ –ù–ï —É—á–∏—Ç—ã–≤–∞–π):
${allDayUserMessages}

–í–ê–ñ–ù–û: –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å —á–µ–ª–æ–≤–µ–∫—É –ù–ê–ó–í–ê–¢–¨ —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç. –°–ø—Ä–∞—à–∏–≤–∞–π —Ç–∞–º, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ, –∫–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –æ–Ω –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª.

–¢–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –¥–≤—É–º—è —á–∞—Å—Ç—è–º–∏:

1. "support_text": –°–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —Å–æ—á—É–≤—Å—Ç–≤–∏—è –∏ –∑–∞–±–æ—Ç—ã (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ 2 —ç–º–æ–¥–∂–∏)
2. "question_text": –í–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —á–µ–ª–æ–≤–µ–∫—É –Ω–∞–∑–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏

–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞:
{
  "support_text": "–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å! üòî –û–±–Ω–∏–º–∞—é üëêüèª",
  "question_text": "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ —Ç—ã —Å–µ–π—á–∞—Å –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å?"
}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü–∏—à–∏ —Ç–µ–ø–ª–æ, –∑–∞–±–æ—Ç–ª–∏–≤–æ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ
- –ö–∞–∫ —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ —Ä–æ–±–æ—Ç
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—â–µ–Ω–∏—è —Ç–∏–ø–∞ "–±—Ä–∞—Ç", "–±—Ä–∞—Ç–∞–Ω", "–±—Ä–æ", "—Å–ª—É—à–∞–π" –∏ —Ç.–ø.
- –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≠–ú–û–¶–ò–Ø–• (—á—É–≤—Å—Ç–≤–∞—Ö)
- –ú—É–∂—Å–∫–æ–π —Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—è —Ä–∞–¥")
- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π`;

      } else if (needsMoreEmotions) {
        responsePrompt = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏ –∏ –Ω–∞–∑–≤–∞–ª 1-2 —ç–º–æ—Ü–∏–∏.

–ù–û–í–ê–Ø —Å–∏—Ç—É–∞—Ü–∏—è (–æ—Ç–≤–µ—á–∞–π –Ω–∞ –≠–¢–û):
${newCycleUserMessages}

–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ–≥–æ –¥–Ω—è (–∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä—è–º–∞—è —Å–≤—è–∑—å —Å –Ω–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π, –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ –ù–ï —É—á–∏—Ç—ã–≤–∞–π):
${allDayUserMessages}

–í–ê–ñ–ù–û: –ß–µ–ª–æ–≤–µ–∫ —É–∂–µ –Ω–∞–∑–≤–∞–ª –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–º–æ—Ü–∏–∏. –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ —ç–º–æ—Ü–∏–∏ –∏ –æ—â—É—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –£–ñ–ï –æ–ø–∏—Å–∞–ª. –°–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ –ß–¢–û –ï–©–ï –æ–Ω —á—É–≤—Å—Ç–≤—É–µ—Ç –ø–æ–º–∏–º–æ —ç—Ç–æ–≥–æ.

–¢–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –¥–≤—É–º—è —á–∞—Å—Ç—è–º–∏:

1. "support_text": –°–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ—á—É–≤—Å—Ç–≤–∏—è (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ 2 —ç–º–æ–¥–∂–∏)
2. "question_text": –ú—è–≥–∫–∞—è –ø—Ä–æ—Å—å–±–∞ –Ω–∞–∑–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —ç–º–æ—Ü–∏–∏ –ø–æ–º–∏–º–æ —É–∂–µ –æ–ø–∏—Å–∞–Ω–Ω—ã—Ö

–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞:
{
  "support_text": "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç—è–∂–µ–ª–æ, –ø–æ–Ω–∏–º–∞—é ü´† –Ø —Ä—è–¥–æ–º!",
  "question_text": "–ï—Å—Ç—å –ª–∏ –µ—â–µ –∫–∞–∫–∏–µ-—Ç–æ —á—É–≤—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å?"
}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü–∏—à–∏ —Ç–µ–ø–ª–æ, –∑–∞–±–æ—Ç–ª–∏–≤–æ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ
- –ö–∞–∫ —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ —Ä–æ–±–æ—Ç
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—â–µ–Ω–∏—è —Ç–∏–ø–∞ "–±—Ä–∞—Ç", "–±—Ä–∞—Ç–∞–Ω", "–±—Ä–æ", "—Å–ª—É—à–∞–π" –∏ —Ç.–ø.
- –ú—É–∂—Å–∫–æ–π —Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—è —Ä–∞–¥")
- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π`;
      }
    } else {
      // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      if (needsEmotions) {
        responsePrompt = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏, –Ω–æ –Ω–µ –Ω–∞–∑–≤–∞–ª —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏.

–ù–û–í–ê–Ø —Å–∏—Ç—É–∞—Ü–∏—è (–æ—Ç–≤–µ—á–∞–π –Ω–∞ –≠–¢–û):
${newCycleUserMessages}

–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ–≥–æ –¥–Ω—è (–∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä—è–º–∞—è —Å–≤—è–∑—å —Å –Ω–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π, –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ –ù–ï —É—á–∏—Ç—ã–≤–∞–π):
${allDayUserMessages}

–í–ê–ñ–ù–û: –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å —á–µ–ª–æ–≤–µ–∫—É –ù–ê–ó–í–ê–¢–¨ —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç. –°–ø—Ä–∞—à–∏–≤–∞–π —Ç–∞–º, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ, –∫–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –æ–Ω –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª.

–¢–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –¥–≤—É–º—è —á–∞—Å—Ç—è–º–∏:

1. "support_text": –ò—Å–∫—Ä–µ–Ω–Ω—è—è —Ä–∞–¥–æ—Å—Ç—å –∑–∞ —á–µ–ª–æ–≤–µ–∫–∞, –≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ –∏–ª–∏ –ø–æ—Ö–≤–∞–ª–∞ (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ 2 —ç–º–æ–¥–∂–∏)
2. "question_text": –í–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —á–µ–ª–æ–≤–µ–∫—É –Ω–∞–∑–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏

–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞:
{
  "support_text": "–í–∞—É, –º–µ–Ω—è —Ä–∞–¥—É—é—Ç —Ç–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏! üòä –≠—Ç–æ –æ—á–µ–Ω—å –∑–¥–æ—Ä–æ–≤–æ!",
  "question_text": "–ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ —Ç—ã –∏—Å–ø—ã—Ç–∞–ª –ø—Ä–∏ —ç—Ç–æ–º?"
}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü–∏—à–∏ —Ç–µ–ø–ª–æ, –∑–∞–±–æ—Ç–ª–∏–≤–æ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ
- –ö–∞–∫ —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ —Ä–æ–±–æ—Ç
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—â–µ–Ω–∏—è —Ç–∏–ø–∞ "–±—Ä–∞—Ç", "–±—Ä–∞—Ç–∞–Ω", "–±—Ä–æ", "—Å–ª—É—à–∞–π" –∏ —Ç.–ø.
- –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≠–ú–û–¶–ò–Ø–• (—á—É–≤—Å—Ç–≤–∞—Ö)
- –ú—É–∂—Å–∫–æ–π —Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—è —Ä–∞–¥")
- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π`;

      } else if (needsMoreEmotions) {
        responsePrompt = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –Ω–∞–∑–≤–∞–ª 1-2 —ç–º–æ—Ü–∏–∏.

–ù–û–í–ê–Ø —Å–∏—Ç—É–∞—Ü–∏—è (–æ—Ç–≤–µ—á–∞–π –Ω–∞ –≠–¢–û):
${newCycleUserMessages}

–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ–≥–æ –¥–Ω—è (–∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä—è–º–∞—è —Å–≤—è–∑—å —Å –Ω–æ–≤–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π, –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ –ù–ï —É—á–∏—Ç—ã–≤–∞–π):
${allDayUserMessages}

–í–ê–ñ–ù–û: –ß–µ–ª–æ–≤–µ–∫ —É–∂–µ –Ω–∞–∑–≤–∞–ª –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–º–æ—Ü–∏–∏. –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ —ç–º–æ—Ü–∏–∏ –∏ –æ—â—É—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –£–ñ–ï –æ–ø–∏—Å–∞–ª. –°–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ –ß–¢–û –ï–©–ï –æ–Ω —á—É–≤—Å—Ç–≤—É–µ—Ç –ø–æ–º–∏–º–æ —ç—Ç–æ–≥–æ.

–¢–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –¥–≤—É–º—è —á–∞—Å—Ç—è–º–∏:

1. "support_text": –†–∞–¥–æ—Å—Ç—å –∑–∞ —É—Å–ø–µ—Ö–∏ –∏ –ø–æ—Ö–≤–∞–ª–∞ (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ 2 —ç–º–æ–¥–∂–∏)
2. "question_text": –ú—è–≥–∫–∞—è –ø—Ä–æ—Å—å–±–∞ –Ω–∞–∑–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —ç–º–æ—Ü–∏–∏ –ø–æ–º–∏–º–æ —É–∂–µ –æ–ø–∏—Å–∞–Ω–Ω—ã—Ö

–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞:
{
  "support_text": "–†–∞–¥—É—é—Ç —Ç–≤–æ–∏ —É—Å–ø–µ—Ö–∏! ü§© –Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π!",
  "question_text": "–ï—Å—Ç—å –ª–∏ –µ—â–µ –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–∏—è—Ç–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å?"
}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü–∏—à–∏ —Ç–µ–ø–ª–æ, –∑–∞–±–æ—Ç–ª–∏–≤–æ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ
- –ö–∞–∫ —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ —Ä–æ–±–æ—Ç
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞—â–µ–Ω–∏—è —Ç–∏–ø–∞ "–±—Ä–∞—Ç", "–±—Ä–∞—Ç–∞–Ω", "–±—Ä–æ", "—Å–ª—É—à–∞–π" –∏ —Ç.–ø.
- –ú—É–∂—Å–∫–æ–π —Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—è —Ä–∞–¥")
- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π`;
      }
    }

    const response = await generateMessage(responsePrompt);
    const cleanedResponse = extractJsonFromLLM(response);

    botLogger.info({
      userId,
      sentiment: analysisData.sentiment,
      needsEmotions,
      needsMoreEmotions,
      emotionsCount: analysisData.emotions_count
    }, '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –¥–≤—É–º—è —á–∞—Å—Ç—è–º–∏');

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
    let responseData: { support_text: string; question_text?: string } | null = null;
    try {
      responseData = JSON.parse(cleanedResponse);
    } catch (parseError) {
      botLogger.error(
        { error: parseError, result: cleanedResponse },
        '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ —Å –¥–≤—É–º—è —á–∞—Å—Ç—è–º–∏'
      );
      // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ support_text
      responseData = { support_text: cleanedResponse };
    }

    if (!responseData) {
      botLogger.error('responseData is null –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞');
      responseData = { support_text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ üòî' };
    }

    botLogger.info({
      userId,
      support_text: responseData.support_text,
      question_text: responseData.question_text,
      has_support: !!responseData.support_text,
      has_question: !!responseData.question_text
    }, '–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞');

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let finalMessage = responseData.support_text || '–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π support_text';

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω—É–∂–µ–Ω
    if ((needsEmotions || needsMoreEmotions) && responseData.question_text) {
      finalMessage += '\n\n' + responseData.question_text;
    }

    botLogger.info({
      userId,
      finalMessageLength: finalMessage.length,
      finalMessagePreview: finalMessage.substring(0, 100)
    }, '–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    let keyboard: any = undefined;

    if (needsEmotions) {
      // –ï—Å–ª–∏ —ç–º–æ—Ü–∏–π –Ω–µ—Ç –≤–æ–æ–±—â–µ - –¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ–≥–∏ —Å —ç–º–æ—Ü–∏—è–º–∏"
      keyboard = {
        inline_keyboard: [[{ text: 'üí° –ü–æ–º–æ–≥–∏ —Å —ç–º–æ—Ü–∏—è–º–∏', callback_data: `help_emotions_${channelMessageId}` }]],
      };
    } else if (needsMoreEmotions) {
      // –ï—Å–ª–∏ —ç–º–æ—Ü–∏–π –º–∞–ª–æ - –¥–∞–µ–º –î–í–ï –∫–Ω–æ–ø–∫–∏: "–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π" –∏ "–ù–µ –ø–æ–º–Ω—é –¥—Ä—É–≥–∏—Ö —ç–º–æ—Ü–∏–π"
      keyboard = {
        inline_keyboard: [
          [{ text: 'üìä –¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }],
          [{ text: '–ù–µ –ø–æ–º–Ω—é –¥—Ä—É–≥–∏—Ö —ç–º–æ—Ü–∏–π', callback_data: `cant_remember_emotions_${channelMessageId}` }]
        ],
      };
    }

    const sendOptions: any = { parse_mode: 'HTML' };
    if (replyToMessageId) {
      sendOptions.reply_parameters = { message_id: replyToMessageId };
    }
    if (keyboard) {
      sendOptions.reply_markup = keyboard;
    }

    await callbackSendWithRetry(
      ctx,
      () => ctx.telegram.sendMessage(chatId, finalMessage, sendOptions),
      'morning_step2_response'
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ - –∂–¥–µ–º –±–æ–ª—å—à–µ —ç–º–æ—Ü–∏–π
    const nextStep = `waiting_more_emotions_${analysisData.sentiment}`;
    updateMorningPostStep(channelMessageId, nextStep);

    botLogger.info({ userId, nextStep }, '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å —ç–º–æ—Ü–∏–∏');
  } catch (error) {
    botLogger.error({ error: (error as Error).message, stack: (error as Error).stack }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç—å –º–Ω–µ"');

    try {
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üôè');
    } catch (answerError) {
      botLogger.error({ answerError }, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å answerCbQuery –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
    }
  }
}
