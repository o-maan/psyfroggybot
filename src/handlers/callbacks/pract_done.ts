import { botLogger } from '../../logger';
import type { BotContext } from '../../types';
import type { Scheduler } from '../../scheduler';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞–ª" –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ - –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
export async function handlePractDone(ctx: BotContext, scheduler: Scheduler) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –º–æ–ª–æ–¥–µ—Ü!');

    botLogger.info(
      {
        action: 'pract_done',
        channelMessageId,
        userId,
        chatId: ctx.chat?.id,
      },
      'üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ practice_done'
    );

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    const { getInteractivePost, updateTaskStatus, setTrophyStatus } = await import('../../db');
    const post = getInteractivePost(channelMessageId);

    if (!post) {
      botLogger.error({ channelMessageId }, '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –¥–ª—è practice_done');
      return;
    }

    // –û—Ç–º–µ—á–∞–µ–º —Ç—Ä–µ—Ç—å–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
    updateTaskStatus(channelMessageId, 3, true);

    // Fallback —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
    const fallbacks = [
      '–¢—ã –º–æ–ª–æ–¥–µ—Ü! üåü –°–µ–≥–æ–¥–Ω—è –º—ã –æ—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –≤–º–µ—Å—Ç–µ.',
      '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üíö –¢—ã –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–µ–±–µ, –∏ —ç—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ.',
      '–°—É–ø–µ—Ä! ‚ú® –ö–∞–∂–¥–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ.',
      '–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! üåà –¢—ã —Å–¥–µ–ª–∞–ª –≤–∞–∂–Ω—ã–π —à–∞–≥ –¥–ª—è —Å–≤–æ–µ–≥–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è.',
      '–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è! üéØ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.',
      '–¢—ã –º–æ–ª–æ–¥–µ—Ü! üåô –ü–æ—Ä–∞ –æ—Ç–¥—ã—Ö–∞—Ç—å.',
      '–Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π! üí´ –¢—ã —Å–¥–µ–ª–∞–ª –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É.',
      '–û—Ç–ª–∏—á–Ω–æ! üåø –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã.',
      '–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è.',
    ];
    const congratsMessage = fallbacks[Math.floor(Math.random() * fallbacks.length)];

    await ctx.telegram.sendMessage(ctx.chat!.id, congratsMessage, {
      parse_mode: 'HTML',
      reply_parameters: {
        message_id: ctx.callbackQuery.message!.message_id,
      },
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —Ç—Ä–æ—Ñ–µ—è –∫ –ø–æ—Å—Ç—É –≤ –∫–∞–Ω–∞–ª–µ
    if (!post.trophy_set) {
      try {
        await ctx.telegram.setMessageReaction(scheduler.CHANNEL_ID, channelMessageId, [{ type: 'emoji', emoji: 'üèÜ' }]);

        // –û—Ç–º–µ—á–∞–µ–º –≤ –ë–î —á—Ç–æ —Ç—Ä–æ—Ñ–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        setTrophyStatus(channelMessageId, true);

        botLogger.info(
          {
            channelMessageId,
            channelId: scheduler.CHANNEL_ID,
          },
          'üèÜ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è —Ç—Ä–æ—Ñ–µ—è –∫ –ø–æ—Å—Ç—É –≤ –∫–∞–Ω–∞–ª–µ'
        );
      } catch (error) {
        botLogger.error(
          {
            error: (error as Error).message,
            channelMessageId,
            channelId: scheduler.CHANNEL_ID,
          },
          '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏ –∫ –ø–æ—Å—Ç—É'
        );
      }
    }
  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ practice_done');
  }
}