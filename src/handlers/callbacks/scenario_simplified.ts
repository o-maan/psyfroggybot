import type { BotContext } from '../../types';
import { Telegraf } from 'telegraf';
import { botLogger } from '../../logger';

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è HTML (Telegram)
function escapeHTML(text: string): string {
  return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π"
export async function handleScenarioSimplified(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id;
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üß© –û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π');

    botLogger.info(
      {
        action: 'scenario_simplified',
        channelMessageId,
        messageId,
        chatId,
        userId,
      },
      'üîò –í—ã–±—Ä–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π'
    );

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∏–∑ –ë–î
    const { getInteractivePost } = await import('../../db');
    const post = getInteractivePost(channelMessageId);
    if (!post) {
      botLogger.error({ channelMessageId }, '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–∫–∞–∫ –±—ã–ª–æ –≤ scheduler.ts)
    const firstTaskText = '1. <b>–í—ã–≥—Ä—É–∑–∫–∞ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π</b> (—Å–∏—Ç—É–∞—Ü–∏—è+—ç–º–æ—Ü–∏—è)';
    let firstTaskFullText = firstTaskText;
    if (post.message_data?.negative_part?.additional_text) {
      firstTaskFullText += `\n<blockquote>${escapeHTML(post.message_data.negative_part.additional_text)}</blockquote>`;
    }

    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞
    const skipButtonTexts = [
      'üòå –≤—Å–µ –æ–∫ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
      'üòä —É –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
      'üåà —Å–µ–≥–æ–¥–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
      '‚ú® –≤—Å–µ —Å—É–ø–µ—Ä - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
      'üå∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
    ];
    const skipButtonText = skipButtonTexts[Math.floor(Math.random() * skipButtonTexts.length)];
    
    const firstTaskKeyboard = {
      inline_keyboard: [[{ text: skipButtonText, callback_data: `skip_neg_${channelMessageId}` }]],
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    const firstTaskMessage = await bot.telegram.sendMessage(chatId!, firstTaskFullText, {
      parse_mode: 'HTML',
      reply_markup: firstTaskKeyboard,
      reply_parameters: {
        message_id: messageId!,
      },
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å—Ç–∞
    const { updateInteractivePostState } = await import('../../db');
    updateInteractivePostState(channelMessageId, 'waiting_negative', {
      bot_task1_message_id: firstTaskMessage.message_id,
    });

    botLogger.info({ channelMessageId }, '‚úÖ –ü–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è');
  }
}