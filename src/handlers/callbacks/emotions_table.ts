import type { BotContext } from '../../types';
import { botLogger } from '../../logger';
import { readFileSync } from 'fs';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π"
export async function handleEmotionsTable(ctx: BotContext) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üìä –ü–æ–∫–∞–∑—ã–≤–∞—é —Ç–∞–±–ª–∏—Ü—É —ç–º–æ—Ü–∏–π');

    botLogger.info(
      {
        action: 'emotions_table',
        channelMessageId,
        userId,
      },
      'üìä –ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π'
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π —ç–º–æ—Ü–∏–π
    try {
      const emotionsTablePath = 'assets/images/emotions-table.jpg';
      const emotionsTableImage = readFileSync(emotionsTablePath);
      
      await ctx.replyWithPhoto(
        { source: emotionsTableImage },
        { 
          caption: 'üìä <b>–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π</b>\n\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É, —á—Ç–æ–±—ã —Ç–æ—á–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏',
          parse_mode: 'HTML'
        }
      );
    } catch (imageError) {
      // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      await ctx.reply(
        `üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏:</b>\n\n` +
        `<b>–†–∞–¥–æ—Å—Ç—å:</b> —Å—á–∞—Å—Ç—å–µ, –≤–æ—Å—Ç–æ—Ä–≥, —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ, –≤–µ—Å–µ–ª—å–µ\n` +
        `<b>–ì—Ä—É—Å—Ç—å:</b> –ø–µ—á–∞–ª—å, —Ç–æ—Å–∫–∞, —É–Ω—ã–Ω–∏–µ, —Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ\n` +
        `<b>–ì–Ω–µ–≤:</b> –∑–ª–æ—Å—Ç—å, —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ, —è—Ä–æ—Å—Ç—å, –≤–æ–∑–º—É—â–µ–Ω–∏–µ\n` +
        `<b>–°—Ç—Ä–∞—Ö:</b> —Ç—Ä–µ–≤–æ–≥–∞, –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ, –ø–∞–Ω–∏–∫–∞, —É–∂–∞—Å\n` +
        `<b>–£–¥–∏–≤–ª–µ–Ω–∏–µ:</b> –∏–∑—É–º–ª–µ–Ω–∏–µ, –ø–æ—Ç—Ä—è—Å–µ–Ω–∏–µ, —à–æ–∫\n` +
        `<b>–û—Ç–≤—Ä–∞—â–µ–Ω–∏–µ:</b> –±—Ä–µ–∑–≥–ª–∏–≤–æ—Å—Ç—å, –Ω–µ–ø—Ä–∏—è–∑–Ω—å, –ø—Ä–µ–∑—Ä–µ–Ω–∏–µ\n\n` +
        `–û–ø–∏—à–∏, —á—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å`,
        { parse_mode: 'HTML' }
      );
    }

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–∞–±–ª–∏—Ü—ã —ç–º–æ—Ü–∏–π');
  }
}