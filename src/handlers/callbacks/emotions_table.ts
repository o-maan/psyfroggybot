import type { BotContext } from '../../types';
import { botLogger } from '../../logger';
import { readFileSync } from 'fs';
import { callbackSendWithRetry } from '../../utils/telegram-retry';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π"
export async function handleEmotionsTable(ctx: BotContext) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üìä –ü–æ–∫–∞–∑—ã–≤–∞—é —Ç–∞–±–ª–∏—Ü—É —ç–º–æ—Ü–∏–π');

    botLogger.info(
      {
        action: 'emotions_table',
        channelMessageId,
        userId,
      },
      'üìä –ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π'
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π —ç–º–æ—Ü–∏–π
    const emotionsTablePath = 'assets/images/emotions-table.png';
    const emotionsTableImage = readFileSync(emotionsTablePath);
    
    // –ü–æ–ª—É—á–∞–µ–º chatId –∏ messageId –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const replyToMessageId = ctx.callbackQuery.message?.message_id;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ telegram API —Å reply_to_message_id –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
    const sendOptions: any = {};
    if (replyToMessageId) {
      sendOptions.reply_to_message_id = replyToMessageId;
    }
    
    await callbackSendWithRetry(
      ctx,
      () => ctx.telegram.sendPhoto(
        chatId,
        { source: emotionsTableImage },
        sendOptions
      ),
      'emotions_table_photo'
    );

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–∞–±–ª–∏—Ü—ã —ç–º–æ—Ü–∏–π');
    
    // –§–æ–ª–±—ç–∫ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏
    try {
      const chatId = ctx.callbackQuery.message?.chat?.id!;
      const replyToMessageId = ctx.callbackQuery.message?.message_id;
      
      const fallbackText = '–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ - –≥—Ä—É—Å—Ç—å, —Ä–∞–¥–æ—Å—Ç—å, –∑–ª–æ—Å—Ç—å, —Å—Ç—Ä–∞—Ö, –≤–∏–Ω–∞, —Å—Ç—ã–¥\n' +
                          '–ü–æ–ø—Ä–æ–±—É–π –æ–ø–∏—Å–∞—Ç—å –∏–º–∏ –∏–ª–∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–∞—â—É–ø–∞—Ç—å –æ—Ç—Ç–µ–Ω–∫–∏\n\n' +
                          '<i>P.S. –¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ</i>';
      
      const sendOptions: any = {
        parse_mode: 'HTML'
      };
      
      if (replyToMessageId) {
        sendOptions.reply_parameters = {
          message_id: replyToMessageId
        };
      }
      
      await callbackSendWithRetry(
        ctx,
        () => ctx.telegram.sendMessage(chatId, fallbackText, sendOptions),
        'emotions_table_fallback',
        { maxAttempts: 5, intervalMs: 3000 }
      );
      
    } catch (fallbackError) {
      botLogger.error({ fallbackError }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ fallback —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —ç–º–æ—Ü–∏–π');
    }
  }
}