import type { BotContext } from '../../types';
import { botLogger } from '../../logger';
import { readFileSync } from 'fs';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π"
export async function handleEmotionsTable(ctx: BotContext) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üìä –ü–æ–∫–∞–∑—ã–≤–∞—é —Ç–∞–±–ª–∏—Ü—É —ç–º–æ—Ü–∏–π');

    botLogger.info(
      {
        action: 'emotions_table',
        channelMessageId,
        userId,
      },
      'üìä –ó–∞–ø—Ä–æ—à–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π'
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π —ç–º–æ—Ü–∏–π
    const emotionsTablePath = 'assets/images/emotions-table.png';
    const emotionsTableImage = readFileSync(emotionsTablePath);
    
    // –ü–æ–ª—É—á–∞–µ–º chatId –∏ messageId –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const replyToMessageId = ctx.callbackQuery.message?.message_id;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ telegram API —Å reply_to_message_id –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
    const sendOptions: any = {};
    if (replyToMessageId) {
      sendOptions.reply_to_message_id = replyToMessageId;
    }
    
    await ctx.telegram.sendPhoto(
      chatId,
      { source: emotionsTableImage },
      sendOptions
    );

  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–∞–±–ª–∏—Ü—ã —ç–º–æ—Ü–∏–π');
  }
}