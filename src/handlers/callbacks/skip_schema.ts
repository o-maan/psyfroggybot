import { botLogger } from '../../logger';
import type { BotContext } from '../../types';
import type { Scheduler } from '../../scheduler';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è —Å—Ö–µ–º—ã —Ä–∞–∑–±–æ—Ä–∞ —Å–∏—Ç—É–∞—Ü–∏–∏
export async function handleSkipSchema(ctx: BotContext, scheduler: Scheduler) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    await ctx.answerCbQuery('–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª—é—à–∫–∞–º! üå±', { show_alert: false });

    botLogger.info(
      {
        action: 'skip_schema',
        channelMessageId,
        userId: ctx.from?.id,
      },
      '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Å—Ö–µ–º—É —Ä–∞–∑–±–æ—Ä–∞'
    );

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–µ
    const { getInteractivePost, updateInteractivePostState, updateTaskStatus } = await import('../../db');
    const post = getInteractivePost(channelMessageId);

    if (!post) {
      botLogger.warn({ channelMessageId }, '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è skip_schema');
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ö–µ–º—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª—é—à–∫–∞–º
    updateInteractivePostState(channelMessageId, 'waiting_task2', {
      user_schema_message_id: ctx.callbackQuery.message?.message_id,
    });

    // –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ (—Å—Ö–µ–º–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞)
    updateTaskStatus(channelMessageId, 1, true);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª—é—à–µ–∫
    const messageData = post.message_data;

    botLogger.debug(
      {
        channelMessageId,
        hasMessageData: !!messageData,
        messageDataKeys: messageData ? Object.keys(messageData) : [],
        positivePartText: messageData?.positive_part?.additional_text,
      },
      '–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª—é—à–µ–∫'
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ + –ø–ª—é—à–∫–∏
    const supportText = scheduler.getRandomSupportText();
    const responseText = `<i>${supportText}</i>\n\n${scheduler.buildSecondPart(messageData)}`;

    const task2Message = await ctx.telegram.sendMessage(ctx.chat!.id, responseText, {
      parse_mode: 'HTML',
      reply_parameters: {
        message_id: ctx.callbackQuery.message!.message_id,
      },
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª—é—à–∫–∞–º–∏
    updateInteractivePostState(channelMessageId, 'waiting_task2', {
      bot_task2_message_id: task2Message.message_id,
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    const { saveMessage } = await import('../../db');
    saveMessage(ctx.from!.id, responseText, new Date().toISOString(), 0);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const session = scheduler.getInteractiveSession(ctx.from!.id) || scheduler.getInteractiveSession(channelMessageId);
    if (session) {
      session.currentStep = 'waiting_positive';
    }

    botLogger.info({ channelMessageId, userId: ctx.from?.id }, '–°—Ö–µ–º–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–ª—é—à–∫–∏');
  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ skip_schema');
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}