import type { BotContext } from '../../types';
import { botLogger } from '../../logger';
import { getMorningPost, updateMorningPostStep, getLastNMessages } from '../../db';
import { generateMessage } from '../../llm';
import { cleanLLMText } from '../../utils/clean-llm-text';
import { readFileSync } from 'fs';
import { callbackSendWithRetry } from '../../utils/telegram-retry';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ –ø–æ–º–Ω—é –¥—Ä—É–≥–∏—Ö —ç–º–æ—Ü–∏–π" –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤
export async function handleMorningCantRemember(ctx: BotContext) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    if (!userId) {
      botLogger.error({ channelMessageId }, '–ù–µ—Ç userId –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ');
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—à–∫—É
    await ctx.answerCbQuery();

    botLogger.info(
      {
        action: 'morning_cant_remember',
        channelMessageId,
        userId,
      },
      'üåÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–µ –ø–æ–º–Ω—é –¥—Ä—É–≥–∏—Ö —ç–º–æ—Ü–∏–π" –Ω–∞ —É—Ç—Ä–µ–Ω–Ω–µ–º –ø–æ—Å—Ç–µ'
    );

    // –ü–æ–ª—É—á–∞–µ–º —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç
    const morningPost = await getMorningPost(channelMessageId);

    if (!morningPost) {
      botLogger.error({ channelMessageId }, '–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –Ω–∞ —Å–≤–æ–µ–º –ø–æ—Å—Ç–µ
    if (morningPost.user_id !== userId) {
      botLogger.warn({ userId, postUserId: morningPost.user_id }, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ —á—É–∂–æ–π —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç');
      await ctx.answerCbQuery('–≠—Ç–æ –Ω–µ —Ç–≤–æ–π –ø–æ—Å—Ç üòä');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const messages = getLastNMessages(userId, 10);
    const userMessages = messages
      .filter(m => m.author_id === userId)
      .map(m => m.message_text)
      .reverse()
      .join('\n');

    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const replyToMessageId = ctx.callbackQuery.message?.message_id;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ß–∏—Ç–∞—é, –º–∏–Ω—É—Ç–∫—É..."
    const readingMessageOptions: any = { parse_mode: 'HTML' };
    if (replyToMessageId) {
      readingMessageOptions.reply_parameters = { message_id: replyToMessageId };
    }

    await callbackSendWithRetry(
      ctx,
      () => ctx.telegram.sendMessage(chatId, '–ß–∏—Ç–∞—é, –º–∏–Ω—É—Ç–∫—É‚Ä¶ üßê', readingMessageOptions),
      'morning_cant_remember_reading'
    );

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º sentiment –∏–∑ current_step (waiting_more_emotions_negative –∏–ª–∏ waiting_more_emotions_positive)
    const sentiment = morningPost.current_step.includes('negative') ? 'negative' : 'positive';

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ STEP 3)
    const finalPromptTemplate = readFileSync('assets/prompts/morning-final-response.md', 'utf-8');
    const finalPrompt = finalPromptTemplate
      .replace('{{USER_MESSAGES}}', userMessages)
      .replace('{{SENTIMENT_TYPE}}', sentiment)
      .replace('{{#if isNegative}}', sentiment === 'negative' ? '' : '<!--')
      .replace('{{else}}', sentiment === 'negative' ? '-->' : '')
      .replace('{{/if}}', '');

    const finalResponse = await generateMessage(finalPrompt);
    const cleanedFinalResponse = cleanLLMText(finalResponse);

    const sendOptions: any = { parse_mode: 'HTML' };
    if (replyToMessageId) {
      sendOptions.reply_parameters = { message_id: replyToMessageId };
    }

    await callbackSendWithRetry(
      ctx,
      () => ctx.telegram.sendMessage(chatId, cleanedFinalResponse, sendOptions),
      'morning_cant_remember_final'
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    updateMorningPostStep(channelMessageId, 'completed');

    botLogger.info({ userId }, '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ "–ù–µ –ø–æ–º–Ω—é –¥—Ä—É–≥–∏—Ö —ç–º–æ—Ü–∏–π"');
  } catch (error) {
    botLogger.error({ error: (error as Error).message, stack: (error as Error).stack }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–µ –ø–æ–º–Ω—é –¥—Ä—É–≥–∏—Ö —ç–º–æ—Ü–∏–π"');

    try {
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üôè');
    } catch (answerError) {
      botLogger.error({ answerError }, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å answerCbQuery –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
    }
  }
}
