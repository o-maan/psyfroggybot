import { botLogger } from '../../logger';
import type { BotContext } from '../../types';
import type { Telegraf } from 'telegraf';
import type { Scheduler } from '../../scheduler';
import { scenarioSendWithRetry } from '../../utils/telegram-retry';

// –°–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–º–æ—Ü–∏–π
const MORE_EMOTIONS_PHRASES = [
  '–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ–ª—å—à–µ —ç–º–æ—Ü–∏–π',
  '–ö–∞–∫–∏–µ –µ—â–µ —ç–º–æ—Ü–∏–∏ –±—ã–ª–∏?',
  '–ß—Ç–æ –µ—â–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª?',
  '–ó–∞–≥–ª—è–Ω–∏ –≤ —Ç–∞–±–ª–∏—Ü—É —ç–º–æ—Ü–∏–π, —á—Ç–æ –µ—â–µ –æ—â—É—Ç–∏–ª?',
  '–î–∞–≤–∞–π –Ω–∞–∑–æ–≤–µ–º –±–æ–ª—å—à–µ —ç–º–æ—Ü–∏–π',
  '–ü–æ–ø—Ä–æ–±—É–π –≤—Å–ø–æ–º–Ω–∏—Ç—å –µ—â–µ –ø–∞—Ä—É —ç–º–æ—Ü–∏–π',
  '–ß—Ç–æ –µ—â–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è?',
  '–î–æ–ø–æ–ª–Ω–∏ —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π',
  '–ö–∞–∫–∏–µ –µ—â–µ —á—É–≤—Å—Ç–≤–∞ –º–æ–∂–µ—à—å –Ω–∞–∑–≤–∞—Ç—å?',
  '–ü–æ–∏—â–∏ –≤ —Å–µ–±–µ –µ—â–µ —ç–º–æ—Ü–∏–∏',
  '–ü—Ä–∏—Å–ª—É—à–∞–π—Å—è –∫ —Å–µ–±–µ - —á—Ç–æ –µ—â–µ –æ—â—É—Ç–∏–ª?',
  '–£–≥–ª—É–±–∏—Å—å –≤ —Å–≤–æ–∏ –æ—â—É—â–µ–Ω–∏—è, –∫–∞–∫–∏–µ –µ—â–µ —ç–º–æ—Ü–∏–∏ —Ç—ã –∏—Å–ø—ã—Ç–∞–ª?',
  '–ü–æ–∫–æ–ø–∞–π—Å—è –≤ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö –ø–æ–≥–ª—É–±–∂–µ, —á—Ç–æ —Ç–∞–º –µ—â–µ?',
  '–ß—Ç–æ –µ—â–µ —Ç—ã –ø–µ—Ä–µ–∂–∏–≤–∞–ª –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç?',
  '–ù–∞–∑–æ–≤–∏ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–π',
  '–ö–∞–∫–∏–µ –µ—â–µ —ç–º–æ—Ü–∏–∏ –ø—Ä—è—Ç–∞–ª–∏—Å—å –∑–∞ —ç—Ç–∏–º?',
  '–î–æ–±–∞–≤—å –µ—â–µ —Å–≤–æ–∏—Ö –æ—â—É—â–µ–Ω–∏–π',
  '–ó–∞–≥–ª—è–Ω–∏ –≥–ª—É–±–∂–µ - —á—Ç–æ –µ—â–µ —Ç–∞–º –±—ã–ª–æ?',
  '–ö–∞–∫–∏–º–∏ –µ—â–µ —Å–ª–æ–≤–∞–º–∏ –æ–ø–∏—à–µ—à—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ? –°–º–æ—Ç—Ä–∏ —Ç–∞–±–ª–∏—Ü—É —ç–º–æ—Ü–∏–π',
  '–ù–∞–∑–æ–≤–∏ –±–æ–ª—å—à–µ —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª - —Å —Ç–∞–±–ª–∏—Ü–µ–π –±—É–¥–µ—Ç –ø—Ä–æ—â–µ',
  '–ß—Ç–æ –µ—â–µ —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–ª? –¢–∞–±–ª–∏—Ü–∞ –±—É–¥–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–æ–π',
  '–ö–∞–∫–∏–µ –µ—â–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –±—ã–ª–∏ —Å —Ç–æ–±–æ–π?',
  '–†–∞—Å—à–∏—Ä—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —ç–º–æ—Ü–∏–π - –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–∑–≤–∞—Ç—å –µ—â–µ',
  '–ß—Ç–æ –µ—â–µ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞?',
];

// –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ä–æ—à–æ –æ–ø–∏—Å–∞–ª —ç–º–æ—Ü–∏–∏
const SUPPORT_MESSAGES = [
  '–¢—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤! –Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π! –¢—ã —Å–æ –≤—Å–µ–º —Å–ø—Ä–∞–≤–∏—à—å—Å—è üíö',
  '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç–∞–∫ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∑–∞–ª –ø—Ä–æ —Å–≤–æ–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è. –¢—ã –º–æ–ª–æ–¥–µ—Ü, —á—Ç–æ —Å–º–æ–≥ —ç—Ç–æ –≤—ã—Ä–∞–∑–∏—Ç—å üôåüèª',
  '–Ø –≥–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π! –¢—ã –æ—á–µ–Ω—å —Ç–æ—á–Ω–æ –æ–ø–∏—Å–∞–ª —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞, —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–º–µ–ª–æ—Å—Ç–∏ üíô',
  '–ö–∞–∫–∞—è –≥–ª—É–±–æ–∫–∞—è —Ä–∞–±–æ—Ç–∞ —Å —ç–º–æ—Ü–∏—è–º–∏! –¢—ã –≤—Å–µ –ª—É—á—à–µ —Å–ª—ã—à–∏—à—å —Å–µ–±—è ü´∂üèª –≠—Ç–æ —Ü–µ–Ω–Ω—ã–π –Ω–∞–≤—ã–∫ ‚ö°Ô∏è',
  '–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç—å. –¢—ã –ø—Ä–æ–¥–µ–ª–∞–ª –≤–∞–∂–Ω—É—é —Ä–∞–±–æ—Ç—É —Å —á—É–≤—Å—Ç–≤–∞–º–∏ üíú',
  '–¢—ã —É—á–∏—à—å—Å—è –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ–±—è, –∏ —É —Ç–µ–±—è —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ üí™üèª',
  '–Ø –≤–∏–∂—É, –∫–∞–∫ —Ç—ã —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –Ω–∞–∑–≤–∞—Ç—å –≤—Å–µ —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ üî•',
  '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –¢—ã —Å–º–æ–≥ –≤—ã—Ä–∞–∑–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞–º–∏ üëèüèª',
  '–¢–∞–∫–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —Å–≤–æ–∏–º —ç–º–æ—Ü–∏—è–º –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –±–æ–ª–µ–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º ü¶â –ê —á–µ–º –ª—É—á—à–µ —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å —Å–µ–±—è, —Ç–µ–º –±–æ–ª—å—à–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è –±—É–¥–µ—Ç –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ ü§ç',
  '–ì–æ–≤–æ—Ä–∏—Ç—å –æ –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö - –Ω–µ–ø—Ä–æ—Å—Ç–∞—è —Ä–∞–±–æ—Ç–∞, –∏ —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è! –Ø —Ä—è–¥–æ–º üëêüèª',
  '–Ø —Ü–µ–Ω—é, —á—Ç–æ —Ç—ã –ø–æ–¥–µ–ª–∏–ª—Å—è —ç—Ç–∏–º —Å–æ –º–Ω–æ–π. –¢–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –≤–∞–∂–Ω—ã üïäÔ∏è',
  '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–µ –ø–æ–±–æ—è–ª—Å—è –Ω–∞–∑–≤–∞—Ç—å –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞. –≠—Ç–æ —Å–º–µ–ª–æ üî•',
  '–¢—ã –≤—Å–µ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞–µ—à—å —Å–µ–±—è! –Ø –≤–∏–∂—É —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å üìà',
  '–¢—ã –ø—Ä–∏–∑–Ω–∞–µ—à—å –∏ –Ω–∞–∑—ã–≤–∞–µ—à—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ - —ç—Ç–æ —Ç–∞–∫ –≤–∞–∂–Ω–æ üôåüèª',
  '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —ç–º–æ—Ü–∏—è–º–∏! –¢—ã —Ä–∞—Å—Ç–µ—à—å –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Å–µ–±—è üê∏',
  '–¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞–ª —Å–∏—Ç—É–∞—Ü–∏–∏ - —Ç—ã —É—Å–ª—ã—à–∞–ª —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞! –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è —Å —á–µ–º —É–≥–æ–¥–Ω–æ üíö',
  '–Ø –≤–∏–∂—É, –∫–∞–∫ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞–¥ —Å–æ–±–æ–π. –≠—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç! ‚≠ê',
  '–¢—ã —Å–º–æ–≥ –≤—ã—Ä–∞–∑–∏—Ç—å —Ç–æ, —á—Ç–æ –º–Ω–æ–≥–∏–µ –¥–µ—Ä–∂–∞—Ç –≤–Ω—É—Ç—Ä–∏. –≠—Ç–æ —Ç–≤–æ—è —Å–∏–ª–∞ üí™üèª',
  '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å! –Ø —á—É–≤—Å—Ç–≤—É—é —Ç–≤–æ—é —á–µ—Å—Ç–Ω–æ—Å—Ç—å üôèüèª',
  '–Ø —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π –≤ —ç—Ç–∏—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö. –¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è! ü´Ç',
  '–¢—ã —É—á–∏—à—å—Å—è –±—ã—Ç—å —á–µ—Å—Ç–Ω—ã–º —Å —Å–æ–±–æ–π - —ç—Ç–æ —Å–∞–º–æ–µ —Ü–µ–Ω–Ω–æ–µ üí´',
  '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å! –û–±–Ω–∏–º–∞—é üëêüèª –ö–∞–∂–¥–æ–µ –Ω–∞–∑–≤–∞–Ω–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ - —à–∞–≥ –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è',
  '–¢—ã —Å–º–æ–≥ —É–≤–∏–¥–µ—Ç—å –∏ –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏. –Ø —Å —Ç–æ–±–æ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º! ü§ó',
];

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞ ‚òëÔ∏è" –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π
export async function handleConfirmNegative(ctx: BotContext, bot: Telegraf, scheduler: Scheduler) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id;
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üëç –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º');

    botLogger.info(
      {
        action: 'confirm_negative',
        channelMessageId,
        messageId,
        chatId,
        userId,
      },
      'üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–∞ ‚òëÔ∏è/–ì–æ—Ç–æ–≤–æ ‚òëÔ∏è" –ø–æ—Å–ª–µ –≤—ã–≥—Ä—É–∑–∫–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π'
    );

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (scheduler && userId) {
      const cancelled = scheduler.cancelReminderTimeout(userId);
      botLogger.debug(
        { userId, cancelled },
        cancelled
          ? '‚è∞ –¢–∞–π–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏'
          : '‚úÖ –¢–∞–π–º–µ—Ä–∞ –Ω–µ –±—ã–ª–æ, –Ω–æ –æ—Ç–º–µ—á–µ–Ω–æ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª'
      );
    } else {
      botLogger.warn(
        { userId, hasScheduler: !!scheduler },
        '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å scheduler –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–∞–π–º–µ—Ä–∞'
      );
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í—Å–µ –æ–ø–∏—Å–∞–ª?" –∏–ª–∏ "–ï—Å–ª–∏ —Ç—ã –≤—Å–µ –æ–ø–∏—Å–∞–ª..." —Å –∫–Ω–æ–ø–∫–æ–π
    try {
      await bot.telegram.deleteMessage(chatId!, messageId!);
      botLogger.info({ messageId }, 'üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "–í—Å–µ –æ–ø–∏—Å–∞–ª?"');
    } catch (deleteError) {
      botLogger.warn({ error: deleteError }, '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–í—Å–µ –æ–ø–∏—Å–∞–ª?"');
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∏–∑ –ë–î
    const { getInteractivePost, updateTaskStatus, updateInteractivePostState } = await import('../../db');
    const post = getInteractivePost(channelMessageId);

    if (!post) {
      botLogger.error({ channelMessageId }, '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
    updateTaskStatus(channelMessageId, 1, true);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
    const { db } = await import('../../db');
    const userMessagesQuery = db.query(`
      SELECT message_id, message_preview FROM message_links
      WHERE channel_message_id = ? AND message_type = 'user'
      ORDER BY created_at ASC
    `);
    const userMessages = userMessagesQuery.all(channelMessageId) as any[];

    botLogger.info(
      { channelMessageId, messagesCount: userMessages.length },
      `üìä –ü–æ–ª—É—á–µ–Ω–æ ${userMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`
    );

    let replyToMessageId: number = messageId || 0;
    let needsEmotionsClarification = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ—Ü–∏–∏ –≤–æ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–≤–∫–ª—é—á–∞—è —Å–ª—É—á–∞–π –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ)
    const { countEmotions } = await import('../../utils/emotions');
    const messagesWithFewEmotions: number[] = [];
    const messagesWithNoEmotions: number[] = [];

    if (userMessages.length >= 1) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ—Ü–∏–∏ –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
      for (const msg of userMessages) {
        const messageText = msg.message_preview || '';
        const emotionsResult = countEmotions(messageText, 'all');

        botLogger.debug(
          { messageId: msg.message_id, emotionsCount: emotionsResult.count, emotions: emotionsResult.emotions },
          'üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–æ—Ü–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏'
        );

        if (emotionsResult.count === 0) {
          messagesWithNoEmotions.push(msg.message_id);
        }

        if (emotionsResult.count < 3) {
          messagesWithFewEmotions.push(msg.message_id);
        }
      }
    }

    // === –õ–û–ì–ò–ö–ê –í–´–ë–û–†–ê –û–¢–í–ï–¢–ê –ù–ê –û–°–ù–û–í–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê –°–û–û–ë–©–ï–ù–ò–ô –° < 3 –≠–ú–û–¶–ò–ô ===
    const fewEmotionsCount = messagesWithFewEmotions.length;
    const noEmotionsCount = messagesWithNoEmotions.length;

    if (!chatId || !userId) {
      botLogger.error({ channelMessageId }, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chatId –∏–ª–∏ userId');
      return;
    }

    // –°–ª—É—á–∞–π: —ç–º–æ—Ü–∏–π –Ω–µ—Ç –ù–ò –í –û–î–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏
    if (noEmotionsCount === userMessages.length && userMessages.length > 0) {
      botLogger.info({ channelMessageId, messagesCount: userMessages.length }, 'üòø –≠–º–æ—Ü–∏–π –Ω–µ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏');

      const clarificationText = `<i>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—à—å—Å—è —Å–æ –º–Ω–æ–π! –Ø —Ü–µ–Ω—é —ç—Ç–æ üíö</i>\n\n<b>–î–æ–±–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–π –∫ –∫–∞–∂–¥–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ üòø</b>`;

      try {
        await scenarioSendWithRetry(
          bot,
          chatId,
          userId,
          () =>
            bot.telegram.sendMessage(chatId, clarificationText, {
              parse_mode: 'HTML',
              reply_parameters: { message_id: userMessages[userMessages.length - 1].message_id },
              reply_markup: {
                inline_keyboard: [[{ text: '–ü–æ–º–æ–≥–∏ —Å —ç–º–æ—Ü–∏—è–º–∏', callback_data: `help_emotions_${channelMessageId}` }]],
              },
            }),
          'confirm_negative_no_emotions'
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –∂–¥–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π —Å —Å–∫–æ–ª—å–∑—è—â–µ–π –∫–Ω–æ–ø–∫–æ–π
        updateInteractivePostState(channelMessageId, 'waiting_emotions_addition', {
          user_task1_message_id: userMessages[userMessages.length - 1].message_id,
        });

        botLogger.info({ channelMessageId }, '‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ waiting_emotions_addition (–≤—Å–µ 0)');
      } catch (error) {
        botLogger.error({ error }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —ç–º–æ—Ü–∏–π (–Ω–µ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º)');
      }
      return;
    }

    // –°–ª—É—á–∞–π: 1 —Å–æ–æ–±—â–µ–Ω–∏–µ —Å <3 —ç–º–æ—Ü–∏–π ‚Üí –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ —ç–º–æ—Ü–∏–π (–°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê)
    if (userMessages.length === 1 && fewEmotionsCount === 1) {
      botLogger.info({ channelMessageId }, 'üìù –û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å <3 —ç–º–æ—Ü–∏–π - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ');

      replyToMessageId = userMessages[0].message_id;

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é getEmotionHelpMessage
      const { getEmotionHelpMessage } = await import('../../utils/emotions');
      const emotionAnalysis = countEmotions(userMessages[0].message_preview || '', 'negative');
      const helpMessage = getEmotionHelpMessage(emotionAnalysis.emotions, 'negative');

      // –ï—Å–ª–∏ —ç–º–æ—Ü–∏–π —Å–æ–≤—Å–µ–º –Ω–µ—Ç (0) - —Ç–æ–ª—å–∫–æ "–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π", –∏–Ω–∞—á–µ + "–í –¥—Ä—É–≥–æ–π —Ä–∞–∑"
      const keyboard =
        emotionAnalysis.count === 0
          ? [[{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }]]
          : [
              [{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }],
              [{ text: '–í –¥—Ä—É–≥–æ–π —Ä–∞–∑', callback_data: `skip_neg_${channelMessageId}` }],
            ];

      try {
        await scenarioSendWithRetry(
          bot,
          chatId,
          userId,
          () =>
            bot.telegram.sendMessage(chatId, helpMessage, {
              parse_mode: 'HTML',
              reply_parameters: { message_id: replyToMessageId },
              reply_markup: {
                inline_keyboard: keyboard,
              },
            }),
          'confirm_negative_one_message_few_emotions'
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î - —Ç–µ–ø–µ—Ä—å –∂–¥–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π
        updateInteractivePostState(channelMessageId, 'waiting_emotions_clarification', {
          user_schema_message_id: userMessages[0].message_id,
        });

        botLogger.info({ channelMessageId }, '‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ waiting_emotions_clarification');
      } catch (error) {
        botLogger.error({ error }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —ç–º–æ—Ü–∏–π (1 —Å–æ–æ–±—â–µ–Ω–∏–µ)');
      }
      return;
    }

    // –°–ª—É—á–∞–π: 1 —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ‚â•3 —ç–º–æ—Ü–∏–π ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ü–ª—é—à–∫–∏ (–°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê)
    if (userMessages.length === 1 && fewEmotionsCount === 0) {
      botLogger.info({ channelMessageId }, '‚úÖ –û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ‚â•3 —ç–º–æ—Ü–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ü–ª—é—à–∫–∏');

      replyToMessageId = userMessages[0].message_id;
      await sendPlushkiMessage(bot, chatId, userId, channelMessageId, replyToMessageId);
      return;
    }

    // === –õ–û–ì–ò–ö–ê –î–õ–Ø –ù–ï–°–ö–û–õ–¨–ö–ò–• –°–û–û–ë–©–ï–ù–ò–ô ===

    // –°–ª—É—á–∞–π: —ç–º–æ—Ü–∏–π –Ω–µ—Ç –ù–ò –í –û–î–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    if (userMessages.length > 1) {
      // –°–ª—É—á–∞–π: —ç–º–æ—Ü–∏–π –Ω–µ—Ç –ù–ò –í –û–î–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏
      if (noEmotionsCount === userMessages.length) {
        botLogger.info({ channelMessageId, messagesCount: userMessages.length }, 'üòø –≠–º–æ—Ü–∏–π –Ω–µ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π)');

        const clarificationText = `<i>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—à—å—Å—è —Å–æ –º–Ω–æ–π! –Ø —Ü–µ–Ω—é —ç—Ç–æ üíö</i>\n\n<b>–î–æ–±–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ö–æ—Ç—è –±—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º–æ—Ü–∏–π –∫ –∫–∞–∂–¥–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ üòø</b>`;

        try {
          await scenarioSendWithRetry(
            bot,
            chatId!,
            userId!,
            () =>
              bot.telegram.sendMessage(chatId!, clarificationText, {
                parse_mode: 'HTML',
                reply_parameters: { message_id: userMessages[userMessages.length - 1].message_id },
                reply_markup: {
                  inline_keyboard: [[{ text: '–ü–æ–º–æ–≥–∏ —Å —ç–º–æ—Ü–∏—è–º–∏', callback_data: `help_emotions_${channelMessageId}` }]],
                },
              }),
            'confirm_negative_no_emotions'
          );
        } catch (error) {
          botLogger.error({ error }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —ç–º–æ—Ü–∏–π (–Ω–µ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º)');
        }
        return;
      }

      if (!chatId || !userId) {
        botLogger.error({ channelMessageId }, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chatId –∏–ª–∏ userId');
        return;
      }

      if (fewEmotionsCount === 1) {
        // –¢–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ < 3 —ç–º–æ—Ü–∏–π ‚Üí –ø—Ä–æ—Å–∏–º –¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ—Ü–∏–∏
        replyToMessageId = messagesWithFewEmotions[0];
        botLogger.info({ channelMessageId, messageId: replyToMessageId }, 'üìù 1 —Å–æ–æ–±—â–µ–Ω–∏–µ —Å < 3 —ç–º–æ—Ü–∏–π - –ø—Ä–æ—Å–∏–º –¥–æ–±–∞–≤–∏—Ç—å');

        const clarificationText = `–£ —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç, –∞ –∫ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –¥–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º —ç–º–æ—Ü–∏–π`;

        try {
          await scenarioSendWithRetry(
            bot,
            chatId,
            userId,
            () =>
              bot.telegram.sendMessage(chatId, clarificationText, {
                parse_mode: 'HTML',
                reply_parameters: { message_id: replyToMessageId },
                reply_markup: {
                  inline_keyboard: [[{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }]],
                },
              }),
            'confirm_negative_single_message_few_emotions'
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –∂–¥–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π
          updateInteractivePostState(channelMessageId, 'waiting_emotions_clarification', {
            user_schema_message_id: replyToMessageId,
          });

          botLogger.info({ channelMessageId }, '‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ waiting_emotions_clarification (1 –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö)');
        } catch (error) {
          botLogger.error({ error }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —ç–º–æ—Ü–∏–π (1 –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö)');
        }
        return;
      }

      if (fewEmotionsCount === 0) {
        // –í–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö >= 3 —ç–º–æ—Ü–∏–π ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        replyToMessageId = userMessages[userMessages.length - 1].message_id;
        botLogger.info({ channelMessageId }, '‚úÖ –í–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö >= 3 —ç–º–æ—Ü–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É');

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const { getLastUsedSupportMessages, addUsedSupportMessage } = await import('../../db');
        const lastUsed = getLastUsedSupportMessages(5);

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
        let availableMessages = SUPPORT_MESSAGES.map((msg, idx) => idx).filter(idx => !lastUsed.includes(idx));

        // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç (–≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ
        if (availableMessages.length === 0) {
          availableMessages = SUPPORT_MESSAGES.map((msg, idx) => idx);
        }

        const randomIndex = availableMessages[Math.floor(Math.random() * availableMessages.length)];
        const supportText = SUPPORT_MESSAGES[randomIndex];

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        addUsedSupportMessage(randomIndex);

        botLogger.info({ channelMessageId, messageIndex: randomIndex }, `üíö –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ #${randomIndex}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        try {
          await scenarioSendWithRetry(
            bot,
            chatId,
            userId,
            () =>
              bot.telegram.sendMessage(chatId, supportText, {
                parse_mode: 'HTML',
                reply_parameters: { message_id: replyToMessageId },
                reply_markup: {
                  inline_keyboard: [[{ text: '–ò–¥–µ–º –¥–∞–ª—å—à–µ üöÄ', callback_data: `continue_to_plushki_${channelMessageId}` }]],
                },
              }),
            'confirm_negative_support_message'
          );
        } catch (error) {
          botLogger.error({ error }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
        }
        return;
      }

      if (fewEmotionsCount >= 2 && fewEmotionsCount <= 3) {
        // 2-3 —Å–æ–æ–±—â–µ–Ω–∏—è —Å < 3 —ç–º–æ—Ü–∏–π ‚Üí –ø–æ—à–∞–≥–æ–≤–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        botLogger.info({ channelMessageId, fewEmotionsCount }, 'üìù 2-3 —Å–æ–æ–±—â–µ–Ω–∏—è —Å < 3 —ç–º–æ—Ü–∏–π - –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ—à–∞–≥–æ–≤–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤ message_data
        const { getInteractivePost, db } = await import('../../db');
        const currentPost = getInteractivePost(channelMessageId);

        const updatedMessageData = {
          ...(currentPost?.message_data || {}),
          emotions_clarification_messages: messagesWithFewEmotions,
          emotions_clarification_step: 0,
        };

        const updateQuery = db.query(`
          UPDATE interactive_posts
          SET current_state = ?, message_data = ?
          WHERE channel_message_id = ?
        `);
        updateQuery.run('waiting_emotions_clarification', JSON.stringify(updatedMessageData), channelMessageId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
        await sendEmotionsClarificationStep(bot, chatId!, userId!, channelMessageId, messagesWithFewEmotions[0], 0, fewEmotionsCount);
        return;
      }

      if (fewEmotionsCount > 3) {
        // –ë–æ–ª—å—à–µ 3 —Å–æ–æ–±—â–µ–Ω–∏–π —Å < 3 —ç–º–æ—Ü–∏–π ‚Üí –æ–¥–Ω–æ –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        botLogger.info({ channelMessageId, fewEmotionsCount }, 'üìù –ë–æ–ª—å—à–µ 3 —Å–æ–æ–±—â–µ–Ω–∏–π —Å < 3 —ç–º–æ—Ü–∏–π - –æ–±—â–µ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ');

        const clarificationText = `<i>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—à—å—Å—è —Å–æ –º–Ω–æ–π! –Ø —Ü–µ–Ω—é —ç—Ç–æ üíö</i>\n\n<b>–ù–∞–ø–∏—à–∏ —á—É—Ç—å –±–æ–ª—å—à–µ –æ —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤–∞—Ö, –≤ –∫–∞–∂–¥–æ–º —Å–æ–±—ã—Ç–∏–∏ —Ç—ã —á—Ç–æ-—Ç–æ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—à—å üíî</b>`;

        if (!chatId || !userId) {
          botLogger.error({ channelMessageId }, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chatId –∏–ª–∏ userId');
          return;
        }

        try {
          await scenarioSendWithRetry(
            bot,
            chatId,
            userId,
            () =>
              bot.telegram.sendMessage(chatId, clarificationText, {
                parse_mode: 'HTML',
                reply_parameters: { message_id: userMessages[userMessages.length - 1].message_id },
                reply_markup: {
                  inline_keyboard: [[{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }]],
                },
              }),
            'confirm_negative_many_clarifications'
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –∂–¥–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–π —Å —Å–∫–æ–ª—å–∑—è—â–µ–π –∫–Ω–æ–ø–∫–æ–π
          updateInteractivePostState(channelMessageId, 'waiting_emotions_addition', {
            user_task1_message_id: userMessages[userMessages.length - 1].message_id,
          });

          botLogger.info({ channelMessageId }, '‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ waiting_emotions_addition (>3 —Å <3)');
        } catch (error) {
          botLogger.error({ error }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—â–µ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è');
        }
        return;
      }
    }

    // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏"
    if (chatId && userId) {
      await sendPlushkiMessage(bot, chatId, userId, channelMessageId, replyToMessageId);
    }
  } catch (error) {
    botLogger.error(
      { error: (error as Error).message, stack: (error as Error).stack },
      '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–î–∞ ‚òëÔ∏è"'
    );
    try {
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑');
    } catch (answerError) {
      botLogger.error({ answerError }, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å answerCbQuery –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
    }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ "–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏"
async function sendPlushkiMessage(
  bot: Telegraf,
  chatId: number,
  userId: number,
  channelMessageId: number,
  replyToMessageId: number
) {
  const { updateInteractivePostState } = await import('../../db');

  const plushkiText = '2. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b>\n\n–í—Å–ø–æ–º–Ω–∏ –∏ –Ω–∞–ø–∏—à–∏ –≤—Å–µ –ø—Ä–∏—è—Ç–Ω–æ–µ –∑–∞ –¥–µ–Ω—å\n–¢—É—Ç —Ç–æ–∂–µ –æ–ø–∏—à–∏ —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏—Å–ø—ã—Ç–∞–ª üòç';

  const plushkiKeyboard = {
    inline_keyboard: [[{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }]],
  };

  try {
    const plushkiMessage = await scenarioSendWithRetry(
      bot,
      chatId,
      userId,
      () =>
        bot.telegram.sendMessage(chatId, plushkiText, {
          parse_mode: 'HTML',
          reply_parameters: { message_id: replyToMessageId },
          reply_markup: plushkiKeyboard,
        }),
      'confirm_negative_plushki',
      { maxAttempts: 5, intervalMs: 3000 }
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
    updateInteractivePostState(channelMessageId, 'waiting_positive', {
      bot_task2_message_id: plushkiMessage.message_id,
    });

    botLogger.info({ channelMessageId }, '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã "–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏"');
  } catch (sendError) {
    botLogger.error({ error: sendError }, '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª—é—à–∫–∏');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–π
export async function sendEmotionsClarificationStep(
  bot: Telegraf,
  chatId: number,
  userId: number,
  channelMessageId: number,
  messageId: number,
  step: number,
  totalSteps: number
) {
  let text: string;
  let keyboard: any;

  if (step === 0) {
    // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const randomPhrase = MORE_EMOTIONS_PHRASES[Math.floor(Math.random() * MORE_EMOTIONS_PHRASES.length)];
    text = `<i>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—à—å—Å—è —Å–æ –º–Ω–æ–π! –Ø —Ü–µ–Ω—é —ç—Ç–æ üíö</i>\n\n<b>${randomPhrase}</b>`;
    keyboard = {
      inline_keyboard: [[{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }]],
    };
  } else if (step === 1) {
    // –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = '–ò –≤–æ—Ç —Ç—É—Ç –¥–æ–±–∞–≤—å —ç–º–æ—Ü–∏–π ü•π';
    keyboard = {
      inline_keyboard: [[{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }]],
    };
  } else if (step === 2) {
    // –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = '–ê –µ—â–µ —Å—é–¥–∞ –¥–æ–±–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏—Ö —á—É–≤—Å—Ç–≤';
    keyboard = {
      inline_keyboard: [[{ text: '–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–≤–∞—Ç–∏—Ç - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å üòÆ‚Äçüí®', callback_data: `skip_emotions_clarification_${channelMessageId}` }]],
    };
  }

  try {
    await scenarioSendWithRetry(
      bot,
      chatId,
      userId,
      () =>
        bot.telegram.sendMessage(chatId, text!, {
          parse_mode: 'HTML',
          reply_parameters: { message_id: messageId },
          reply_markup: keyboard!,
        }),
      `emotions_clarification_step_${step}`
    );

    botLogger.info({ channelMessageId, step, messageId }, `üìù –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å —ç–º–æ—Ü–∏–π, —à–∞–≥ ${step + 1}`);
  } catch (error) {
    botLogger.error({ error, channelMessageId, step }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —ç–º–æ—Ü–∏–π');
  }
}
