import { botLogger } from '../../logger';
import type { BotContext } from '../../types';
import type { Telegraf } from 'telegraf';
import { readFileSync } from 'fs';
import path from 'path';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π
export async function handleSkipPositiveEmotions(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id;
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ');

    botLogger.info(
      {
        action: 'skip_positive_emotions',
        channelMessageId,
        messageId,
        chatId,
        userId,
      },
      'üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π'
    );

    // –ü–æ–ª—É—á–∞–µ–º scheduler –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥–∞–º
    const scheduler = (bot as any).scheduler;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å
    let finalMessage = '–£ –Ω–∞—Å –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥\n\n';
    finalMessage += '3. <b>–î—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</b>\n\n';
    finalMessage += '<blockquote><b>–î—ã—Ö–∞–Ω–∏–µ –ø–æ –∫–≤–∞–¥—Ä–∞—Ç—É:</b>\n–í–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞, –∑–∞–¥–µ—Ä–∂–∫–∞ –¥—ã—Ö–∞–Ω–∏—è –Ω–∞ 4 —Å—á–µ—Ç–∞, –≤—ã–¥–æ—Ö –Ω–∞ 4 —Å—á–µ—Ç–∞ –∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 4 —Å—á–µ—Ç–∞</blockquote>';

    const practiceKeyboard = {
      inline_keyboard: [
        [{ text: '‚úÖ –°–¥–µ–ª–∞–ª', callback_data: `pract_done_${channelMessageId}` }],
        [{ text: '‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å', callback_data: `pract_delay_${channelMessageId}` }],
      ],
    };

    try {
      // –ß–∏—Ç–∞–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª
      const PRACTICE_VIDEO_PATH = path.join(process.cwd(), 'assets', 'videos', '–ö–≤–∞–¥—Ä–∞—Ç –¥—ã—Ö–∞–Ω–∏—è.MOV');
      const PRACTICE_VIDEO_THUMBNAIL_PATH = path.join(process.cwd(), 'assets', 'videos', 'breathing-practice-thumbnail.jpg');
      const practiceVideo = readFileSync(PRACTICE_VIDEO_PATH);
      const thumbnailBuffer = readFileSync(PRACTICE_VIDEO_THUMBNAIL_PATH);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –ø—Ä–∞–∫—Ç–∏–∫–æ–π
      const result = await bot.telegram.sendVideo(chatId!, { source: practiceVideo }, {
        caption: finalMessage,
        parse_mode: 'HTML',
        reply_to_message_id: messageId!, // ‚ö†Ô∏è –ù–ï reply_parameters –¥–ª—è –≤–∏–¥–µ–æ!
        reply_markup: practiceKeyboard,
        thumbnail: { source: thumbnailBuffer },
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
      const { updateInteractivePostState, updateTaskStatus, saveMessage } = await import('../../db');
      
      // –û—Ç–º–µ—á–∞–µ–º –≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
      updateTaskStatus(channelMessageId, 2, true);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      updateInteractivePostState(channelMessageId, 'waiting_practice', {
        bot_task3_message_id: result.message_id,
      });
      
      // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ 3 –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      updateTaskStatus(channelMessageId, 3, true);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      saveMessage(userId!, finalMessage, new Date().toISOString(), 0);
      
      // –û—Ç–º–µ–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å scheduler
      if (scheduler && userId) {
        scheduler.clearReminder(userId);
        botLogger.debug({ userId, channelMessageId }, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –∏ –ø–µ—Ä–µ—à–µ–ª –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ');
      }

      botLogger.info(
        { 
          channelMessageId,
          task3MessageId: result.message_id
        }, 
        '‚úÖ –ü—Ä–∞–∫—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π'
      );
    } catch (error) {
      botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π');
      
      // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.telegram.sendMessage(chatId!, finalMessage, {
        parse_mode: 'HTML',
        reply_parameters: { message_id: messageId! },
        reply_markup: practiceKeyboard,
      });
    }
  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π');
  }
}