import { botLogger } from '../../logger';
import type { BotContext } from '../../types';
import type { Telegraf } from 'telegraf';
import { scenarioSendWithRetry } from '../../utils/telegram-retry';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è - –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
export async function handleSkipNeg(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id;
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üëç –•–æ—Ä–æ—à–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª—é—à–∫–∞–º');

    botLogger.info(
      {
        action: 'skip_neg',
        channelMessageId,
        messageId,
        chatId,
        userId,
      },
      'üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
    );

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∏–∑ –ë–î
    const { getInteractivePost, updateTaskStatus, updateInteractivePostState, escapeHTML, saveInteractivePost } = await import('../../db');
    let post = getInteractivePost(channelMessageId);

    if (!post) {
      botLogger.warn({ channelMessageId }, '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
      
      // Fallback: —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      try {
        const defaultMessageData = {
          positive_part: { additional_text: null }, // –ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–ª—é—à–µ–∫
          feels_and_emotions: { additional_text: null }
        };
        
        saveInteractivePost(channelMessageId, userId!, defaultMessageData, 'breathing');
        post = getInteractivePost(channelMessageId);
        
        if (!post) {
          // –ï—Å–ª–∏ –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é
          const fallbackText = '2. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b> (—Å–∏—Ç—É–∞—Ü–∏—è+—ç–º–æ—Ü–∏—è)';
          await scenarioSendWithRetry(
            bot,
            chatId!,
            userId!,
            () => bot.telegram.sendMessage(chatId!, fallbackText, {
              parse_mode: 'HTML',
              reply_parameters: { message_id: messageId! },
            }),
            'skip_neg_fallback',
            { maxAttempts: 5, intervalMs: 3000 }
          );
          botLogger.error({ channelMessageId }, '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –≤ –ë–î');
          return;
        }
      } catch (fallbackError) {
        botLogger.error({ error: fallbackError }, '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback –∑–∞–ø–∏—Å–∏');
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        const fallbackText = '2. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b> (—Å–∏—Ç—É–∞—Ü–∏—è+—ç–º–æ—Ü–∏—è)';
        await scenarioSendWithRetry(
          bot,
          chatId!,
          userId!,
          () => bot.telegram.sendMessage(chatId!, fallbackText, {
            parse_mode: 'HTML',
            reply_parameters: { message_id: messageId! },
          }),
          'skip_neg_fallback2',
          { maxAttempts: 3, intervalMs: 2000 }
        );
        return;
      }
    }

    // –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ
    updateTaskStatus(channelMessageId, 1, true);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª—é—à–∫–∏ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
    let plushkiText = '2. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b>\n\n–í—Å–ø–æ–º–Ω–∏ –∏ –Ω–∞–ø–∏—à–∏ –≤—Å–µ –ø—Ä–∏—è—Ç–Ω–æ–µ –∑–∞ –¥–µ–Ω—å\n–¢—É—Ç —Ç–æ–∂–µ –æ–ø–∏—à–∏ —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏—Å–ø—ã—Ç–∞–ª üòç';
    if (post.message_data?.positive_part?.additional_text) {
      plushkiText += `\n\n<blockquote>${escapeHTML(post.message_data.positive_part.additional_text)}</blockquote>`;
    }

    const plushkiMessage = await scenarioSendWithRetry(
      bot,
      chatId!,
      userId!,
      () => bot.telegram.sendMessage(chatId!, plushkiText, {
        parse_mode: 'HTML',
        reply_parameters: {
          message_id: messageId!,
        },
        reply_markup: {
          inline_keyboard: [[{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }]],
        },
      }),
      'skip_neg_plushki'
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å—Ç–∞, —á—Ç–æ–±—ã –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ö–µ–º—É –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'waiting_positive' –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    updateInteractivePostState(channelMessageId, 'waiting_positive', {
      bot_task2_message_id: plushkiMessage.message_id,
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ
    const scheduler = (bot as any).scheduler;
    if (scheduler && userId) {
      scheduler.setIncompleteWorkReminder(userId, channelMessageId);
      botLogger.debug({ userId, channelMessageId }, '‚è∞ –¢–∞–π–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è');
    }

    botLogger.info(
      { 
        channelMessageId,
        newState: 'waiting_positive',
        task2MessageId: plushkiMessage.message_id
      }, 
      '‚úÖ –ü–ª—é—à–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ'
    );
  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞');
  }
}