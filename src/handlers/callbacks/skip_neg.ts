import { botLogger } from '../../logger';
import type { BotContext } from '../../types';
import type { Telegraf } from 'telegraf';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è - –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
export async function handleSkipNeg(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id;
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üëç –•–æ—Ä–æ—à–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª—é—à–∫–∞–º');

    botLogger.info(
      {
        action: 'skip_neg',
        channelMessageId,
        messageId,
        chatId,
        userId,
      },
      'üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è'
    );

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∏–∑ –ë–î
    const { getInteractivePost, updateTaskStatus, updateInteractivePostState, escapeHTML } = await import('../../db');
    const post = getInteractivePost(channelMessageId);

    if (!post) {
      botLogger.error({ channelMessageId }, '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
      return;
    }

    // –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ
    updateTaskStatus(channelMessageId, 1, true);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª—é—à–∫–∏ (–≤—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ)
    let plushkiText = '2. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b> (—Å–∏—Ç—É–∞—Ü–∏—è+—ç–º–æ—Ü–∏—è)';
    if (post.message_data?.positive_part?.additional_text) {
      plushkiText += `\n<blockquote>${escapeHTML(post.message_data.positive_part.additional_text)}</blockquote>`;
    }

    const plushkiMessage = await bot.telegram.sendMessage(chatId!, plushkiText, {
      parse_mode: 'HTML',
      reply_parameters: {
        message_id: messageId!,
      },
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å—Ç–∞, —á—Ç–æ–±—ã –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ö–µ–º—É –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞
    updateInteractivePostState(channelMessageId, 'waiting_task2', {
      bot_task2_message_id: plushkiMessage.message_id,
    });

    botLogger.info({ channelMessageId }, '‚úÖ –ü–ª—é—à–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞');
  } catch (error) {
    botLogger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞');
  }
}