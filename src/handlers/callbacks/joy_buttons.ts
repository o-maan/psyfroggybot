import type { BotContext } from '../../types';
import { botLogger } from '../../logger';
import { JoyHandler } from '../../joy-handler';
import { Scheduler } from '../../scheduler';
import { Telegraf } from 'telegraf';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å üî•"
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–¥–æ—Å—Ç–∏
 */
export async function handleJoyAdd(ctx: BotContext, bot: Telegraf, scheduler: Scheduler) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    if (!userId) {
      botLogger.error({ channelMessageId }, '–ù–µ—Ç userId –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ joy_add');
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return;
    }

    await ctx.answerCbQuery('–î–æ–±–∞–≤–ª—è—é –≤ —Å–ø–∏—Å–æ–∫...‚ö°Ô∏è');

    botLogger.info(
      { action: 'joy_add', channelMessageId, userId },
      'üî• –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å" –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–¥–æ—Å—Ç–∏'
    );

    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const replyToMessageId = ctx.callbackQuery.message?.message_id;

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä JoyHandler —Å –æ–±—â–∏–º–∏ Map –∏–∑ scheduler
    const joyHandler = new JoyHandler(
      bot,
      chatId,
      userId,
      channelMessageId,
      scheduler.joyPendingMessages,
      scheduler.joyLastButtonMessageId
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–∞–¥–æ—Å—Ç–∏
    await joyHandler.saveJoySources(replyToMessageId);

    botLogger.info({ userId, channelMessageId }, '‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–∞–¥–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  } catch (error) {
    botLogger.error(
      { error: (error as Error).message, stack: (error as Error).stack },
      '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ joy_add'
    );

    try {
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üôè');
    } catch (answerError) {
      botLogger.error({ answerError }, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å answerCbQuery –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
    }
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ ‚ö°Ô∏è"
 * –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ä–∞–¥–æ—Å—Ç–∏
 */
export async function handleJoyAddMore(ctx: BotContext, bot: Telegraf, scheduler: Scheduler) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    if (!userId) {
      botLogger.error({ channelMessageId }, '–ù–µ—Ç userId –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ joy_add_more');
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return;
    }

    await ctx.answerCbQuery('–ñ–¥—É –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–∞–¥–æ—Å—Ç–∏ ‚ö°Ô∏è');

    botLogger.info(
      { action: 'joy_add_more', channelMessageId, userId },
      '‚ö°Ô∏è –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ" –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–¥–æ—Å—Ç–∏'
    );

    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const replyToMessageId = ctx.callbackQuery.message?.message_id;

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä JoyHandler —Å –æ–±—â–∏–º–∏ Map –∏–∑ scheduler
    const joyHandler = new JoyHandler(
      bot,
      chatId,
      userId,
      channelMessageId,
      scheduler.joyPendingMessages,
      scheduler.joyLastButtonMessageId
    );

    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    await joyHandler.startAddMoreSession(replyToMessageId);

    botLogger.info({ userId, channelMessageId }, '‚úÖ –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
  } catch (error) {
    botLogger.error(
      { error: (error as Error).message, stack: (error as Error).stack },
      '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ joy_add_more'
    );

    try {
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üôè');
    } catch (answerError) {
      botLogger.error({ answerError }, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å answerCbQuery –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
    }
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å"
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ä–∞–¥–æ—Å—Ç–∏
 */
export async function handleJoyView(ctx: BotContext, bot: Telegraf, scheduler: Scheduler) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const userId = ctx.from?.id;

    if (!userId) {
      botLogger.error({ channelMessageId }, '–ù–µ—Ç userId –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ joy_view');
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
      return;
    }

    await ctx.answerCbQuery('–ü–æ–∫–∞–∑—ã–≤–∞—é —Å–ø–∏—Å–æ–∫ üìã');

    botLogger.info(
      { action: 'joy_view', channelMessageId, userId },
      'üìã –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å" –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–¥–æ—Å—Ç–∏'
    );

    const chatId = ctx.callbackQuery.message?.chat?.id!;
    const replyToMessageId = ctx.callbackQuery.message?.message_id;

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä JoyHandler —Å –æ–±—â–∏–º–∏ Map –∏–∑ scheduler
    const joyHandler = new JoyHandler(
      bot,
      chatId,
      userId,
      channelMessageId,
      scheduler.joyPendingMessages,
      scheduler.joyLastButtonMessageId
    );

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    await joyHandler.showJoyList(replyToMessageId);

    botLogger.info({ userId, channelMessageId }, '‚úÖ –ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ä–∞–¥–æ—Å—Ç–∏');
  } catch (error) {
    botLogger.error(
      { error: (error as Error).message, stack: (error as Error).stack },
      '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ joy_view'
    );

    try {
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üôè');
    } catch (answerError) {
      botLogger.error({ answerError }, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å answerCbQuery –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
    }
  }
}
