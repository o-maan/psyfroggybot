import { botLogger } from '../../logger';
import type { BotContext } from '../../types';
import type { Telegraf } from 'telegraf';
import { scenarioSendWithRetry } from '../../utils/telegram-retry';

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–¥–µ–º –¥–∞–ª—å—à–µ üöÄ" –ø–æ—Å–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
export async function handleContinueToPlushki(ctx: BotContext, bot: Telegraf) {
  try {
    const channelMessageId = parseInt(ctx.match![1]);
    const messageId = ctx.callbackQuery.message?.message_id;
    const chatId = ctx.callbackQuery.message?.chat?.id;
    const userId = ctx.from?.id;

    await ctx.answerCbQuery('üöÄ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º');

    botLogger.info(
      {
        action: 'continue_to_plushki',
        channelMessageId,
        messageId,
        chatId,
        userId,
      },
      'üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ò–¥–µ–º –¥–∞–ª—å—à–µ üöÄ"'
    );

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –∏–∑ –ë–î –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { getInteractivePost, updateTaskStatus, updateInteractivePostState, db } = await import('../../db');
    const post = getInteractivePost(channelMessageId);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è reply
    const lastUserMessageQuery = db.query(`
      SELECT message_id FROM message_links
      WHERE channel_message_id = ? AND message_type = 'user'
      ORDER BY created_at DESC
      LIMIT 1
    `);
    const lastUserMessage = lastUserMessageQuery.get(channelMessageId) as { message_id: number } | null;
    const replyToMessageId = lastUserMessage?.message_id || messageId;

    if (!post) {
      botLogger.error({ channelMessageId }, '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
    updateTaskStatus(channelMessageId, 1, true);

    if (!chatId || !userId || !messageId) {
      botLogger.error({ channelMessageId }, '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chatId, userId –∏–ª–∏ messageId');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏"
    const plushkiText = '2. <b>–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏</b>\n\n–í—Å–ø–æ–º–Ω–∏ –∏ –Ω–∞–ø–∏—à–∏ –≤—Å–µ –ø—Ä–∏—è—Ç–Ω–æ–µ –∑–∞ –¥–µ–Ω—å\n–¢—É—Ç —Ç–æ–∂–µ –æ–ø–∏—à–∏ —ç–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∏—Å–ø—ã—Ç–∞–ª üòç';

    const plushkiKeyboard = {
      inline_keyboard: [[{ text: '–¢–∞–±–ª–∏—Ü–∞ —ç–º–æ—Ü–∏–π', callback_data: `emotions_table_${channelMessageId}` }]],
    };

    try {
      const plushkiMessage = await scenarioSendWithRetry(
        bot,
        chatId,
        userId,
        () =>
          bot.telegram.sendMessage(chatId, plushkiText, {
            parse_mode: 'HTML',
            reply_parameters: { message_id: replyToMessageId },
            reply_markup: plushkiKeyboard,
          }),
        'continue_to_plushki_message',
        { maxAttempts: 5, intervalMs: 3000 }
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
      updateInteractivePostState(channelMessageId, 'waiting_positive', {
        bot_task2_message_id: plushkiMessage.message_id,
      });

      botLogger.info({ channelMessageId }, '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã "–ü–ª—é—à–∫–∏ –¥–ª—è –ª—è–≥—É—à–∫–∏"');
    } catch (sendError) {
      botLogger.error({ error: sendError }, '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª—é—à–∫–∏');
    }
  } catch (error) {
    botLogger.error(
      { error: (error as Error).message, stack: (error as Error).stack },
      '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ò–¥–µ–º –¥–∞–ª—å—à–µ üöÄ"'
    );
    try {
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑');
    } catch (answerError) {
      botLogger.error({ answerError }, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å answerCbQuery –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
    }
  }
}
