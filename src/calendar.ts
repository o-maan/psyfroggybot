import { google } from 'googleapis';
import { OAuth2Client } from 'google-auth-library';
import { calendarLogger } from './logger';

import { config } from 'dotenv';
config();

export class CalendarService {
  private oauth2Client: OAuth2Client;
  private calendar: any;

  constructor() {
    this.oauth2Client = new google.auth.OAuth2(
      process.env.GOOGLE_CLIENT_ID,
      process.env.GOOGLE_CLIENT_SECRET,
      process.env.GOOGLE_REDIRECT_URI
    );

    this.calendar = google.calendar({ version: 'v3', auth: this.oauth2Client });
  }

  // –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  getAuthUrl(options?: { state?: string }): string {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    const scopes = ['https://www.googleapis.com/auth/calendar.readonly'];
    const params: any = {
      access_type: 'offline',
      scope: scopes,
      prompt: 'consent',
    };
    if (options?.state) {
      params.state = options.state;
    }
    return this.oauth2Client.generateAuthUrl(params);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ –∫–æ–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  async getToken(code: string) {
    const { tokens } = await this.oauth2Client.getToken(code);
    this.oauth2Client.setCredentials(tokens);
    return tokens;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
  setToken(tokens: any) {
    this.oauth2Client.setCredentials(tokens);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞ –ø–µ—Ä–∏–æ–¥
  async getEvents(timeMin: string, timeMax: string) {
    try {
      const response = await this.calendar.events.list({
        calendarId: 'primary', // primary - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        timeMin,
        timeMax,
        singleEvents: true,
        orderBy: 'startTime',
        maxResults: 100, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
      });

      return response.data.items;
    } catch (error: any) {
      calendarLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è');

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ Google OAuth
      if (error.code === 401 || error.message?.includes('invalid_grant')) {
        calendarLogger.error({ error: '–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫' }, 'OAuth –æ—à–∏–±–∫–∞');
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –ø–∞–¥–µ–Ω–∏—è
        return [];
      }

      if (error.code === 403) {
        calendarLogger.error({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞' }, 'Calendar API –æ—à–∏–±–∫–∞');
        return [];
      }

      if (error.code === 429) {
        calendarLogger.error({ error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤' }, 'Calendar API –æ—à–∏–±–∫–∞');
        return [];
      }

      // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è graceful degradation
      calendarLogger.error({ error: error.message, stack: error.stack }, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Google Calendar');
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  async getTodayEvents() {
    const now = new Date();
    const startOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const endOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);

    return this.getEvents(startOfDay.toISOString(), endOfDay.toISOString());
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
  async getTomorrowEvents() {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const startOfDay = new Date(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate());
    const endOfDay = new Date(tomorrow.getFullYear(), tomorrow.getMonth(), tomorrow.getDate() + 1);

    return this.getEvents(startOfDay.toISOString(), endOfDay.toISOString());
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é
  async getWeekEvents() {
    const now = new Date();
    const startOfWeek = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const endOfWeek = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 7);

    return this.getEvents(startOfWeek.toISOString(), endOfWeek.toISOString());
  }
}

/**
 * Format a list of Google Calendar events for display.
 * @param events Array of calendar events (from Google API)
 * @param options Formatting options
 * @returns Formatted string for Telegram/HTML
 */
export function formatCalendarEvents(
  events: any[],
  options?: {
    locale?: string;
    showDate?: boolean;
    showBusy?: boolean;
    showLocation?: boolean;
    showDescription?: boolean;
    showLink?: boolean;
  }
): string {
  const locale = options?.locale || 'ru-RU';
  if (!events || events.length === 0) return '–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π.';
  return events
    .map(e => {
      const start = e.start?.dateTime || e.start?.date;
      const end = e.end?.dateTime || e.end?.date;
      const isAllDay = !e.start?.dateTime;
      const startDate = start
        ? new Date(start).toLocaleString(locale, {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            ...(isAllDay ? {} : { hour: '2-digit', minute: '2-digit' }),
          })
        : '';
      const endDate = end
        ? new Date(end).toLocaleString(locale, {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            ...(isAllDay ? {} : { hour: '2-digit', minute: '2-digit' }),
          })
        : '';
      let line = `<b>${e.summary || '(–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)'}</b>`;
      if (options?.showDate !== false) {
        if (isAllDay) {
          line += `\nüóìÔ∏è –í–µ—Å—å –¥–µ–Ω—å: ${startDate}`;
        } else {
          line += `\nüïí ${startDate} - ${endDate}`;
        }
      }
      if (options?.showBusy && e.transparency) {
        line += `\n–°—Ç–∞—Ç—É—Å: ${e.transparency === 'transparent' ? 'free' : 'busy'}`;
      }
      if (options?.showLocation && e.location) {
        line += `\nüìç ${e.location}`;
      }
      if (options?.showDescription && e.description) {
        line += `\nüìù ${e.description}`;
      }
      if (options?.showLink && e.htmlLink) {
        line += `\nüîó <a href=\"${e.htmlLink}\">–û—Ç–∫—Ä—ã—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ</a>`;
      }
      return line;
    })
    .join('\n\n');
}
