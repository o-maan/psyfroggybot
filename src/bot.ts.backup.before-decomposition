import { config } from 'dotenv';
import express, { Request, Response } from 'express';
import { Telegraf } from 'telegraf';
import { CalendarService, formatCalendarEvents, getUserTodayEvents } from './calendar.ts';
import {
  addUser,
  getLastNMessages,
  getLastUserToken,
  saveMessage,
  saveUserToken,
  updateUserGender,
  updateUserName,
  updateUserResponse,
} from './db.ts';
import { generateUserResponse } from './llm.ts';
import { botLogger, logger } from './logger.ts';
import { Scheduler } from './scheduler.ts';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

// –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
logger.info(
  {
    IS_TEST_BOT: process.env.IS_TEST_BOT,
    TOKEN_PREFIX: process.env.TELEGRAM_BOT_TOKEN?.substring(0, 10) + '...',
    NODE_ENV: process.env.NODE_ENV,
  },
  'ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'
);

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || '');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
import { trackIncomingMessage, wrapTelegramApi } from './message-handler.ts';

// –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º API –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
wrapTelegramApi(bot);

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.use(trackIncomingMessage);

// –û—Ç–ª–∞–¥–∫–∞ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
bot.use(async (ctx, next) => {
  const logData: any = {
    updateType: ctx.updateType,
    chatId: ctx.chat?.id,
    from: ctx.from?.id,
    callbackQuery: ctx.callbackQuery ? true : false,
    message: ctx.message ? true : false,
  };

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è callback_query
  if (ctx.callbackQuery) {
    logData.callbackData = 'data' in ctx.callbackQuery ? ctx.callbackQuery.data : undefined;
    logData.callbackFrom = ctx.callbackQuery.from?.id;
    logData.callbackChatId = ctx.callbackQuery.message?.chat?.id;
  }

  botLogger.info(logData, 'üì• –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram');
  return next();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err: any, ctx) => {
  botLogger.error(
    {
      error: err?.message || String(err),
      stack: err?.stack,
      updateType: ctx.updateType,
      chatId: ctx.chat?.id,
      userId: ctx.from?.id,
    },
    '‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –±–æ—Ç–∞'
  );
});

// –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
const calendarService = new CalendarService();
const scheduler = new Scheduler(bot, calendarService);

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
import { registerAdminCommands } from './commands/admin/index';
registerAdminCommands(bot, scheduler);

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
import {
  handleCallbackQuery,
  handleDailySkipAll,
  handleSkipNeg,
  handleDailySkipNegative,
  handlePractDone,
  handlePracticeDone,
  handlePractDelay,
  handlePracticePostpone,
  handleSkipSchema,
} from './handlers/callbacks';

// Middleware –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
bot.use(async (ctx, next) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–µ–∑ chat (–Ω–∞–ø—Ä–∏–º–µ—Ä, inline_query)
  if (!ctx.chat) {
    return next();
  }

  const chatId = ctx.chat.id;
  const TEST_CHANNEL_ID = -1002846400650;
  const TEST_CHAT_ID = -1002798126153;
  const isTestChannel = chatId === TEST_CHANNEL_ID || chatId === TEST_CHAT_ID;

  // –î–ª—è –∫–æ–º–∞–Ω–¥ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–±–æ–∏–º –±–æ—Ç–∞–º
  if (ctx.chat.type === 'private') {
    return next();
  }

  if (scheduler.isTestBot() && !isTestChannel) {
    // –¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö (–∫—Ä–æ–º–µ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    botLogger.debug(
      { chatId, isTestBot: true, chatType: ctx.chat.type },
      '–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞'
    );
    return;
  }

  if (!scheduler.isTestBot() && isTestChannel) {
    // –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
    botLogger.debug(
      { chatId, isTestBot: false, chatType: ctx.chat.type },
      '–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞'
    );
    return;
  }

  return next();
});

// --- Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Google OAuth2 callback –∏ REST ---
const restServ = express();
const SERVER_PORT = process.env.SERVER_PORT || process.env.PORT || 3456;
// const TELEGRAM_WEBHOOK_PORT = process.env.TELEGRAM_WEBHOOK_PORT || 8443;
// const TELEGRAM_WEBHOOK_PATH =
//   process.env.TELEGRAM_WEBHOOK_PATH || "/telegraf/webhook";
// const TELEGRAM_WEBHOOK_URL =
//   process.env.TELEGRAM_WEBHOOK_URL ||
//   `https://${
//     process.env.FLY_APP_NAME || "psyfroggybot-np0edq"
//   }.fly.dev:${TELEGRAM_WEBHOOK_PORT}${TELEGRAM_WEBHOOK_PATH}`;

// --- Telegraf webhook ---
// bot.telegram.setWebhook(TELEGRAM_WEBHOOK_URL);
// restServ.use(TELEGRAM_WEBHOOK_PATH, bot.webhookCallback(TELEGRAM_WEBHOOK_PATH));

restServ.use(express.json());

restServ.all('/oauth2callback', async (req: Request, res: Response) => {
  const code = req.query.code as string;
  const state = req.query.state as string;
  const chatId = Number(state);
  botLogger.debug({ chatId, codeLength: code?.length || 0 }, `OAuth callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
  if (!code) {
    res.status(400).send('No code provided');
    return;
  }
  if (!chatId || isNaN(chatId)) {
    res.status(400).send('Invalid chat ID in state parameter');
    return;
  }
  try {
    const tokens = await calendarService.getToken(code);
    saveUserToken(chatId, JSON.stringify(tokens));
    res.send('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É.');
    // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    logger.info({ chatId, code: code.substring(0, 10) + '...' }, 'OAuth —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω');
    await bot.telegram.sendMessage(chatId, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É.');
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack, chatId }, '–û—à–∏–±–∫–∞ OAuth —Ç–æ–∫–µ–Ω–∞');
    res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.');
  }
});

restServ.get('/status', (req: Request, res: Response) => {
  res.json({ status: 'up' });
});

restServ.all('/sendDailyMessage', async (req: Request, res: Response) => {
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
  try {
    logger.info(
      {
        method: req.method,
        ip: req.ip,
        userAgent: req.headers['user-agent'],
      },
      'REST API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É'
    );

    await scheduler.sendDailyMessagesToAll(adminChatId);

    // –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏
    // –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç
    res
      .status(200)
      .send(`–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${scheduler['users'].size}, –∞–¥–º–∏–Ω: ${adminChatId}`);
    logger.info({ usersCount: scheduler['users'].size }, 'REST API: –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ REST API');
    res.status(500).send(String(error));
  }
});

// 404
restServ.all('/', (req: Request, res: Response) => {
  res.status(404).send('Not found');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö (–¥–ª—è Fly.io)
restServ.listen(Number(SERVER_PORT), '0.0.0.0', () => {
  logger.info({ port: SERVER_PORT }, `üöÄ Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${SERVER_PORT}`);
});

// –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.command('ping', async ctx => {
  await ctx.reply('üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async ctx => {
  const chatId = ctx.chat.id;
  const userId = ctx.from?.id || 0;
  const username = ctx.from?.username || '';
  botLogger.info({ userId, chatId }, `üì± –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
  scheduler.addUser(chatId);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –ê–ª–µ–∫—Å (ID: 5153477378), –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –∏ –ø–æ–ª
  if (userId === 5153477378) {
    addUser(chatId, username, '–ê–ª–µ–∫—Å', 'male');
    updateUserName(chatId, '–ê–ª–µ–∫—Å');
    updateUserGender(chatId, 'male');
    botLogger.info({ userId, name: '–ê–ª–µ–∫—Å', gender: 'male' }, '‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –∏ –ø–æ–ª –¥–ª—è –ê–ª–µ–∫—Å–∞');
  } else {
    addUser(chatId, username);
  }

  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ª—è–≥—É—à–∫–∞ üê∏\n\n' +
      '–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:00.\n' +
      '–ï—Å–ª–∏ —Ç—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏—à—å –≤ —Ç–µ—á–µ–Ω–∏–µ 1.5 —á–∞—Å–æ–≤, —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ª–∏—á–∫—É.\n\n' +
      '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '/fro - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–π—á–∞—Å\n' +
      '/calendar - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é\n' +
      '/setname [–∏–º—è] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—ë –∏–º—è\n\n' +
      '–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '/status - —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞\n' +
      '/users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' +
      '/last_run - –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n' +
      '/logs - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤\n' +
      '/test_schedule - —Ç–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –º–∏–Ω—É—Ç—É\n' +
      '/test_now - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n' +
      '/test_reminder - —Ç–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n' +
      '/test_reply - —Ç–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π\n' +
      '/chat_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ\n' +
      '/minimalTestLLM - —Ç–µ—Å—Ç LLM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.command('setname', async ctx => {
  const chatId = ctx.chat.id;
  const userId = ctx.from?.id || 0;
  const text = ctx.message.text;
  const name = text.split(' ').slice(1).join(' ').trim();

  if (!name) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /setname –ò–≤–∞–Ω');
    return;
  }

  updateUserName(chatId, name);
  botLogger.info({ userId, chatId, name }, '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  await ctx.reply(`‚úÖ –¢–≤–æ—ë –∏–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${name}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test
bot.command('test', async ctx => {
  const chatId = ctx.chat.id;
  const fromId = ctx.from?.id;
  botLogger.info({ userId: fromId || 0, chatId }, `üì± –ö–æ–º–∞–Ω–¥–∞ /test –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${fromId}`);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –¥–ª–∏–Ω—É
  const message = await scheduler.generateScheduledMessage(fromId);
  await ctx.reply(
    `üìä <b>–¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –°–û–û–ë–©–ï–ù–ò–Ø</b>\n\n` +
      `üìè –î–ª–∏–Ω–∞: ${message.length} —Å–∏–º–≤–æ–ª–æ–≤\n` +
      `${
        message.length > 1024 ? `‚ùå –ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢ –Ω–∞ ${message.length - 1024} —Å–∏–º–≤–æ–ª–æ–≤!` : '‚úÖ –í –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞'
      }\n\n` +
      `<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n${message}`,
    { parse_mode: 'HTML' }
  );

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
  if (message.length <= 1024) {
    await scheduler.sendDailyMessage(fromId);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
bot.command('test_tracking', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  try {
    const { db } = await import('./db');

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã message_links
    const query = db.query(`
      SELECT * FROM message_links
      ORDER BY created_at DESC
      LIMIT 10
    `);

    const links = query.all() as any[];

    let message = `üîç <b>–¢–ï–°–¢ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø</b>\n\n`;
    message += `üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –≤ message_links:\n\n`;

    if (links.length === 0) {
      message += `<i>–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.</i>\n`;
    } else {
      links.forEach((link, i) => {
        const createdAt = new Date(link.created_at).toLocaleString('ru-RU', {
          timeZone: 'Europe/Moscow',
          day: '2-digit',
          month: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
        });

        message += `${i + 1}. <b>${link.message_type}</b>\n`;
        message += `   üìù ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${link.message_id}\n`;
        message += `   üìç ID –ø–æ—Å—Ç–∞: ${link.channel_message_id}\n`;
        message += `   üë§ User ID: ${link.user_id || '–±–æ—Ç'}\n`;
        if (link.reply_to_message_id) {
          message += `   ‚Ü©Ô∏è –û—Ç–≤–µ—Ç –Ω–∞: ${link.reply_to_message_id}\n`;
        }
        if (link.message_thread_id) {
          message += `   üßµ Thread ID: ${link.message_thread_id}\n`;
        }
        message += `   üïê –í—Ä–µ–º—è: ${createdAt}\n\n`;
      });
    }

    message += `\nüí° <i>–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</i>`;

    await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (error) {
    const err = error as Error;
    botLogger.error({ error: err.message, stack: err.stack }, '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test_tracking');
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.command('test_busy', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
    const now = new Date();
    const evening = new Date(now);
    evening.setHours(18, 0, 0, 0);
    const tomorrow = new Date(now);
    tomorrow.setDate(now.getDate() + 1);

    const calendarService = scheduler.getCalendarService();
    const events = await calendarService.getEvents(evening.toISOString(), tomorrow.toISOString());

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    const busyStatus = await (scheduler as any).detectUserBusy(events || []);

    let message = 'üîç <b>–¢–ï–°–¢ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ó–ê–ù–Ø–¢–û–°–¢–ò</b>\n\n';

    if (events && events.length > 0) {
      message += 'üìÖ <b>–°–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:</b>\n';
      events.forEach((event: any, i: number) => {
        message += `${i + 1}. ${event.summary || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;

        // –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        if (event.start) {
          const startDate = new Date(event.start.dateTime || event.start.date);
          const endDate = event.end ? new Date(event.end.dateTime || event.end.date) : null;

          if (event.start.date && !event.start.dateTime) {
            message += `   ‚Ä¢ –í–µ—Å—å –¥–µ–Ω—å\n`;
          } else {
            message += `   ‚Ä¢ –í—Ä–µ–º—è: ${startDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
            if (endDate) {
              message += ` - ${endDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
            }
            message += '\n';
          }
        }

        // –°—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        if (event.transparency) {
          message += `   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${event.transparency === 'transparent' ? '‚úÖ –°–≤–æ–±–æ–¥–µ–Ω' : 'üî¥ –ó–∞–Ω—è—Ç'}\n`;
        }

        // –ú–µ—Å—Ç–æ
        if (event.location) {
          message += `   ‚Ä¢ –ú–µ—Å—Ç–æ: ${event.location}\n`;
        }
      });
      message += '\n';
    } else {
      message += 'üìÖ <i>–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ</i>\n\n';
    }

    message += `ü§ñ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:</b>\n`;
    message += `‚Ä¢ –ó–∞–Ω—è—Ç: ${busyStatus.probably_busy ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}\n`;
    if (busyStatus.busy_reason) {
      message += `‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: ${busyStatus.busy_reason}\n`;
    }
    message += `\nüìÑ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–º–ø—Ç: <code>${
      busyStatus.probably_busy ? 'scheduled-message-flight.md' : 'scheduled-message.md'
    }</code>`;

    await ctx.reply(message, { parse_mode: 'HTML' });
  } catch (e) {
    const error = e as Error;
    botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test_busy');
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:\n<code>${error.message}</code>`, {
      parse_mode: 'HTML',
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /sendnow
bot.command('sendnow', async ctx => {
  const chatId = ctx.chat.id;
  const targetTime = new Date();
  targetTime.setHours(15, 38, 0, 0);

  scheduler.scheduleOneTimeMessage(chatId, targetTime);
  await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ 15:38!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /fro
bot.command('fro', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  try {
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    botLogger.info(
      {
        chatId,
        adminChatId,
        isTestBot: scheduler.isTestBot(),
        channelId: scheduler.CHANNEL_ID,
        targetUserId: scheduler.getTargetUserId(),
      },
      '–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /fro'
    );

    // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    botLogger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...');
    await ctx.reply('üê∏ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    botLogger.info('‚úÖ –ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å —Ñ–ª–∞–≥–æ–º —Ä—É—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
    botLogger.info('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º sendInteractiveDailyMessage...');
    await scheduler.sendInteractiveDailyMessage(chatId, true);
    botLogger.info('‚úÖ sendInteractiveDailyMessage –∑–∞–≤–µ—Ä—à–µ–Ω');

    // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞
    if (scheduler.isTestBot()) {
      botLogger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...');
      await ctx.reply('ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è');
      botLogger.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    }

    botLogger.info('üéâ –ö–æ–º–∞–Ω–¥–∞ /fro –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
  } catch (error) {
    const err = error as Error;
    botLogger.error(
      {
        error: err.message,
        stack: err.stack,
        chatId,
        isTestBot: scheduler.isTestBot(),
      },
      '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /fro'
    );
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /remind
bot.command('remind', async ctx => {
  const chatId = ctx.chat.id;
  const sentTime = new Date().toISOString();
  scheduler.setReminder(chatId, sentTime);
});

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
bot.command('test_buttons', async ctx => {
  const chatId = ctx.chat.id;
  const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
  if (chatId !== adminChatId) {
    await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
    return;
  }

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
    const CHANNEL_ID = scheduler.CHANNEL_ID;

    const testMessage = await bot.telegram.sendMessage(
      CHANNEL_ID,
      'üß™ <b>–¢–ï–°–¢–û–í–´–ô –ü–û–°–¢ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ö–ù–û–ü–û–ö</b>\n\n' +
        '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.\n\n' +
        '‚¨áÔ∏è –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –Ω–∏–∂–µ',
      { parse_mode: 'HTML' }
    );

    const messageId = testMessage.message_id;

    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await new Promise(resolve => setTimeout(resolve, 2000));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
    const CHAT_ID = scheduler.getChatId();

    if (!CHAT_ID) {
      await ctx.reply('‚ùå CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env');
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    const commentUrl = `https://t.me/c/${CHANNEL_ID.toString().slice(4)}/${messageId}?thread=${messageId}`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç', url: commentUrl }],
        [{ text: '‚úÖ –í—Å–µ –æ–∫ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'daily_skip_all' }],
      ],
    };

    const buttonMessage = await bot.telegram.sendMessage(
      CHAT_ID,
      'üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏:\n\n' +
        `Channel ID: ${CHANNEL_ID}\n` +
        `Message ID: ${messageId}\n` +
        `Comment URL: ${commentUrl}`,
      {
        reply_markup: keyboard,
      }
    );

    await ctx.reply(
      '‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n' +
        `üì¢ Channel ID: <code>${CHANNEL_ID}</code>\n` +
        `üí¨ Chat ID: <code>${CHAT_ID}</code>\n` +
        `üìù Message ID: <code>${messageId}</code>\n` +
        `üîó URL: <code>${commentUrl}</code>`,
      { parse_mode: 'HTML' }
    );
  } catch (error) {
    const err = error as Error;
    botLogger.error({ error: err.message, stack: err.stack }, '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test_buttons');
    await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /skip —É–¥–∞–ª–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /calendar
bot.command('calendar', async ctx => {
  const chatId = ctx.chat.id;
  // Save user if not exists
  addUser(chatId, ctx.from?.username || '');
  const lastToken = getLastUserToken(chatId);
  if (lastToken) {
    logger.debug({ chatId, hasToken: !!lastToken }, '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
    try {
      calendarService.setToken(JSON.parse(lastToken.token));
      // Get events for yesterday and today
      const now = new Date();
      const yesterday = new Date(now);
      yesterday.setDate(now.getDate() - 1);
      const start = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate());
      const end = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1);
      const events = await calendarService.getEvents(start.toISOString(), end.toISOString());
      if (events && events.length > 0) {
        const eventsList = formatCalendarEvents(events, {
          locale: 'ru-RU',
          showDate: true,
          showBusy: true,
          showLocation: true,
          showDescription: true,
          showLink: true,
        });
        await ctx.reply(`–°–æ–±—ã—Ç–∏—è –∑–∞ –≤—á–µ—Ä–∞ –∏ —Å–µ–≥–æ–¥–Ω—è:\n\n${eventsList}`, {
          parse_mode: 'HTML',
        });
      } else {
        await ctx.reply('–°–æ–±—ã—Ç–∏–π –∑–∞ –≤—á–µ—Ä–∞ –∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç.');
      }
      return;
    } catch (e) {
      const error = e as Error;
      botLogger.error({ error: error.message, stack: error.stack, chatId }, '–û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }
  // Pass chatId in state
  const authUrl = calendarService.getAuthUrl({ state: chatId.toString() });
  await ctx.reply(
    '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:\n' +
      authUrl +
      '\n\n' +
      '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞ —è –ø–æ–ª—É—á—É —Ç–æ–∫–µ–Ω.'
  );
});










// ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ü–†–ê–ö–¢–ò–ö ==========

// –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –Ω–∏–∂–µ

/*
bot.action(/practice_postpone_(\d+)/, async ctx => {
  const userId = parseInt(ctx.match![1]);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (ctx.from?.id !== userId) {
      await ctx.answerCbQuery('‚ùå –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å');
      return;
    }

    // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Å
    const chatId = ctx.chat?.id || 0;
    const reminderTime = Date.now() + 60 * 60 * 1000; // 1 —á–∞—Å

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–∫—Ç–∏–∫–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    const session = scheduler.getInteractiveSession(userId);
    if (session) {
      session.practicePostponed = true;
      session.postponedUntil = reminderTime;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    setTimeout(async () => {
      try {
        const reminderMessage = '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫—É! –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç üíö';

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        const messageThreadId = (ctx.callbackQuery.message as any)?.message_thread_id;
        const replyOptions: any = {
          parse_mode: 'HTML'
        };

        if (messageThreadId) {
          replyOptions.reply_to_message_id = messageThreadId;
        }

        await scheduler.getBot().telegram.sendMessage(chatId, reminderMessage, replyOptions);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        saveMessage(userId, reminderMessage, new Date().toISOString(), 0);

      } catch (error) {
        botLogger.error({ error, userId }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–µ');
      }
    }, 60 * 60 * 1000); // 1 —á–∞—Å

    await ctx.answerCbQuery('‚è∞ –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ —á–∞—Å');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    saveMessage(userId, `[–û—Ç–ª–æ–∂–∏–ª –ø—Ä–∞–∫—Ç–∏–∫—É –Ω–∞ —á–∞—Å]`, new Date().toISOString(), userId);

  } catch (error) {
    botLogger.error({ error, userId }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ practice_postpone');
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});
*/

// ========== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ==========

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
bot.on('message', async (ctx, next) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–∑ –∫–∞–Ω–∞–ª–∞
  if (
    ctx.message &&
    'forward_from_chat' in ctx.message &&
    ctx.message.forward_from_chat &&
    typeof ctx.message.forward_from_chat === 'object' &&
    'type' in ctx.message.forward_from_chat &&
    ctx.message.forward_from_chat.type === 'channel' &&
    'id' in ctx.message.forward_from_chat &&
    ctx.message.forward_from_chat.id === scheduler.CHANNEL_ID &&
    'forward_from_message_id' in ctx.message
  ) {
    const channelMessageId = ctx.message.forward_from_message_id as number;
    const discussionMessageId = ctx.message.message_id;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID
    scheduler.saveForwardedMessage(channelMessageId, discussionMessageId);

    const currentTime = new Date();
    botLogger.info(
      {
        channelMessageId,
        discussionMessageId,
        chatId: ctx.chat.id,
        isTopicMessage: ctx.message.is_topic_message,
        messageThreadId: (ctx.message as any).message_thread_id,
        fromChat: ctx.message.forward_from_chat,
        receivedAt: currentTime.toISOString(),
        timestamp: currentTime.getTime(),
      },
      'üìé –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞'
    );
  }

  // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É)
  if (ctx.message && 'message_thread_id' in ctx.message) {
    botLogger.debug(
      {
        messageThreadId: (ctx.message as any).message_thread_id,
        chatId: ctx.chat.id,
        messageId: ctx.message.message_id,
      },
      'üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–º–µ/—Ç—Ä–µ–¥–µ'
    );
  }

  // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
  return next();
});

// –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
// –ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ –±—É–¥—É—â–µ–º
const AUTO_RESPONSES_ENABLED = false; // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async ctx => {
  const message = ctx.message.text;
  const chatId = ctx.chat.id;
  const userId = ctx.from?.id || 0;

  // –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  botLogger.info(
    {
      message: message.substring(0, 100),
      chatId,
      userId,
      chatType: ctx.chat.type,
      messageThreadId: (ctx.message as any).message_thread_id,
      isBot: ctx.from?.is_bot,
      timestamp: new Date().toISOString(),
    },
    'üì® –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
  );

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
  if (message.startsWith('/')) {
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏ –∫–∞–Ω–∞–ª–∞
  const CHAT_ID = scheduler.getChatId();
  const CHANNEL_ID = scheduler.CHANNEL_ID;

  // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  botLogger.info(
    {
      chatId,
      CHAT_ID,
      CHANNEL_ID,
      chatType: ctx.chat.type,
      messageId: ctx.message.message_id,
      fromId: ctx.from?.id,
      fromIsBot: ctx.from?.is_bot,
      fromUsername: ctx.from?.username,
      message: message.substring(0, 50),
    },
    'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è'
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
  if (ctx.from?.is_bot) {
    botLogger.debug({ userId: ctx.from?.id, chatId, isBot: ctx.from?.is_bot }, '–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –ª–∏–±–æ –∏–∑ –∫–∞–Ω–∞–ª–∞, –ª–∏–±–æ –∏–∑ —á–∞—Ç–∞
  const isFromChannel = chatId === CHANNEL_ID;
  const isFromChat = CHAT_ID && chatId === CHAT_ID;

  // –í–ê–ñ–ù–û: –í Telegram, –∫–æ–≥–¥–∞ –≥—Ä—É–ø–ø–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–∞–Ω–∞–ª—É, —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã
  // –º–æ–≥—É—Ç –∏–º–µ—Ç—å –¥—Ä—É–≥–æ–π chat_id. –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø —á–∞—Ç–∞.
  const isFromLinkedChat = ctx.chat.type === 'supergroup' && !isFromChannel && !isFromChat;

  if (!isFromChannel && !isFromChat && !isFromLinkedChat) {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏ –Ω–µ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    botLogger.debug(
      { chatId, CHAT_ID, CHANNEL_ID, chatType: ctx.chat.type },
      '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º'
    );
    return;
  }

  // –ï—Å–ª–∏ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë ID –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
  const replyToChatId = isFromLinkedChat ? chatId : CHAT_ID || chatId;

  if (!CHAT_ID && !isFromLinkedChat) {
    botLogger.warn('‚ö†Ô∏è CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env! –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤ —á–∞—Ç');
    return;
  }

  botLogger.debug({ userId, chatId, messageLength: message.length }, `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ`);

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const TARGET_USER_ID = scheduler.getTargetUserId();

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (userId === TARGET_USER_ID) {
    const responseTime = new Date().toISOString();
    updateUserResponse(userId, responseTime);
    botLogger.info(
      {
        userId,
        responseTime,
        targetUserId: TARGET_USER_ID,
      },
      `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${TARGET_USER_ID}`
    );
  } else {
    botLogger.debug(
      {
        userId,
        targetUserId: TARGET_USER_ID,
      },
      `‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ - –Ω–µ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`
    );
  }

  // –û—á–∏—â–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  scheduler.clearReminder(userId);

  try {
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const userMessageTime = new Date().toISOString();
    saveMessage(userId, message, userMessageTime, userId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    const messageThreadId = (ctx.message as any).message_thread_id;
    const isInteractive = await scheduler.handleInteractiveUserResponse(
      userId,
      message,
      replyToChatId,
      ctx.message.message_id,
      messageThreadId
    );

    if (isInteractive) {
      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    const lastMessages = getLastNMessages(userId, 7);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞—Ç–∞–º–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ - –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    const conversationHistory = lastMessages
      .reverse() // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ –±—ã–ª–∏ –≤–≤–µ—Ä—Ö—É, –Ω–æ–≤—ã–µ –≤–Ω–∏–∑—É
      .map(msg => {
        const date = new Date(msg.sent_time).toLocaleString('ru-RU', {
          timeZone: 'Europe/Moscow',
          day: '2-digit',
          month: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
        });
        const author = msg.author_id === 0 ? '–ë–æ—Ç' : msg.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        return `[${date}] ${author}: ${msg.message_text}`;
      })
      .join('\n');

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const calendarEvents = await getUserTodayEvents(userId);

    botLogger.info(
      {
        userId,
        chatId,
        hasConversationHistory: !!conversationHistory,
        hasCalendarEvents: !!calendarEvents,
      },
      'ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
    );

    if (AUTO_RESPONSES_ENABLED) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM
      const textResponse = await generateUserResponse(message, conversationHistory, calendarEvents || undefined);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∞—Ç
      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã - –æ—Ç–≤–µ—á–∞–µ–º —Ç—É–¥–∞ –∂–µ
      // –ò–Ω–∞—á–µ - –≤ CHAT_ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
      await bot.telegram.sendMessage(replyToChatId, textResponse, {
        reply_parameters: {
          message_id: ctx.message.message_id,
          chat_id: chatId, // —É–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        },
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î (author_id = 0 –¥–ª—è –±–æ—Ç–∞)
      const botResponseTime = new Date().toISOString();
      saveMessage(userId, textResponse, botResponseTime, 0);

      botLogger.info(
        { userId, chatId, responseLength: textResponse.length },
        '‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
      );
    } else {
      botLogger.debug({ userId, chatId }, '‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    }
  } catch (error) {
    const err = error as Error;
    botLogger.error({ error: err.message, stack: err.stack, userId, chatId }, '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');

    // Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ - —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤
    if (AUTO_RESPONSES_ENABLED) {
      const fallbackMessage = '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è! ü§ç';
      await bot.telegram.sendMessage(replyToChatId, fallbackMessage, {
        reply_parameters: {
          message_id: ctx.message.message_id,
          chat_id: chatId,
        },
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º fallback –æ—Ç–≤–µ—Ç –≤ –ë–î
      const fallbackTime = new Date().toISOString();
      saveMessage(userId, fallbackMessage, fallbackTime, 0);
    }
  }
});

// ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–• –ö–ù–û–ü–û–ö ==========

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback_query (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
bot.on('callback_query', handleCallbackQuery);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—Å–µ –æ–∫ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" (–±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ)
bot.action('daily_skip_all', handleDailySkipAll);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è - –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
bot.action(/skip_neg_(\d+)/, ctx => handleSkipNeg(ctx, bot));

// –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
bot.action('daily_skip_negative', handleDailySkipNegative);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞–ª" –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ - –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
bot.action(/pract_done_(\d+)/, ctx => handlePractDone(ctx, scheduler));

// –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
bot.action(/practice_done_(\d+)/, handlePracticeDone);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å" - –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
bot.action(/pract_delay_(\d+)/, handlePractDelay);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å" - —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
bot.action(/practice_postpone_(\d+)/, ctx => handlePracticePostpone(ctx, scheduler));

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞

// –ù–ï –æ—á–∏—â–∞–µ–º pending updates - –ø—É—Å—Ç—å Telegraf –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
async function clearPendingUpdates() {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) return;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é o webhook
    const webhookResponse = await fetch(`https://api.telegram.org/bot${token}/getWebhookInfo`);
    const webhookData = await webhookResponse.json();

    if (webhookData.ok && webhookData.result.pending_update_count > 0) {
      logger.info(
        {
          pendingCount: webhookData.result.pending_update_count,
        },
        'üîÑ –ù–∞–π–¥–µ–Ω—ã pending updates, Telegraf –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç'
      );
    } else {
      logger.info('‚úÖ –û—á–µ—Ä–µ–¥—å updates –ø—É—Å—Ç–∞');
    }
  } catch (error) {
    logger.warn({ error: (error as Error).message }, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥—å updates');
  }
}

// --- Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook ---
const app = express();
app.use(express.json());

// Webhook endpoint –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
app.post('/webhook/deploy', async (req: Request, res: Response) => {
  try {
    logger.info('üöÄ –ü–æ–ª—É—á–µ–Ω webhook –æ –¥–µ–ø–ª–æ–µ, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...');

    // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    await scheduler.checkUncompletedTasks();

    res.json({ success: true, message: 'Deploy webhook processed' });
  } catch (error) {
    logger.error({ error: (error as Error).message }, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –¥–µ–ø–ª–æ—è');
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Health check endpoint
app.get('/health', (req: Request, res: Response) => {
  res.json({ status: 'ok', bot: 'running' });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  logger.info({ port: PORT }, `üåê Express —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// --- Telegraf polling ---
clearPendingUpdates()
  .then(() => bot.launch())
  .then(() => {
    logger.info({ pid: process.pid, ppid: process.ppid }, 'üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling');

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
    logger.info('‚úÖ Polling –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –∫–æ–º–∞–Ω–¥');

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.info(
      {
        handlers: [
          'test_button_click',
          'logs_*',
          'skip_neg_*',
          'skip_schema_*',
          'pract_done_*',
          'pract_delay_*',
          'callback_query (–æ–±—â–∏–π)',
          'daily_skip_all',
          'daily_skip_negative',
          'practice_done_*',
          'practice_postpone_*',
        ],
      },
      'üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫'
    );

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    // –î–∞–µ–º –≤—Ä–µ–º—è –±–æ—Ç—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    setTimeout(async () => {
      logger.info('üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞...');
      try {
        await scheduler.checkUncompletedTasks();
        logger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      } catch (error) {
        logger.error({ error: (error as Error).message }, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞');
      }
    }, 5000);
  })
  .catch(error => {
    logger.error({ error: error.message, stack: error.stack }, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞');
    process.exit(1);
  });

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—É—Å–∫–µ
const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
if (adminChatId) {
  const processInfo = `PID: ${process.pid}${process.env.pm_id ? ` | PM2 ID: ${process.env.pm_id}` : ''}`;
  bot.telegram
    .sendMessage(
      adminChatId,
      `üöÄ <b>–ë–û–¢ –ó–ê–ü–£–©–ï–ù</b>\n\n` + `–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling\n` + `üîß ${processInfo}`,
      { parse_mode: 'HTML' }
    )
    .catch(error => {
      logger.error({ error: error.message, adminChatId }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—É—Å–∫–µ');
    });
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è —Å—Ö–µ–º—ã —Ä–∞–∑–±–æ—Ä–∞ —Å–∏—Ç—É–∞—Ü–∏–∏
bot.action(/skip_schema_(\d+)/, ctx => handleSkipSchema(ctx, scheduler));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
  logger.info('üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGINT)');
  scheduler.destroy();
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  logger.info('üõë Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGTERM)');
  scheduler.destroy();
  bot.stop('SIGTERM');
});
