import { Database } from 'bun:sqlite';
import fs from 'fs';
import { databaseLogger } from './logger';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const isProduction = process.env.NODE_ENV === 'production';
const dbPath = isProduction ? '/var/www/databases/psy_froggy_bot/froggy.db' : './froggy.db';

try {
  databaseLogger.info({ dbPath }, 'üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î');
  if (isProduction) {
    const files = fs.readdirSync('/var/www/databases/psy_froggy_bot');
    databaseLogger.debug({ files }, '–§–∞–π–ª—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –ë–î');
  }
} catch (e) {
  const error = e as Error;
  databaseLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î');
}

// –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
export const db = new Database(dbPath, { create: true });

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
db.query(
  `
  CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    chat_id INTEGER UNIQUE,
    username TEXT,
    last_response_time TEXT,
    response_count INTEGER DEFAULT 0
  )
`
).run();

db.query(
  `
  CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    author_id INTEGER,
    message_text TEXT,
    sent_time TEXT,
    response_time TEXT,
    FOREIGN KEY (user_id) REFERENCES users(id)
  )
`
).run();

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –¢–∞–±–ª–∏—Ü–∞ user_tokens: id, chat_id, token, created_at

db.query(
  `
  CREATE TABLE IF NOT EXISTS user_tokens (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id INTEGER,
    token TEXT,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP
  )
`
).run();

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –¢–∞–±–ª–∏—Ü–∞ user_image_indexes: id, chat_id, image_index, updated_at

db.query(
  `
  CREATE TABLE IF NOT EXISTS user_image_indexes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id INTEGER UNIQUE,
    image_index INTEGER,
    updated_at TEXT DEFAULT CURRENT_TIMESTAMP
  )
`
).run();

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
// –¢–∞–±–ª–∏—Ü–∞ logs: id, level, message, data, timestamp, is_read, created_at

db.query(
  `
  CREATE TABLE IF NOT EXISTS logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    level TEXT NOT NULL,
    message TEXT NOT NULL,
    data TEXT,
    timestamp TEXT NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP
  )
`
).run();

// –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ª–æ–≥–æ–≤
db.query(`CREATE INDEX IF NOT EXISTS idx_logs_timestamp ON logs(timestamp)`).run();
db.query(`CREATE INDEX IF NOT EXISTS idx_logs_level ON logs(level)`).run();
db.query(`CREATE INDEX IF NOT EXISTS idx_logs_is_read ON logs(is_read)`).run();

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
export const addUser = (chatId: number, username: string) => {
  const insertUser = db.query('INSERT OR IGNORE INTO users (chat_id, username) VALUES (?, ?)');
  insertUser.run(chatId, username);
};

export const updateUserResponse = (chatId: number, responseTime: string) => {
  const updateUser = db.query(`
    UPDATE users
    SET last_response_time = ?, response_count = response_count + 1
    WHERE chat_id = ?
  `);
  updateUser.run(responseTime, chatId);
};

export const getUserResponseStats = (chatId: number) => {
  const getStats = db.query(`
    SELECT response_count, last_response_time
    FROM users
    WHERE chat_id = ?
  `);
  return getStats.get(chatId) as { response_count: number; last_response_time: string } | undefined;
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
export const saveMessage = (chatId: number, messageText: string, sentTime: string, authorId: number = 0) => {
  const insertMessage = db.query(`
    INSERT INTO messages (user_id, author_id, message_text, sent_time)
    SELECT id, ?, ?, ? FROM users WHERE chat_id = ?
  `);
  insertMessage.run(authorId, messageText, sentTime, chatId);
};

export const updateMessageResponse = (chatId: number, sentTime: string, responseTime: string) => {
  const updateMessage = db.query(`
    UPDATE messages
    SET response_time = ?
    WHERE user_id = (SELECT id FROM users WHERE chat_id = ?)
    AND sent_time = ?
  `);
  updateMessage.run(responseTime, chatId, sentTime);
};

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export const getLastBotMessage = (chatId: number) => {
  const getMessage = db.query(`
    SELECT m.message_text, m.sent_time
    FROM messages m
    JOIN users u ON m.user_id = u.id
    WHERE u.chat_id = ? AND m.author_id = 0
    ORDER BY m.sent_time DESC
    LIMIT 1
  `);
  return getMessage.get(chatId) as { message_text: string; sent_time: string } | undefined;
};

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getLastUserMessage = (chatId: number) => {
  const getMessage = db.query(`
    SELECT m.message_text, m.sent_time
    FROM messages m
    JOIN users u ON m.user_id = u.id
    WHERE u.chat_id = ? AND m.author_id = u.id
    ORDER BY m.sent_time DESC
    LIMIT 1
  `);
  return getMessage.get(chatId) as { message_text: string; sent_time: string } | undefined;
};

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export const getLastNBotMessages = (chatId: number, n: number) => {
  const getMessages = db.query(`
    SELECT m.message_text, m.sent_time
    FROM messages m
    JOIN users u ON m.user_id = u.id
    WHERE u.chat_id = ? AND m.author_id = 0
    ORDER BY m.sent_time DESC
    LIMIT ?
  `);
  return getMessages.all(chatId, n) as {
    message_text: string;
    sent_time: string;
  }[];
};

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getLastNUserMessages = (chatId: number, n: number) => {
  const getMessages = db.query(`
    SELECT m.message_text, m.sent_time
    FROM messages m
    JOIN users u ON m.user_id = u.id
    WHERE u.chat_id = ? AND m.author_id = u.id
    ORDER BY m.sent_time DESC
    LIMIT ?
  `);
  return getMessages.all(chatId, n) as {
    message_text: string;
    sent_time: string;
  }[];
};

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Ç –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
export const getLastNMessages = (chatId: number, n: number) => {
  const getMessages = db.query(`
    SELECT m.message_text, m.sent_time, m.author_id, u.id as user_id, u.username
    FROM messages m
    JOIN users u ON m.user_id = u.id
    WHERE u.chat_id = ?
    ORDER BY m.sent_time DESC
    LIMIT ?
  `);
  return getMessages.all(chatId, n) as {
    message_text: string;
    sent_time: string;
    author_id: number;
    user_id: number;
    username: string;
  }[];
};

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const saveUserToken = (chatId: number, token: string) => {
  const upsertToken = db.query(`
    INSERT INTO user_tokens (chat_id, token, created_at)
    VALUES (?, ?, CURRENT_TIMESTAMP)
    ON CONFLICT(chat_id) DO UPDATE SET token = excluded.token, created_at = CURRENT_TIMESTAMP
  `);
  upsertToken.run(chatId, token);
};

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getLastUserToken = (chatId: number) => {
  const getToken = db.query(`
    SELECT token, created_at
    FROM user_tokens
    WHERE chat_id = ?
    ORDER BY created_at DESC, id DESC
    LIMIT 1
  `);
  return getToken.get(chatId) as { token: string; created_at: string } | undefined;
};

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å (–æ–±–Ω–æ–≤–∏—Ç—å) –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const saveUserImageIndex = (chatId: number, imageIndex: number) => {
  try {
    const upsert = db.query(`
      INSERT INTO user_image_indexes (chat_id, image_index, updated_at)
      VALUES (?, ?, CURRENT_TIMESTAMP)
      ON CONFLICT(chat_id) DO UPDATE SET image_index = excluded.image_index, updated_at = excluded.updated_at
    `);
    upsert.run(chatId, imageIndex);
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –¥–µ–±–∞–≥–∞
    // const all = db.query('SELECT * FROM user_image_indexes').all();
    // –£–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  } catch (e) {
    const error = e as Error;
    databaseLogger.error({ error: error.message, stack: error.stack, chatId }, '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏');
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserImageIndex = (chatId: number) => {
  const getIndex = db.query(`
    SELECT image_index, updated_at
    FROM user_image_indexes
    WHERE chat_id = ?
    ORDER BY updated_at DESC, id DESC
    LIMIT 1
  `);
  return getIndex.get(chatId) as { image_index: number; updated_at: string } | undefined;
};

// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Calendar)
export const clearUserTokens = (chatId: number) => {
  const del = db.query(`
    DELETE FROM user_tokens WHERE chat_id = ?
  `);
  del.run(chatId);
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export const getAllUsers = () => {
  const getUsers = db.query(`
    SELECT chat_id, username, last_response_time, response_count
    FROM users
    ORDER BY chat_id
  `);
  return getUsers.all() as {
    chat_id: number;
    username: string;
    last_response_time: string;
    response_count: number;
  }[];
};

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –õ–û–ì–ê–ú–ò ==========

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
export const saveLogToDatabase = (
  level: string,
  message: string,
  data: string | null = null,
  timestamp: string = new Date().toISOString()
) => {
  try {
    const insertLog = db.query(`
      INSERT INTO logs (level, message, data, timestamp, is_read, created_at)
      VALUES (?, ?, ?, ?, FALSE, CURRENT_TIMESTAMP)
    `);
    insertLog.run(level, message, data, timestamp);
  } catch (error) {
    // –ù–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å loggers –∑–¥–µ—Å—å - —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–∞ –≤ –ë–î:', error);
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ª–æ–≥–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
export const getRecentLogs = (limit: number = 7, offset: number = 0) => {
  const getLogs = db.query(`
    SELECT id, level, message, data, timestamp, is_read, created_at
    FROM logs
    ORDER BY timestamp DESC, id DESC
    LIMIT ? OFFSET ?
  `);
  return getLogs.all(limit, offset) as {
    id: number;
    level: string;
    message: string;
    data: string | null;
    timestamp: string;
    is_read: boolean;
    created_at: string;
  }[];
};

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
export const getRecentUnreadLogs = (limit: number = 7, offset: number = 0) => {
  const getLogs = db.query(`
    SELECT id, level, message, data, timestamp, is_read, created_at
    FROM logs
    WHERE is_read = FALSE
    ORDER BY timestamp DESC, id DESC
    LIMIT ? OFFSET ?
  `);
  return getLogs.all(limit, offset) as {
    id: number;
    level: string;
    message: string;
    data: string | null;
    timestamp: string;
    is_read: boolean;
    created_at: string;
  }[];
};

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤ —É—Ä–æ–≤–Ω—è INFO –∏ –≤—ã—à–µ (info, warn, error, fatal)
export const getRecentUnreadInfoLogs = (limit: number = 7, offset: number = 0) => {
  const getLogs = db.query(`
    SELECT id, level, message, data, timestamp, is_read, created_at
    FROM logs
    WHERE is_read = FALSE AND level IN ('info', 'warn', 'error', 'fatal')
    ORDER BY timestamp DESC, id DESC
    LIMIT ? OFFSET ?
  `);
  return getLogs.all(limit, offset) as {
    id: number;
    level: string;
    message: string;
    data: string | null;
    timestamp: string;
    is_read: boolean;
    created_at: string;
  }[];
};

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –ª–æ–≥–æ–≤
export const getLogsCount = () => {
  const getCount = db.query(`SELECT COUNT(*) as count FROM logs`);
  const result = getCount.get() as { count: number };
  return result.count;
};

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤
export const getUnreadLogsCount = () => {
  const getCount = db.query(`SELECT COUNT(*) as count FROM logs WHERE is_read = FALSE`);
  const result = getCount.get() as { count: number };
  return result.count;
};

// –ü–æ–º–µ—Ç–∏—Ç—å –ª–æ–≥ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
export const markLogAsRead = (logId: number) => {
  const updateLog = db.query(`
    UPDATE logs
    SET is_read = TRUE
    WHERE id = ?
  `);
  updateLog.run(logId);
};

// –ü–æ–º–µ—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ–≥–æ–≤ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ –∏—Ö ID
export const markLogsAsRead = (logIds: number[]) => {
  if (logIds.length === 0) return;

  const placeholders = logIds.map(() => '?').join(',');
  const updateLogs = db.query(`
    UPDATE logs
    SET is_read = TRUE
    WHERE id IN (${placeholders})
  `);
  updateLogs.run(...logIds);
};

// –ü–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
export const markAllLogsAsRead = () => {
  const updateLogs = db.query(`
    UPDATE logs
    SET is_read = TRUE
    WHERE is_read = FALSE
  `);
  updateLogs.run();
};

// –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –ø–æ —É—Ä–æ–≤–Ω—é
export const getLogsByLevel = (level: string, limit: number = 50) => {
  const getLogs = db.query(`
    SELECT id, level, message, data, timestamp, is_read, created_at
    FROM logs
    WHERE level = ?
    ORDER BY timestamp DESC, id DESC
    LIMIT ?
  `);
  return getLogs.all(level, limit) as {
    id: number;
    level: string;
    message: string;
    data: string | null;
    timestamp: string;
    is_read: boolean;
    created_at: string;
  }[];
};

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —É—Ä–æ–≤–Ω—é
export const getRecentLogsByLevel = (level: string | null, limit: number = 7, offset: number = 0) => {
  const query = level
    ? `SELECT id, level, message, data, timestamp, is_read, created_at
       FROM logs
       WHERE level = ?
       ORDER BY timestamp DESC, id DESC
       LIMIT ? OFFSET ?`
    : `SELECT id, level, message, data, timestamp, is_read, created_at
       FROM logs
       ORDER BY timestamp DESC, id DESC
       LIMIT ? OFFSET ?`;

  const getLogs = db.query(query);

  return level ? getLogs.all(level, limit, offset) : getLogs.all(limit, offset);
};

// –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ (—Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π)
export const cleanOldLogs = (daysToKeep: number = 30) => {
  const cutoffDate = new Date();
  cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

  const deleteLogs = db.query(`
    DELETE FROM logs
    WHERE timestamp < ?
  `);
  const result = deleteLogs.run(cutoffDate.toISOString());
  return result.changes;
};

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤
export const getLogsStatistics = () => {
  const getStats = db.query(`
    SELECT
      level,
      COUNT(*) as count,
      SUM(CASE WHEN is_read = FALSE THEN 1 ELSE 0 END) as unread_count
    FROM logs
    GROUP BY level
    ORDER BY count DESC
  `);
  return getStats.all() as {
    level: string;
    count: number;
    unread_count: number;
  }[];
};
