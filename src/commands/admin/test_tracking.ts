import { Telegraf } from 'telegraf';
import { botLogger } from '../../logger';

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
export function registerTestTrackingCommand(bot: Telegraf) {
  bot.command('test_tracking', async ctx => {
    const chatId = ctx.chat.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
    if (chatId !== adminChatId) {
      await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
      return;
    }

    try {
      const { db } = await import('../../db');

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã message_links
      const query = db.query(`
        SELECT * FROM message_links
        ORDER BY created_at DESC
        LIMIT 10
      `);

      const links = query.all() as any[];

      let message = `üîç <b>–¢–ï–°–¢ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø</b>\n\n`;
      message += `üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –≤ message_links:\n\n`;

      if (links.length === 0) {
        message += `<i>–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.</i>\n`;
      } else {
        links.forEach((link, i) => {
          const createdAt = new Date(link.created_at).toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
            day: '2-digit',
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
          });

          message += `${i + 1}. <b>${link.message_type}</b>\n`;
          message += `   üìù ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${link.message_id}\n`;
          message += `   üìç ID –ø–æ—Å—Ç–∞: ${link.channel_message_id}\n`;
          message += `   üë§ User ID: ${link.user_id || '–±–æ—Ç'}\n`;
          if (link.reply_to_message_id) {
            message += `   ‚Ü©Ô∏è –û—Ç–≤–µ—Ç –Ω–∞: ${link.reply_to_message_id}\n`;
          }
          if (link.message_thread_id) {
            message += `   üßµ Thread ID: ${link.message_thread_id}\n`;
          }
          message += `   üïê –í—Ä–µ–º—è: ${createdAt}\n\n`;
        });
      }

      message += `\nüí° <i>–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</i>`;

      await ctx.reply(message, { parse_mode: 'HTML' });
    } catch (error) {
      const err = error as Error;
      botLogger.error({ error: err.message, stack: err.stack }, '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test_tracking');
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
    }
  });
}