import { Telegraf } from 'telegraf';
import { Scheduler } from '../../scheduler';
import { botLogger } from '../../logger';

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º
export function registerCheckAccessCommand(bot: Telegraf, scheduler: Scheduler) {
  bot.command('check_access', async ctx => {
    const chatId = ctx.chat.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
    if (chatId !== adminChatId) {
      await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
      return;
    }

    const channelId = scheduler.CHANNEL_ID;
    const groupId = scheduler.getChatId();

    let message = `üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–æ—Ç–∞</b>\n\n`;
    message += `ü§ñ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: ${scheduler.isTestBot() ? '–î–ê' : '–ù–ï–¢'}\n`;
    message += `üì¢ ID –∫–∞–Ω–∞–ª–∞: <code>${channelId}</code>\n`;
    message += `üí¨ ID –≥—Ä—É–ø–ø—ã: <code>${groupId}</code>\n\n`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
    try {
      const channelInfo = await bot.telegram.getChat(channelId);
      message += `‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É: –ï–°–¢–¨\n`;
      message += `   –ù–∞–∑–≤–∞–Ω–∏–µ: ${('title' in channelInfo ? channelInfo.title : undefined) || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;
      message += `   –¢–∏–ø: ${channelInfo.type}\n`;
    } catch (error) {
      const err = error as Error;
      message += `‚ùå –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É: –ù–ï–¢\n`;
      message += `   –û—à–∏–±–∫–∞: ${err.message}\n`;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ
    if (groupId) {
      try {
        const groupInfo = await bot.telegram.getChat(groupId);
        message += `\n‚úÖ –î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ: –ï–°–¢–¨\n`;
        message += `   –ù–∞–∑–≤–∞–Ω–∏–µ: ${('title' in groupInfo ? groupInfo.title : undefined) || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;
        message += `   –¢–∏–ø: ${groupInfo.type}\n`;
      } catch (error) {
        const err = error as Error;
        message += `\n‚ùå –î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ: –ù–ï–¢\n`;
        message += `   –û—à–∏–±–∫–∞: ${err.message}\n`;
      }
    } else {
      message += `\n‚ö†Ô∏è ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n`;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ
    try {
      const botInfo = await bot.telegram.getMe();
      const member = await bot.telegram.getChatMember(channelId, botInfo.id);
      message += `\nüìã –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ: ${member.status}\n`;
      if (member.status === 'administrator') {
        message += `   ‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n`;
      }
    } catch (error) {
      const err = error as Error;
      message += `\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞: ${err.message}\n`;
    }

    await ctx.reply(message, { parse_mode: 'HTML' });
  });
}