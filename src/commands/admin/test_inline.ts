import { Telegraf } from 'telegraf';
import { logger } from '../../logger';

export function registerTestInlineCommand(bot: Telegraf): void {
  bot.command('test_inline', async (ctx) => {
    const chatId = ctx.chat.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
    if (chatId !== adminChatId) {
      await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
      return;
    }

    try {
      const botUsername = ctx.botInfo?.username || 'bot';
      
      await ctx.reply(
        `üîç –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è inline query:\n\n` +
        `1. –í –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∞—á–Ω–∏—Ç–µ –Ω–∞–±–∏—Ä–∞—Ç—å: @${botUsername}\n` +
        `2. –ü–æ—è–≤–∏—Ç—Å—è —Å–µ—Ç–∫–∞ 3x5 —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è\n` +
        `3. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ @${botUsername} –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏\n\n` +
        `–ù–∞–ø—Ä–∏–º–µ—Ä:\n` +
        `‚Ä¢ @${botUsername} - –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã\n` +
        `‚Ä¢ @${botUsername} –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ - –Ω–∞–π–¥—ë—Ç "–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏–∑–∞—Ü–∏—è"\n` +
        `‚Ä¢ @${botUsername} –º—ã—à–ª–µ–Ω–∏–µ - –Ω–∞–π–¥—ë—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã\n\n` +
        `üí° –°–æ–≤–µ—Ç: Inline –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ª—é–±–æ–º —á–∞—Ç–µ!`,
        {
          reply_markup: {
            inline_keyboard: [[
              { 
                text: 'üöÄ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å', 
                switch_inline_query: '' 
              }
            ]]
          }
        }
      );

      logger.info({ 
        adminId: ctx.from.id,
        botUsername 
      }, '–ö–æ–º–∞–Ω–¥–∞ test_inline –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      
    } catch (error) {
      logger.error({ error }, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã test_inline');
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
    }
  });
}