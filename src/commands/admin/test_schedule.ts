import { Telegraf } from 'telegraf';
import { Scheduler } from '../../scheduler';
import { logger, botLogger } from '../../logger';

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
export function registerTestScheduleCommand(bot: Telegraf, scheduler: Scheduler) {
  bot.command('test_schedule', async ctx => {
    const chatId = ctx.chat.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
    if (chatId !== adminChatId) {
      await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π cron job –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –º–∏–Ω—É—Ç—É
    const now = new Date();
    const nextMinute = (now.getMinutes() + 1) % 60;
    const nextHour = nextMinute === 0 ? now.getHours() + 1 : now.getHours();
    const cronExpression = `${nextMinute} ${nextHour} * * *`;

    await ctx.reply(
      `üß™ <b>–¢–ï–°–¢ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê</b>\n\n` +
        `‚è±Ô∏è Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: <code>${cronExpression}</code>\n` +
        `üïê –ó–∞–ø—É—Å–∫ –≤: <code>${String(nextHour).padStart(2, '0')}:${String(nextMinute).padStart(2, '0')}</code>\n` +
        `üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: <code>Europe/Moscow</code>\n\n` +
        `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...`,
      { parse_mode: 'HTML' }
    );

    const testJob = require('node-cron').schedule(
      cronExpression,
      async () => {
        try {
          logger.info('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ cron job');
          await scheduler.sendDailyMessage(chatId);
          await ctx.reply('‚úÖ üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
          testJob.stop();
          testJob.destroy();
        } catch (e) {
          const error = e as Error;
          botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ cron job');
          await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n<code>${error}</code>`, { parse_mode: 'HTML' });
          testJob.stop();
          testJob.destroy();
        }
      },
      {
        scheduled: true,
        timezone: 'Europe/Moscow',
      }
    );
  });
}