import { Telegraf } from 'telegraf';
import { Scheduler } from '../../scheduler';
import { botLogger } from '../../logger';
import fs from 'fs';
import path from 'path';
import {
  getLogsCount,
  getLogsStatistics,
  getRecentLogs,
  getRecentLogsByLevel,
  getRecentUnreadInfoLogs,
  getRecentUnreadLogs,
  getUnreadLogsCount,
  markAllLogsAsRead,
  markLogAsRead,
  markLogsAsRead,
} from '../../db';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∞–º–∏
function createTempLogFile(logs: any[], filename: string): string {
  try {
    const tempDir = path.join(process.cwd(), 'temp');

    botLogger.debug({ tempDir, filename, logsCount: logs.length }, '–°–æ–∑–¥–∞—é –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ª–æ–≥–æ–≤');

    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
      botLogger.debug({ tempDir }, '–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è temp');
    }

    const filePath = path.join(tempDir, filename);
    let content = '=== –°–ò–°–¢–ï–ú–ù–´–ï –õ–û–ì–ò ===\n\n';

    logs.forEach((log, index) => {
      const timestamp = new Date(log.timestamp).toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
      });

      content += `[${timestamp}] ${log.level.toUpperCase()} #${log.id}\n`;
      content += `–°–æ–æ–±—â–µ–Ω–∏–µ: ${log.message}\n`;

      if (log.data) {
        try {
          const data = JSON.parse(log.data);
          content += `–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(data, null, 2)}\n`;
        } catch {
          content += `–î–∞–Ω–Ω—ã–µ: ${log.data}\n`;
        }
      }

      content += `–ü—Ä–æ—á–∏—Ç–∞–Ω–æ: ${log.is_read ? '–î–∞' : '–ù–µ—Ç'}\n`;
      content += '---\n\n';
    });

    fs.writeFileSync(filePath, content, 'utf8');
    botLogger.debug({ filePath, contentLength: content.length }, '–§–∞–π–ª –ª–æ–≥–æ–≤ —Å–æ–∑–¥–∞–Ω');
    return filePath;
  } catch (error) {
    const err = error as Error;
    botLogger.error({ error: err.message, stack: err.stack, filename }, '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤');
    throw err;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function cleanupTempFile(filePath: string) {
  try {
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
    }
  } catch (error) {
    const err = error as Error;
    botLogger.warn({ error: err.message }, '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤
function formatLogEntry(log: any, index: number): string {
  const levelEmojis: Record<string, string> = {
    trace: 'üîç',
    debug: 'üêõ',
    info: 'üìù',
    warn: '‚ö†Ô∏è',
    error: '‚ùå',
    fatal: 'üíÄ',
  };

  const emoji = levelEmojis[log.level] || 'üìÑ';
  const timestamp = new Date(log.timestamp).toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
    year: '2-digit',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
  });

  const readStatus = log.is_read ? '‚úÖ' : 'üÜï';

  let message = log.message;
  if (message.length > 100) {
    message = message.substring(0, 97) + '...';
  }

  let result = `${readStatus} ${emoji} <b>#${log.id}</b> [${timestamp}]\n<code>${message}</code>`;

  if (log.data) {
    try {
      const data = JSON.parse(log.data);
      const dataStr = JSON.stringify(data, null, 2);
      if (dataStr.length <= 200) {
        result += `\n<pre>${dataStr}</pre>`;
      } else {
        result += `\n<i>üìé –î–∞–Ω–Ω—ã–µ: ${dataStr.length} —Å–∏–º–≤–æ–ª–æ–≤</i>`;
      }
    } catch {
      result += `\n<i>üìé –î–∞–Ω–Ω—ã–µ: ${log.data.length} —Å–∏–º–≤–æ–ª–æ–≤</i>`;
    }
  }

  return result;
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
export function registerLogsCommand(bot: Telegraf, scheduler: Scheduler) {
  bot.command('logs', async ctx => {
    const chatId = ctx.chat.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    if (chatId !== adminChatId) {
      await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
      return;
    }

    try {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ —É—Ä–æ–≤–Ω—è INFO –∏ –≤—ã—à–µ
      const logs = getRecentUnreadInfoLogs(7, 0);
      const totalCount = getLogsCount();
      const unreadCount = getUnreadLogsCount();

      if (logs.length === 0) {
        await ctx.reply(
          'üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\nüì≠ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ INFO+ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîç –§–∏–ª—å—Ç—Ä" –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–æ–≤',
          {
            parse_mode: 'HTML',
          }
        );
        return;
      }

      let message = `üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\n`;
      message += `üìä –í—Å–µ–≥–æ: ${totalCount} | üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\n`;
      message += `üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: ${logs.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö | üîç –§–∏–ª—å—Ç—Ä: INFO –∏ –≤—ã—à–µ\n\n`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è
      let testMessage = message;
      logs.forEach((log, index) => {
        testMessage += formatLogEntry(log, index) + '\n\n';
      });

      const keyboard = {
        inline_keyboard: [
          [
            { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', callback_data: 'logs_prev_0_info+' },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'logs_stats' },
            { text: '–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', callback_data: 'logs_next_7_info+' },
          ],
          [
            { text: 'üîç –§–∏–ª—å—Ç—Ä', callback_data: 'logs_filter_menu' },
            { text: '‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: 'logs_mark_visible_read' },
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'logs_refresh_0_info+' },
          ],
          [{ text: 'üìÅ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ —Ñ–∞–π–ª', callback_data: 'logs_download_0_info+' }],
        ],
      };

      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (> 3500 —Å–∏–º–≤–æ–ª–æ–≤), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
      if (testMessage.length > 3500) {
        const timestamp = new Date().toISOString().slice(0, 16).replace('T', '_').replace(/:/g, '-');
        const filename = `logs_${timestamp}.txt`;
        const filePath = createTempLogFile(logs, filename);

        try {
          await ctx.replyWithDocument(
            { source: filePath, filename },
            {
              caption: `üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\nüìä –í—Å–µ–≥–æ: ${totalCount} | üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\nüìÑ –í —Ñ–∞–π–ª–µ: ${logs.length} –∑–∞–ø–∏—Å–µ–π | üîç –§–∏–ª—å—Ç—Ä: –í—Å–µ`,
              parse_mode: 'HTML',
              reply_markup: keyboard,
            }
          );
        } finally {
          cleanupTempFile(filePath);
        }
      } else {
        logs.forEach((log, index) => {
          message += formatLogEntry(log, index) + '\n\n';
        });

        await ctx.reply(message, {
          parse_mode: 'HTML',
          reply_markup: keyboard,
        });
      }
    } catch (e) {
      const error = e as Error;
      botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /logs');
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤:\n<code>${error}</code>`, {
        parse_mode: 'HTML',
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
  bot.action(/logs_(.+)_(\d+)_(.+)/, async ctx => {
    const chatId = ctx.chat?.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    if (chatId !== adminChatId) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    const action = ctx.match![1];
    const offset = parseInt(ctx.match![2]);
    const levelFilter = ctx.match![3] === 'all' ? null : ctx.match![3];

    try {
      let newOffset = offset;

      switch (action) {
        case 'prev':
          newOffset = Math.max(0, offset - 7);
          break;
        case 'next':
          newOffset = offset + 7;
          break;
        case 'refresh':
          newOffset = offset;
          break;
        default:
          await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
          return;
      }

      let logs;
      if (levelFilter === 'unread') {
        logs = getRecentUnreadLogs(7, newOffset);
      } else if (levelFilter === 'info+') {
        logs = getRecentUnreadInfoLogs(7, newOffset);
      } else if (levelFilter && levelFilter !== 'all') {
        logs = getRecentLogsByLevel(levelFilter, 7, newOffset);
      } else {
        logs = getRecentLogs(7, newOffset);
      }
      const totalCount = getLogsCount();
      const unreadCount = getUnreadLogsCount();
      const filterSuffix = levelFilter || 'all';
      let filterName: string;
      if (!levelFilter || levelFilter === 'all') {
        filterName = '–í—Å–µ';
      } else if (levelFilter === 'unread') {
        filterName = '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ';
      } else if (levelFilter === 'info+') {
        filterName = 'INFO –∏ –≤—ã—à–µ';
      } else {
        filterName = levelFilter.toUpperCase();
      }

      if (logs.length === 0) {
        await ctx.answerCbQuery('üì≠ –õ–æ–≥–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç');
        return;
      }

      let message = `üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\n`;
      message += `üìä –í—Å–µ–≥–æ: ${totalCount} | üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\n`;
      message += `üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: ${logs.length} (–ø–æ–∑–∏—Ü–∏—è ${newOffset + 1}-${
        newOffset + logs.length
      }) | üîç –§–∏–ª—å—Ç—Ä: ${filterName}\n\n`;

      logs.forEach((log, index) => {
        message += formatLogEntry(log, index) + '\n\n';
      });

      const keyboard = {
        inline_keyboard: [
          [
            { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', callback_data: `logs_prev_${newOffset}_${filterSuffix}` },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'logs_stats' },
            { text: '–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', callback_data: `logs_next_${newOffset}_${filterSuffix}` },
          ],
          [
            { text: 'üîç –§–∏–ª—å—Ç—Ä', callback_data: 'logs_filter_menu' },
            { text: '‚úÖ –í—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: 'logs_mark_all_read' },
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: `logs_refresh_${newOffset}_${filterSuffix}` },
          ],
          [{ text: 'üìÅ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ —Ñ–∞–π–ª', callback_data: `logs_download_${newOffset}_${filterSuffix}` }],
        ],
      };

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: keyboard,
      });

      await ctx.answerCbQuery();
    } catch (e) {
      const error = e as Error;
      botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ª–æ–≥–∞–º');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ª–æ–≥–æ–≤
  bot.action('logs_filter_menu', async ctx => {
    const chatId = ctx.chat?.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    if (chatId !== adminChatId) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìÑ –í—Å–µ', callback_data: 'logs_filter_all' },
          { text: 'üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ', callback_data: 'logs_filter_unread' },
          { text: 'üìù INFO+', callback_data: 'logs_filter_info+' },
        ],
        [
          { text: 'üêõ DEBUG', callback_data: 'logs_filter_debug' },
          { text: 'üìù INFO', callback_data: 'logs_filter_info' },
        ],
        [
          { text: '‚ö†Ô∏è WARN', callback_data: 'logs_filter_warn' },
          { text: '‚ùå ERROR', callback_data: 'logs_filter_error' },
          { text: 'üíÄ FATAL', callback_data: 'logs_filter_fatal' },
        ],
        [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ª–æ–≥–∞–º', callback_data: 'logs_refresh_0_info+' }],
      ],
    };

    await ctx.editMessageText('üîç <b>–í–´–ë–ï–†–ò–¢–ï –£–†–û–í–ï–ù–¨ –õ–û–ì–û–í</b>', {
      parse_mode: 'HTML',
      reply_markup: keyboard,
    });

    await ctx.answerCbQuery();
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é
  bot.action(/logs_filter_(.+)/, async ctx => {
    const chatId = ctx.chat?.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    if (chatId !== adminChatId) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    const level = ctx.match![1];
    const levelFilter = level === 'all' ? null : level;
    const filterSuffix = level;
    let filterName: string;

    if (level === 'all') {
      filterName = '–í—Å–µ';
    } else if (level === 'unread') {
      filterName = '–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ';
    } else if (level === 'info+') {
      filterName = 'INFO –∏ –≤—ã—à–µ';
    } else {
      filterName = level.toUpperCase();
    }

    try {
      let logs;
      if (level === 'unread') {
        logs = getRecentUnreadLogs(7, 0);
      } else if (level === 'info+') {
        logs = getRecentUnreadInfoLogs(7, 0);
      } else if (levelFilter && level !== 'all') {
        logs = getRecentLogsByLevel(levelFilter, 7, 0);
      } else {
        logs = getRecentLogs(7, 0);
      }

      const totalCount = getLogsCount();
      const unreadCount = getUnreadLogsCount();

      if (logs.length === 0) {
        await ctx.answerCbQuery('üì≠ –õ–æ–≥–æ–≤ —Å —Ç–∞–∫–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º –Ω–µ—Ç');
        return;
      }

      let message = `üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\n`;
      message += `üìä –í—Å–µ–≥–æ: ${totalCount} | üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\n`;

      const displayCount = level === 'unread' ? unreadCount : totalCount;
      message += `üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: ${logs.length} –∏–∑ ${displayCount} | üîç –§–∏–ª—å—Ç—Ä: ${filterName}\n\n`;

      logs.forEach((log, index) => {
        message += formatLogEntry(log, index) + '\n\n';
      });

      const keyboard = {
        inline_keyboard: [
          [
            { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', callback_data: `logs_prev_0_${filterSuffix}` },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'logs_stats' },
            { text: '–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', callback_data: `logs_next_7_${filterSuffix}` },
          ],
          [
            { text: 'üîç –§–∏–ª—å—Ç—Ä', callback_data: 'logs_filter_menu' },
            { text: '‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: 'logs_mark_visible_read' },
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: `logs_refresh_0_${filterSuffix}` },
          ],
          [{ text: 'üìÅ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ —Ñ–∞–π–ª', callback_data: `logs_download_0_${filterSuffix}` }],
        ],
      };

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: keyboard,
      });

      await ctx.answerCbQuery(`üîç –§–∏–ª—å—Ç—Ä: ${filterName}`);
    } catch (e) {
      const error = e as Error;
      botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤
  bot.action('logs_stats', async ctx => {
    const chatId = ctx.chat?.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    if (chatId !== adminChatId) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    try {
      const stats = getLogsStatistics();
      const totalCount = getLogsCount();
      const unreadCount = getUnreadLogsCount();

      let message = `üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–û–ì–û–í</b>\n\n`;
      message += `üìÑ –í—Å–µ–≥–æ –ª–æ–≥–æ–≤: ${totalCount}\n`;
      message += `üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\n\n`;
      message += `<b>–ü–æ —É—Ä–æ–≤–Ω—è–º:</b>\n`;

      stats.forEach(stat => {
        const levelEmojis: Record<string, string> = {
          trace: 'üîç',
          debug: 'üêõ',
          info: 'üìù',
          warn: '‚ö†Ô∏è',
          error: '‚ùå',
          fatal: 'üíÄ',
        };

        const emoji = levelEmojis[stat.level] || 'üìÑ';
        const percentage = ((stat.count / totalCount) * 100).toFixed(1);
        message += `${emoji} ${stat.level.toUpperCase()}: ${stat.count} (${percentage}%)`;
        if (stat.unread_count > 0) {
          message += ` | üÜï ${stat.unread_count}`;
        }
        message += '\n';
      });

      const keyboard = {
        inline_keyboard: [[{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ª–æ–≥–∞–º', callback_data: 'logs_refresh_0_all' }]],
      };

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: keyboard,
      });

      await ctx.answerCbQuery();
    } catch (e) {
      const error = e as Error;
      botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  bot.action('logs_mark_all_read', async ctx => {
    const chatId = ctx.chat?.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    if (chatId !== adminChatId) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    try {
      markAllLogsAsRead();
      await ctx.answerCbQuery('‚úÖ –í—Å–µ –ª–æ–≥–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ');

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const logs = getRecentLogs(7, 0);
      const totalCount = getLogsCount();
      const unreadCount = getUnreadLogsCount();

      let message = `üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\n`;
      message += `üìä –í—Å–µ–≥–æ: ${totalCount} | üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\n`;
      message += `üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: ${logs.length} –∏–∑ ${totalCount} | üîç –§–∏–ª—å—Ç—Ä: –í—Å–µ\n\n`;

      logs.forEach((log, index) => {
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_read = true –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        log.is_read = true;
        message += formatLogEntry(log, index) + '\n\n';
      });

      const keyboard = {
        inline_keyboard: [
          [
            { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', callback_data: 'logs_prev_0_all' },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'logs_stats' },
            { text: '–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', callback_data: 'logs_next_7_all' },
          ],
          [
            { text: 'üîç –§–∏–ª—å—Ç—Ä', callback_data: 'logs_filter_menu' },
            { text: '‚úÖ –í—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: 'logs_mark_all_read' },
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'logs_refresh_0_all' },
          ],
          [{ text: 'üìÅ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ —Ñ–∞–π–ª', callback_data: 'logs_download_0_all' }],
        ],
      };

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: keyboard,
      });
    } catch (e) {
      const error = e as Error;
      botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö –ª–æ–≥–æ–≤');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ª–æ–≥–æ–≤');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤–∏–¥–∏–º—ã—Ö –ª–æ–≥–æ–≤ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  bot.action('logs_mark_visible_read', async ctx => {
    const chatId = ctx.chat?.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    if (chatId !== adminChatId) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    try {
      // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ª–æ–≥–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      // –≠—Ç–æ —Å–ª–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–∑ callback, –ø–æ—ç—Ç–æ–º—É –ø–æ–∫–∞ —Å–¥–µ–ª–∞–µ–º simple approach

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö INFO+ –ª–æ–≥–æ–≤ (—Ç–µ–∫—É—â–∏–µ –≤–∏–¥–∏–º—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
      const logs = getRecentUnreadInfoLogs(7, 0);

      if (logs.length === 0) {
        await ctx.answerCbQuery('üì≠ –ù–µ—Ç –≤–∏–¥–∏–º—ã—Ö –ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏');
        return;
      }

      // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ –ª–æ–≥–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      const logIds = logs.map(log => log.id);
      markLogsAsRead(logIds);

      await ctx.answerCbQuery(`‚úÖ –ü–æ–º–µ—á–µ–Ω–æ ${logs.length} –ª–æ–≥–æ–≤ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ç–µ –∂–µ –ª–æ–≥–∏ –Ω–æ —É–∂–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      const totalCount = getLogsCount();
      const unreadCount = getUnreadLogsCount();

      let message = `üìù <b>–õ–û–ì–ò –°–ò–°–¢–ï–ú–´</b>\n\n`;
      message += `üìä –í—Å–µ–≥–æ: ${totalCount} | üÜï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ: ${unreadCount}\n`;
      message += `üìÑ –ü–æ–∫–∞–∑–∞–Ω–æ: ${logs.length} –ª–æ–≥–æ–≤ (–ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ) | üîç –§–∏–ª—å—Ç—Ä: –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ\n\n`;

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      logs.forEach((log, index) => {
        log.is_read = true;
        message += formatLogEntry(log, index) + '\n\n';
      });

      const keyboard = {
        inline_keyboard: [
          [
            { text: '‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ', callback_data: 'logs_prev_0_info+' },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'logs_stats' },
            { text: '–°–ª–µ–¥—É—é—â–∏–µ ‚û°Ô∏è', callback_data: 'logs_next_7_info+' },
          ],
          [
            { text: 'üîç –§–∏–ª—å—Ç—Ä', callback_data: 'logs_filter_menu' },
            { text: '‚úÖ –£–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: 'logs_mark_visible_read' },
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'logs_refresh_0_info+' },
          ],
          [{ text: 'üìÅ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ —Ñ–∞–π–ª', callback_data: 'logs_download_0_info+' }],
        ],
      };

      await ctx.editMessageText(message, {
        parse_mode: 'HTML',
        reply_markup: keyboard,
      });
    } catch (e) {
      const error = e as Error;
      botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤–∏–¥–∏–º—ã—Ö –ª–æ–≥–æ–≤');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ª–æ–≥–æ–≤');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ
  bot.action(/log_read_(\d+)/, async ctx => {
    const chatId = ctx.chat?.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    if (chatId !== adminChatId) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    const logId = parseInt(ctx.match![1]);

    try {
      markLogAsRead(logId);
      await ctx.answerCbQuery(`‚úÖ –õ–æ–≥ #${logId} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π`);
    } catch (e) {
      const error = e as Error;
      botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –ª–æ–≥–∞');
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ª–æ–≥–∞');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ —Ñ–∞–π–ª–æ–º
  bot.action(/logs_download_(\d+)_(.+)/, async ctx => {
    const chatId = ctx.chat?.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    if (chatId !== adminChatId) {
      await ctx.answerCbQuery('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    const offset = parseInt(ctx.match![1]);
    const levelFilter = ctx.match![2] === 'all' ? null : ctx.match![2];

    try {
      await ctx.answerCbQuery('üì• –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ñ–∞–π–ª...');

      // –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –ª–æ–≥–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)
      let logs;
      if (levelFilter === 'unread') {
        logs = getRecentUnreadLogs(100, offset);
      } else if (levelFilter === 'info+') {
        logs = getRecentUnreadInfoLogs(100, offset);
      } else if (levelFilter && levelFilter !== 'all') {
        logs = getRecentLogsByLevel(levelFilter, 100, offset);
      } else {
        logs = getRecentLogs(100, offset);
      }

      if (logs.length === 0) {
        await ctx.reply('üì≠ –õ–æ–≥–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        return;
      }

      const timestamp = new Date().toISOString().slice(0, 16).replace('T', '_').replace(/:/g, '-');
      const filterSuffix = levelFilter ? `_${levelFilter}` : '';
      const filename = `logs${filterSuffix}_${timestamp}.txt`;
      const filePath = createTempLogFile(logs, filename);

      try {
        await ctx.replyWithDocument(
          { source: filePath, filename },
          {
            caption: `üìÅ <b>–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤</b>\n\nüìÑ –ó–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ: ${logs.length}\nüîç –§–∏–ª—å—Ç—Ä: ${
              levelFilter ? levelFilter.toUpperCase() : '–í—Å–µ'
            }\nüìÖ –°–æ–∑–¥–∞–Ω: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`,
            parse_mode: 'HTML',
          }
        );
      } finally {
        cleanupTempFile(filePath);
      }
    } catch (e) {
      const error = e as Error;
      botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤');
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤:\n<code>${error.message}</code>`, {
        parse_mode: 'HTML',
      });
    }
  });
}