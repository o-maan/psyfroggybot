import { Telegraf } from 'telegraf';
import { Scheduler } from '../../scheduler';

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
export function registerLastRunCommand(bot: Telegraf, scheduler: Scheduler) {
  bot.command('last_run', async ctx => {
    const chatId = ctx.chat.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
    if (chatId !== adminChatId) {
      await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥
      const lastRun = await (scheduler as any).getLastDailyRunTime();

      if (lastRun) {
        const moscowTime = lastRun.toLocaleString('ru-RU', {
          timeZone: 'Europe/Moscow',
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
        });

        const now = new Date();
        const timeDiff = now.getTime() - lastRun.getTime();
        const hoursDiff = Math.floor(timeDiff / (1000 * 60 * 60));
        const minutesDiff = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));

        await ctx.reply(
          `üìÖ <b>–ü–û–°–õ–ï–î–ù–Ø–Ø –†–ê–°–°–´–õ–ö–ê</b>\n\n` +
            `üïê –í—Ä–µ–º—è: <code>${moscowTime}</code>\n` +
            `‚è±Ô∏è –ü—Ä–æ—à–ª–æ: ${hoursDiff} —á. ${minutesDiff} –º–∏–Ω.\n\n` +
            `${hoursDiff < 20 ? '‚úÖ –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '‚è≥ –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ 22:00'}`,
          { parse_mode: 'HTML' }
        );
      } else {
        await ctx.reply('üì≠ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      }
    } catch (error) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${error}`);
    }
  });
}