import { Telegraf } from 'telegraf';
import { Scheduler } from '../../scheduler';
import { botLogger } from '../../logger';

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–ª—ã—Ö –ø–æ—Å—Ç–æ–≤
export function registerTestAngryCommand(bot: Telegraf, scheduler: Scheduler) {
  bot.command('test_angry', async ctx => {
    const chatId = ctx.chat.id;
    const userId = ctx.from?.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
    if (userId !== adminChatId) {
      await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
      return;
    }

    try {
      botLogger.info({ userId }, 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–ª–æ–≥–æ –ø–æ—Å—Ç–∞');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞
      await ctx.reply('üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–ª–æ–≥–æ –ø–æ—Å—Ç–∞...');
      
      // –ü–æ–ª—É—á–∞–µ–º ID —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ scheduler
      const targetUserId = scheduler.getTargetUserId();
      
      // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –æ–±—Ö–æ–¥ —Ç–∏–ø–æ–≤
      await (scheduler as any).sendAngryPost(targetUserId);
      
      await ctx.reply('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–ª–æ–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!');
      
      botLogger.info({ targetUserId }, '‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–ª–æ–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
      const err = error as Error;
      botLogger.error({ error: err.message, stack: err.stack }, '‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–ª–æ–≥–æ –ø–æ—Å—Ç–∞');
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
    }
  });
}