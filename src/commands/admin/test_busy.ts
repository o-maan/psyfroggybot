import { Telegraf } from 'telegraf';
import { Scheduler } from '../../scheduler';
import { botLogger } from '../../logger';

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function registerTestBusyCommand(bot: Telegraf, scheduler: Scheduler) {
  bot.command('test_busy', async ctx => {
    const chatId = ctx.chat.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
    if (chatId !== adminChatId) {
      await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
      const now = new Date();
      const evening = new Date(now);
      evening.setHours(18, 0, 0, 0);
      const tomorrow = new Date(now);
      tomorrow.setDate(now.getDate() + 1);

      const calendarService = scheduler.getCalendarService();
      const events = await calendarService.getEvents(evening.toISOString(), tomorrow.toISOString());

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
      const busyStatus = await (scheduler as any).detectUserBusy(events || []);

      let message = 'üîç <b>–¢–ï–°–¢ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ó–ê–ù–Ø–¢–û–°–¢–ò</b>\n\n';

      if (events && events.length > 0) {
        message += 'üìÖ <b>–°–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:</b>\n';
        events.forEach((event: any, i: number) => {
          message += `${i + 1}. ${event.summary || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;

          // –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
          if (event.start) {
            const startDate = new Date(event.start.dateTime || event.start.date);
            const endDate = event.end ? new Date(event.end.dateTime || event.end.date) : null;

            if (event.start.date && !event.start.dateTime) {
              message += `   ‚Ä¢ –í–µ—Å—å –¥–µ–Ω—å\n`;
            } else {
              message += `   ‚Ä¢ –í—Ä–µ–º—è: ${startDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
              if (endDate) {
                message += ` - ${endDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
              }
              message += '\n';
            }
          }

          // –°—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
          if (event.transparency) {
            message += `   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${event.transparency === 'transparent' ? '‚úÖ –°–≤–æ–±–æ–¥–µ–Ω' : 'üî¥ –ó–∞–Ω—è—Ç'}\n`;
          }

          // –ú–µ—Å—Ç–æ
          if (event.location) {
            message += `   ‚Ä¢ –ú–µ—Å—Ç–æ: ${event.location}\n`;
          }
        });
        message += '\n';
      } else {
        message += 'üìÖ <i>–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ</i>\n\n';
      }

      message += `ü§ñ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:</b>\n`;
      message += `‚Ä¢ –ó–∞–Ω—è—Ç: ${busyStatus.probably_busy ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}\n`;
      if (busyStatus.busy_reason) {
        message += `‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: ${busyStatus.busy_reason}\n`;
      }
      message += `\nüìÑ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–º–ø—Ç: <code>${
        busyStatus.probably_busy ? 'scheduled-message-flight.md' : 'scheduled-message.md'
      }</code>`;

      await ctx.reply(message, { parse_mode: 'HTML' });
    } catch (e) {
      const error = e as Error;
      botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test_busy');
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:\n<code>${error.message}</code>`, {
        parse_mode: 'HTML',
      });
    }
  });
}