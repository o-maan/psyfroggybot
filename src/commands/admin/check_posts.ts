import { Telegraf } from 'telegraf';
import { Scheduler } from '../../scheduler';
import { botLogger } from '../../logger';

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
export function registerCheckPostsCommand(bot: Telegraf, scheduler: Scheduler) {
  bot.command('check_posts', async ctx => {
    const chatId = ctx.chat.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
    if (chatId !== adminChatId) {
      await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
      return;
    }

    try {
      const { db } = await import('../../db');

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      const query = db.query(`
        SELECT ip.*, u.chat_id as user_chat_id, u.username
        FROM interactive_posts ip
        JOIN users u ON ip.user_id = u.chat_id
        WHERE ip.created_at > datetime('now', '-7 days')
        ORDER BY ip.created_at DESC
        LIMIT 10
      `);

      const posts = query.all() as any[];

      let message = `üìä <b>–ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –ü–û–°–¢–´ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)</b>\n\n`;
      message += `–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: ${posts.length}\n\n`;

      for (const post of posts) {
        const createdDate = new Date(post.created_at).toLocaleString('ru-RU', {
          timeZone: 'Europe/Moscow',
          day: '2-digit',
          month: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
        });

        message += `üìù <b>–ü–æ—Å—Ç #${post.channel_message_id}</b>\n`;
        message += `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${post.username || post.user_chat_id}\n`;
        message += `üìÖ –°–æ–∑–¥–∞–Ω: ${createdDate}\n`;
        message += `üìã –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏–π:\n`;
        message += `   1Ô∏è‚É£ –ó–∞–¥–∞–Ω–∏–µ 1: ${post.task1_completed ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}\n`;
        message += `   2Ô∏è‚É£ –ó–∞–¥–∞–Ω–∏–µ 2: ${post.task2_completed ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}\n`;
        message += `   3Ô∏è‚É£ –ó–∞–¥–∞–Ω–∏–µ 3: ${post.task3_completed ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}\n`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const msgQuery = db.query(`
          SELECT m.* FROM messages m
          JOIN users u ON m.user_id = u.id
          WHERE u.chat_id = ? AND m.author_id = ?
          ORDER BY m.sent_time DESC
          LIMIT 1
        `);
        const lastMsg = msgQuery.get(post.user_id, post.user_id) as any;

        if (lastMsg) {
          const msgDate = new Date(lastMsg.sent_time).toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
            day: '2-digit',
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
          });
          message += `üí¨ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${msgDate}\n`;
          message += `   "${lastMsg.message_text.substring(0, 50)}..."\n`;
        }

        message += '\n';
      }

      await ctx.reply(message, { parse_mode: 'HTML' });
    } catch (error) {
      const err = error as Error;
      botLogger.error({ error: err.message }, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–≤');
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
    }
  });
}