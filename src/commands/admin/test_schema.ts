import { Telegraf } from 'telegraf';
import { Scheduler } from '../../scheduler';
import { botLogger } from '../../logger';

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–æ–ø–∫–∏ skip_schema
export function registerTestSchemaCommand(bot: Telegraf, scheduler: Scheduler) {
  bot.command('test_schema', async ctx => {
    const chatId = ctx.chat.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
    if (chatId !== adminChatId) {
      await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
      return;
    }

    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π channelMessageId
      const testChannelMessageId = Date.now();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ö–µ–º–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–ø—É—Å–∫–∞
      const schemaText = `üìù <b>–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å–∏—Ç—É–∞—Ü–∏–∏</b>

–î–∞–≤–∞–π —Ä–∞–∑–ª–æ–∂–∏–º —Å–∞–º—É—é –±–µ—Å–ø–æ–∫–æ—è—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ —Å—Ö–µ–º–µ:

1. <b>–°–∏—Ç—É–∞—Ü–∏—è</b> - —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?
2. <b>–≠–º–æ—Ü–∏–∏</b> - —á—Ç–æ —è —á—É–≤—Å—Ç–≤—É—é?
3. <b>–ú—ã—Å–ª–∏</b> - –æ —á–µ–º –¥—É–º–∞—é?
4. <b>–î–µ–π—Å—Ç–≤–∏—è</b> - —á—Ç–æ –¥–µ–ª–∞—é –∏–ª–∏ —Ö–æ—á—É —Å–¥–µ–ª–∞—Ç—å?

<i>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ —Å—Ö–µ–º—ã.</i>`;

      await ctx.reply(schemaText, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[{ text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: `skip_schema_${testChannelMessageId}` }]],
        },
      });

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î
      const { db } = await import('../../db');
      db.run(
        `
        INSERT OR REPLACE INTO interactive_posts
        (channel_message_id, user_id, created_at, task1_completed, task2_completed, task3_completed)
        VALUES (?, ?, datetime('now'), 1, 0, 0)
      `,
        [testChannelMessageId, chatId]
      );

      await ctx.reply(
        `‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n` +
          `Test Channel Message ID: <code>${testChannelMessageId}</code>\n\n` +
          `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.`,
        { parse_mode: 'HTML' }
      );
    } catch (error) {
      const err = error as Error;
      botLogger.error({ error: err.message }, '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test_schema');
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
    }
  });
}