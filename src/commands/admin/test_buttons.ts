import { Telegraf } from 'telegraf';
import { Scheduler } from '../../scheduler';
import { botLogger } from '../../logger';

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–Ω–æ–ø–æ–∫ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
export function registerTestButtonsCommand(bot: Telegraf, scheduler: Scheduler) {
  bot.command('test_buttons', async ctx => {
    const chatId = ctx.chat.id;
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–¥–º–∏–Ω
    if (chatId !== adminChatId) {
      await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
      return;
    }

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
      const CHANNEL_ID = scheduler.CHANNEL_ID;

      const testMessage = await bot.telegram.sendMessage(
        CHANNEL_ID,
        'üß™ <b>–¢–ï–°–¢–û–í–´–ô –ü–û–°–¢ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ö–ù–û–ü–û–ö</b>\n\n' +
          '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.\n\n' +
          '‚¨áÔ∏è –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –Ω–∏–∂–µ',
        { parse_mode: 'HTML' }
      );

      const messageId = testMessage.message_id;

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
      await new Promise(resolve => setTimeout(resolve, 2000));

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
      const CHAT_ID = scheduler.getChatId();

      if (!CHAT_ID) {
        await ctx.reply('‚ùå CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env');
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      const commentUrl = `https://t.me/c/${CHANNEL_ID.toString().slice(4)}/${messageId}?thread=${messageId}`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç', url: commentUrl }],
          [{ text: '‚úÖ –í—Å–µ –æ–∫ - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'daily_skip_all' }],
        ],
      };

      const buttonMessage = await bot.telegram.sendMessage(
        CHAT_ID,
        'üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏:\n\n' +
          `Channel ID: ${CHANNEL_ID}\n` +
          `Message ID: ${messageId}\n` +
          `Comment URL: ${commentUrl}`,
        {
          reply_markup: keyboard,
        }
      );

      await ctx.reply(
        '‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n' +
          `üì¢ Channel ID: <code>${CHANNEL_ID}</code>\n` +
          `üí¨ Chat ID: <code>${CHAT_ID}</code>\n` +
          `üìù Message ID: <code>${messageId}</code>\n` +
          `üîó URL: <code>${commentUrl}</code>`,
        { parse_mode: 'HTML' }
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
      await ctx.reply('üì∏ –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–¢—É–Ω–Ω–µ–ª—å–Ω–æ–µ –≤–∏–¥–µ–Ω–∏–µ):');
      const lastFilterId = 'AgACAgIAAxkBAAIF9Gi0ij7wfJoLrBApRaBXfRSeKB2DAAK-9jEbGZqoSYqi4i1O6U0lAQADAgADeQADNgQ';
      await ctx.replyWithPhoto(lastFilterId);
    } catch (error) {
      const err = error as Error;
      botLogger.error({ error: err.message, stack: err.stack }, '–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /test_buttons');
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
    }
  });
}