import { Telegraf } from 'telegraf';
import { readFileSync } from 'fs';
import { generateMessage } from './llm';
import { botLogger } from './logger';
import { 
  updateInteractivePostState, 
  getInteractivePost,
  saveMessage,
  updateTaskStatus
} from './db';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ <think>
function removeThinkTags(text: string): string {
  const lastThinkClose = text.lastIndexOf('</think>');
  if (lastThinkClose !== -1 && text.trim().startsWith('<think>')) {
    return text.substring(lastThinkClose + 8).trim();
  }
  return text;
}

// –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
const PERCEPT_FILTERS_EXAMPLES = [
  {
    thoughts: '–°–∫–∞–∑–∞–ª –≥–ª—É–ø–æ—Å—Ç—å –Ω–∞ —Å–æ–≤–µ—â–∞–Ω–∏–∏ - –≤—Å–µ –ø–æ–¥—É–º–∞—é—Ç, —á—Ç–æ —è –Ω–µ–∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–π, –º–µ–Ω—è —É–≤–æ–ª—è—Ç',
    distortions: '–ß—Ç–µ–Ω–∏–µ –º—ã—Å–ª–µ–π + –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏–∑–∞—Ü–∏—è',
    rational: '–Ø –Ω–µ –º–æ–≥—É –∑–Ω–∞—Ç—å, —á—Ç–æ –¥—É–º–∞—é—Ç –¥—Ä—É–≥–∏–µ. –í–µ—Ä–æ—è—Ç–Ω–æ, –æ–Ω–∏ –¥–∞–∂–µ –Ω–µ –∑–∞–º–µ—Ç–∏–ª–∏. –ê –µ—Å–ª–∏ –∑–∞–º–µ—Ç–∏–ª–∏ - –æ–¥–∏–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –æ—Ç–º–µ–Ω—è–µ—Ç –º–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –æ–ø—ã—Ç'
  },
  {
    thoughts: '–û–Ω –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–∞–≤–µ—Ä–Ω–æ–µ, —è –µ–≥–æ —Ä–∞–∑–¥—Ä–∞–∂–∞—é',
    distortions: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è + —á—Ç–µ–Ω–∏–µ –º—ã—Å–ª–µ–π', 
    rational: '–£ –Ω–µ–≥–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–∏—á–∏–Ω –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å. –û–Ω–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω—ã —Å–æ –º–Ω–æ–π. –õ—É—á—à–µ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞, —á–µ–º —Å—Ç—Ä–æ–∏—Ç—å –¥–æ–≥–∞–¥–∫–∏'
  },
  {
    thoughts: '–Ø –∑–∞–±—ã–ª –∫—É–ø–∏—Ç—å –Ω—É–∂–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã - —è –Ω–∏–∫—á–µ–º–Ω—ã–π, –Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
    distortions: '–ü—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ + –æ–±–æ–±—â–µ–Ω–∏–µ',
    rational: '–≠—Ç–æ –º–µ–ª–æ—á—å –∏ –Ω–µ —Ç—Ä–∞–≥–µ–¥–∏—è. –í—Å–µ –∑–∞–±—ã–≤–∞—é—Ç. –≠—Ç–æ –Ω–µ –¥–µ–ª–∞–µ—Ç –º–µ–Ω—è –Ω–∏–∫—á–µ–º–Ω—ã–º. –Ø —Å–æ –º–Ω–æ–≥–∏–º —Å–ø—Ä–∞–≤–ª—è—é—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å'
  }
];

export class DeepWorkHandler {
  private bot: Telegraf;
  private exampleCounters: Map<string, number> = new Map();
  private chatId: number; // ID –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

  constructor(bot: Telegraf, chatId?: number) {
    this.bot = bot;
    // –ï—Å–ª–∏ chatId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ env
    this.chatId = chatId || Number(process.env.CHAT_ID) || -1002798126153;
  }

  // –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±–æ—Ä —Ç–µ—Ö–Ω–∏–∫–∏
  async analyzeUserResponse(channelMessageId: number, userText: string, userId: number, replyToMessageId?: number): Promise<void> {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const analyzePrompt = readFileSync('assets/prompts/analyze_situations.md', 'utf-8');
      const fullPrompt = analyzePrompt + '\n' + userText;
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —É LLM
      const response = await generateMessage(fullPrompt);
      
      if (response === 'HF_JSON_ERROR') {
        throw new Error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LLM');
      }

      const cleanedResponse = removeThinkTags(response);
      const analysis = JSON.parse(cleanedResponse.replace(/```json|```/gi, '').trim());

      botLogger.info({
        channelMessageId,
        situationsCount: analysis.situations_count,
        technique: analysis.recommended_technique.type
      }, '–ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω');

      // –ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∫—É—é —Ä–∞–∑–±–µ—Ä–µ–º
      if (analysis.situations_count > 1) {
        await this.askWhichSituation(channelMessageId, analysis.situations, userId, replyToMessageId);
      } else {
        // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Ö–Ω–∏–∫–µ
        await this.startTechnique(channelMessageId, analysis.recommended_technique.type, userId, replyToMessageId);
      }
      
    } catch (error) {
      botLogger.error({ error, channelMessageId }, '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
      await this.startTechnique(channelMessageId, 'percept_filters', userId, replyToMessageId);
    }
  }

  // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é —Ä–∞–∑–±–µ—Ä–µ–º
  private async askWhichSituation(channelMessageId: number, situations: any[], userId: number, replyToMessageId?: number) {
    const post = getInteractivePost(channelMessageId);
    if (!post) return;

    const buttons = situations.map((sit, index) => [{
      text: `${index + 1}. ${sit.brief}`,
      callback_data: `deep_situation_${channelMessageId}_${index}`
    }]);

    const keyboard = { inline_keyboard: buttons };
    
    const sendOptions: any = {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    };

    if (replyToMessageId) {
      sendOptions.reply_parameters = {
        message_id: replyToMessageId
      };
    }
    
    const message = await this.bot.telegram.sendMessage(
      this.chatId,
      '–ö–∞–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é —Ä–∞–∑–±–µ—Ä–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ?',
      sendOptions
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    updateInteractivePostState(channelMessageId, 'deep_waiting_situation_choice', {
      bot_schema_message_id: message.message_id // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è ID —Å–æ–æ–±—â–µ–Ω–∏—è
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Ç—É–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ —Å–µ—Å—Å–∏–∏
    // TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å situations –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
  }

  // –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Ö–Ω–∏–∫—É
  async startTechnique(channelMessageId: number, techniqueType: string, userId: number, replyToMessageId?: number) {
    if (techniqueType === 'percept_filters') {
      await this.startPerceptFilters(channelMessageId, userId, replyToMessageId);
    } else if (techniqueType === 'abc') {
      // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å ABC —Ç–µ—Ö–Ω–∏–∫—É
      const sendOptions: any = {
        parse_mode: 'HTML'
      };
      
      if (replyToMessageId) {
        sendOptions.reply_parameters = {
          message_id: replyToMessageId
        };
      }
      
      await this.bot.telegram.sendMessage(this.chatId, 'ABC —Ç–µ—Ö–Ω–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', sendOptions);
    }
  }

  // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
  private async startPerceptFilters(channelMessageId: number, userId: number, replyToMessageId?: number) {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É
      const text = '–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è';
      
      // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
      try {
        const imagePath = 'assets/images/percept-filters-info.jpg';
        const image = readFileSync(imagePath);
        
        const sendOptions: any = {
          caption: text,
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [[
              { text: 'üöÄ –ü–æ–≥–Ω–∞–ª–∏', callback_data: `deep_filters_start_${channelMessageId}` }
            ]]
          }
        };
        
        if (replyToMessageId) {
          sendOptions.reply_parameters = {
            message_id: replyToMessageId
          };
        }
        
        const message = await this.bot.telegram.sendPhoto(this.chatId, 
          { source: image },
          sendOptions
        );

        updateInteractivePostState(channelMessageId, 'deep_waiting_filters_start');
      } catch (imageError) {
        // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        const sendOptions: any = {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [[
              { text: 'üöÄ –ü–æ–≥–Ω–∞–ª–∏', callback_data: `deep_filters_start_${channelMessageId}` }
            ]]
          }
        };
        
        if (replyToMessageId) {
          sendOptions.reply_parameters = {
            message_id: replyToMessageId
          };
        }
        
        const message = await this.bot.telegram.sendMessage(this.chatId, text, sendOptions);

        updateInteractivePostState(channelMessageId, 'deep_waiting_filters_start');
      }
    } catch (error) {
      botLogger.error({ error, channelMessageId }, '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≥–Ω–∞–ª–∏" –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  async handleFiltersStart(channelMessageId: number, userId: number, replyToMessageId?: number) {
    const sendOptions: any = {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [[
          { text: 'üí° –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä', callback_data: `deep_filters_example_thoughts_${channelMessageId}` }
        ]]
      }
    };
    
    if (replyToMessageId) {
      sendOptions.reply_parameters = {
        message_id: replyToMessageId
      };
    }
    
    const message = await this.bot.telegram.sendMessage(this.chatId,
      '–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏?',
      sendOptions
    );

    updateInteractivePostState(channelMessageId, 'deep_waiting_thoughts', {
      bot_task2_message_id: message.message_id // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
    });

    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ - –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
  }

  // –ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –º—ã—Å–ª–µ–π
  async showThoughtsExample(channelMessageId: number, userId: number, replyToMessageId?: number) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∫–ª—é—á –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø—Ä–∏–º–µ—Ä–æ–≤
    const key = `examples_${channelMessageId}`;
    const count = this.exampleCounters.get(key) || 0;

    if (count >= 3) {
      const sendOptions: any = {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üé¥ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: `deep_show_filters_${channelMessageId}` }
          ]]
        }
      };
      
      if (replyToMessageId) {
        sendOptions.reply_parameters = {
          message_id: replyToMessageId
        };
      }
      
      // 4-–µ –Ω–∞–∂–∞—Ç–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (count === 3) {
        await this.bot.telegram.sendMessage(this.chatId,
          '–ë–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö <b>–§–∏–ª—å—Ç—Ä—ã –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è</b>',
          sendOptions
        );
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        this.exampleCounters.set(key, count + 1);
      } else {
        // 5-–µ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –Ω–∞–∂–∞—Ç–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ
        await this.bot.telegram.sendMessage(this.chatId,
          '–ü—Ä–∏–º–µ—Ä—ã —Å–º–æ—Ç—Ä–∏ –≤—ã—à–µ –∏–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–π —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è',
          sendOptions
        );
        // –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, —á—Ç–æ–±—ã —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è–ª–æ—Å—å
      }
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä
      const example = PERCEPT_FILTERS_EXAMPLES[count];
      const text = `<b>–ú—ã—Å–ª–∏:</b> ${example.thoughts}\n\n<b>–ò—Å–∫–∞–∂–µ–Ω–∏—è:</b> ${example.distortions}\n\n<b>–†–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è:</b> ${example.rational}`;
      
      const sendOptions: any = { parse_mode: 'HTML' };
      
      if (replyToMessageId) {
        sendOptions.reply_parameters = {
          message_id: replyToMessageId
        };
      }
      
      await this.bot.telegram.sendMessage(this.chatId, text, sendOptions);
      
      this.exampleCounters.set(key, count + 1);
    }
  }
  
  // –ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –∏—Å–∫–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
  async showDistortionsExample(channelMessageId: number, userId: number, replyToMessageId?: number) {
    await this.showThoughtsExample(channelMessageId, userId, replyToMessageId);
  }
  
  // –ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
  async showRationalExample(channelMessageId: number, userId: number, replyToMessageId?: number) {
    await this.showThoughtsExample(channelMessageId, userId, replyToMessageId);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –º—ã—Å–ª–∏
  async handleThoughtsResponse(channelMessageId: number, userText: string, userId: number, replyToMessageId?: number) {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏—Å–∫–∞–∂–µ–Ω–∏—è–º
    const sendOptions: any = {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí° –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä', callback_data: `deep_filters_example_distortions_${channelMessageId}` }],
          [{ text: 'üé¥ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: `deep_show_filters_${channelMessageId}` }]
        ]
      }
    };
    
    if (replyToMessageId) {
      sendOptions.reply_parameters = {
        message_id: replyToMessageId
      };
    }
    
    const message = await this.bot.telegram.sendMessage(this.chatId,
      '–ö–∞–∫–∏–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è —Ç—ã –∑–¥–µ—Å—å –≤–∏–¥–∏—à—å?',
      sendOptions
    );

    updateInteractivePostState(channelMessageId, 'deep_waiting_distortions', {
      user_task2_message_id: message.message_id // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–∫–∞–∂–µ–Ω–∏–π
    const key = `distortions_${channelMessageId}`;
    this.exampleCounters.set(key, this.exampleCounters.get(`thoughts_${channelMessageId}`) || 0);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏—Å–∫–∞–∂–µ–Ω–∏—è
  async handleDistortionsResponse(channelMessageId: number, userText: string, userId: number, replyToMessageId?: number) {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
    const sendOptions: any = {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üí° –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä', callback_data: `deep_filters_example_rational_${channelMessageId}` }],
          [{ text: 'üé¥ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: `deep_show_filters_${channelMessageId}` }]
        ]
      }
    };
    
    if (replyToMessageId) {
      sendOptions.reply_parameters = {
        message_id: replyToMessageId
      };
    }
    
    const message = await this.bot.telegram.sendMessage(this.chatId,
      '–ê —Ç–µ–ø–µ—Ä—å –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é',
      sendOptions
    );

    updateInteractivePostState(channelMessageId, 'deep_waiting_rational', {
      bot_task3_message_id: message.message_id // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
    });
  }

  // –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  async showFiltersCards(channelMessageId: number, userId: number, replyToMessageId?: number) {
    try {
      // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
      const filterImages = [
        'assets/images/filters-1.jpg',
        'assets/images/filters-2.jpg',
        'assets/images/filters-3.jpg'
      ];

      for (const imagePath of filterImages) {
        try {
          const image = readFileSync(imagePath);
          const sendOptions: any = {};
          
          if (replyToMessageId) {
            sendOptions.reply_parameters = {
              message_id: replyToMessageId
            };
          }
          
          await this.bot.telegram.sendPhoto(this.chatId, { source: image }, sendOptions);
        } catch (err) {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç
          continue;
        }
      }
    } catch (error) {
      // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      const sendOptions: any = { parse_mode: 'HTML' };
      
      if (replyToMessageId) {
        sendOptions.reply_parameters = {
          message_id: replyToMessageId
        };
      }
      
      await this.bot.telegram.sendMessage(this.chatId, 
        '<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è:</b>\n\n' +
        'üîÆ <b>–ß—Ç–µ–Ω–∏–µ –º—ã—Å–ª–µ–π</b> - –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–Ω–∞–µ–º, –æ —á–µ–º –¥—É–º–∞—é—Ç –¥—Ä—É–≥–∏–µ\n\n' +
        'üí£ <b>–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏–∑–∞—Ü–∏—è</b> - –æ–∂–∏–¥–∞–µ–º —Ö—É–¥—à–µ–≥–æ –∏—Å—Ö–æ–¥–∞ —Å–æ–±—ã—Ç–∏–π\n\n' +
        'üéØ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è</b> - –±–µ—Ä–µ–º –Ω–∞ —Å–µ–±—è –≤–∏–Ω—É –∑–∞ —Ç–æ, —á—Ç–æ –æ—Ç –Ω–∞—Å –Ω–µ –∑–∞–≤–∏—Å–∏—Ç\n\n' +
        '‚ôæ <b>–û–±–æ–±—â–µ–Ω–∏–µ</b> - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞ "–≤—Å–µ–≥–¥–∞", "–Ω–∏–∫–æ–≥–¥–∞", "–≤—Å–µ", "–Ω–∏–∫—Ç–æ"\n\n' +
        'üìà <b>–ü—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ/–ø—Ä–µ—É–º–µ–Ω—å—à–µ–Ω–∏–µ</b> - –∏—Å–∫–∞–∂–∞–µ–º –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π\n\n' +
        '‚ö´‚ö™ <b>–ß–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –º—ã—à–ª–µ–Ω–∏–µ</b> - –≤–∏–¥–∏–º —Ç–æ–ª—å–∫–æ –∫—Ä–∞–π–Ω–æ—Å—Ç–∏ –±–µ–∑ –ø–æ–ª—É—Ç–æ–Ω–æ–≤',
        sendOptions
      );
    }
  }
}