import { Telegraf } from 'telegraf';
import { readFileSync } from 'fs';
import path from 'path';
import { generateMessage } from './llm';
import { botLogger } from './logger';
import { 
  updateInteractivePostState, 
  getInteractivePost,
  saveMessage,
  updateTaskStatus
} from './db';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ <think>
function removeThinkTags(text: string): string {
  const lastThinkClose = text.lastIndexOf('</think>');
  if (lastThinkClose !== -1 && text.trim().startsWith('<think>')) {
    return text.substring(lastThinkClose + 8).trim();
  }
  return text;
}

// –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
const PERCEPT_FILTERS_EXAMPLES = [
  {
    thoughts: '–°–∫–∞–∑–∞–ª –≥–ª—É–ø–æ—Å—Ç—å –Ω–∞ —Å–æ–≤–µ—â–∞–Ω–∏–∏ - –≤—Å–µ –ø–æ–¥—É–º–∞—é—Ç, —á—Ç–æ —è –Ω–µ–∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–π, –º–µ–Ω—è —É–≤–æ–ª—è—Ç',
    distortions: '–ß—Ç–µ–Ω–∏–µ –º—ã—Å–ª–µ–π + –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏–∑–∞—Ü–∏—è',
    rational: '–Ø –Ω–µ –º–æ–≥—É –∑–Ω–∞—Ç—å, —á—Ç–æ –¥—É–º–∞—é—Ç –¥—Ä—É–≥–∏–µ. –í–µ—Ä–æ—è—Ç–Ω–æ, –æ–Ω–∏ –¥–∞–∂–µ –Ω–µ –∑–∞–º–µ—Ç–∏–ª–∏. –ê –µ—Å–ª–∏ –∑–∞–º–µ—Ç–∏–ª–∏ - –æ–¥–∏–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –æ—Ç–º–µ–Ω—è–µ—Ç –º–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –æ–ø—ã—Ç'
  },
  {
    thoughts: '–û–Ω –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–∞–≤–µ—Ä–Ω–æ–µ, —è –µ–≥–æ —Ä–∞–∑–¥—Ä–∞–∂–∞—é',
    distortions: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è + —á—Ç–µ–Ω–∏–µ –º—ã—Å–ª–µ–π', 
    rational: '–£ –Ω–µ–≥–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–∏—á–∏–Ω –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å. –û–Ω–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∑–∞–Ω—ã —Å–æ –º–Ω–æ–π. –õ—É—á—à–µ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ—Ç–≤–µ—Ç–∞, —á–µ–º —Å—Ç—Ä–æ–∏—Ç—å –¥–æ–≥–∞–¥–∫–∏'
  },
  {
    thoughts: '–Ø –∑–∞–±—ã–ª –∫—É–ø–∏—Ç—å –Ω—É–∂–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã - —è –Ω–∏–∫—á–µ–º–Ω—ã–π, –Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ',
    distortions: '–ü—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ + –æ–±–æ–±—â–µ–Ω–∏–µ',
    rational: '–≠—Ç–æ –º–µ–ª–æ—á—å –∏ –Ω–µ —Ç—Ä–∞–≥–µ–¥–∏—è. –í—Å–µ –∑–∞–±—ã–≤–∞—é—Ç. –≠—Ç–æ –Ω–µ –¥–µ–ª–∞–µ—Ç –º–µ–Ω—è –Ω–∏–∫—á–µ–º–Ω—ã–º. –Ø —Å–æ –º–Ω–æ–≥–∏–º —Å–ø—Ä–∞–≤–ª—è—é—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å'
  }
];

export class DeepWorkHandler {
  private bot: Telegraf;
  private exampleCounters: Map<string, number> = new Map();
  private chatId: number; // ID —á–∞—Ç–∞ –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ replyToChatId –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏)

  constructor(bot: Telegraf, chatId: number) {
    this.bot = bot;
    // –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π chatId (—ç—Ç–æ replyToChatId –∏–∑ handleInteractiveUserResponse)
    this.chatId = chatId;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–∂–∞—Ç–∏–π
  private getExampleButtonText(channelMessageId: number): string {
    const key = `examples_${channelMessageId}`;
    const count = this.exampleCounters.get(key) || 0;
    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ 3 –ø—Ä–∏–º–µ—Ä–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null (–∫–Ω–æ–ø–∫–∞ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞)
    if (count >= 3) {
      return '';
    }
    return count > 0 ? '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ –ø—Ä–∏–º–µ—Ä' : '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä';
  }
  
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∫ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏)
  private async sendMessage(
    text: string, 
    replyToMessageId?: number,
    options: {
      parse_mode?: string;
      reply_markup?: any;
    } = {}
  ) {
    const sendOptions: any = {
      parse_mode: options.parse_mode || 'HTML',
      ...options
    };
    
    // –í–°–ï–ì–î–ê –¥–æ–±–∞–≤–ª—è–µ–º reply_parameters –µ—Å–ª–∏ –µ—Å—Ç—å messageId
    if (replyToMessageId) {
      sendOptions.reply_parameters = {
        message_id: replyToMessageId
      };
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ replyToChatId –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º)
    return await this.bot.telegram.sendMessage(this.chatId, text, sendOptions);
  }
  

  // –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–±–æ—Ä —Ç–µ—Ö–Ω–∏–∫–∏
  async analyzeUserResponse(channelMessageId: number, userText: string, userId: number, replyToMessageId?: number): Promise<void> {
    try {
      botLogger.info({
        channelMessageId,
        userId,
        replyToMessageId,
        hasReplyId: !!replyToMessageId
      }, 'analyzeUserResponse –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const analyzePrompt = readFileSync('assets/prompts/analyze_situations.md', 'utf-8');
      const fullPrompt = analyzePrompt + '\n' + userText;
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —É LLM
      const response = await generateMessage(fullPrompt);
      
      if (response === 'HF_JSON_ERROR') {
        throw new Error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LLM');
      }

      const cleanedResponse = removeThinkTags(response);
      const analysis = JSON.parse(cleanedResponse.replace(/```json|```/gi, '').trim());

      botLogger.info({
        channelMessageId,
        situationsCount: analysis.situations_count,
        technique: analysis.recommended_technique.type
      }, '–ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω');

      // –ï—Å–ª–∏ —Å–∏—Ç—É–∞—Ü–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∫—É—é —Ä–∞–∑–±–µ—Ä–µ–º
      if (analysis.situations_count > 1) {
        await this.askWhichSituation(channelMessageId, analysis.situations, userId, replyToMessageId);
      } else {
        // –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ—Ö–Ω–∏–∫–µ
        await this.startTechnique(channelMessageId, analysis.recommended_technique.type, userId, replyToMessageId);
      }
      
    } catch (error) {
      botLogger.error({ error, channelMessageId }, '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
      try {
        await this.startTechnique(channelMessageId, 'percept_filters', userId, replyToMessageId);
      } catch (fallbackError) {
        botLogger.error({ 
          error: fallbackError, 
          channelMessageId,
          originalError: error 
        }, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ fallback –Ω–∞ —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è');
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
        try {
          await this.sendMessage(
            '–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.',
            replyToMessageId
          );
        } catch (finalError) {
          botLogger.error({
            error: finalError,
            channelMessageId,
            chatId: this.chatId,
            replyToMessageId
          }, '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ fallback —Å–æ–æ–±—â–µ–Ω–∏–µ');
        }
      }
    }
  }

  // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é —Ä–∞–∑–±–µ—Ä–µ–º
  private async askWhichSituation(channelMessageId: number, situations: any[], userId: number, replyToMessageId?: number) {
    const post = getInteractivePost(channelMessageId);
    if (!post) return;

    const buttons = situations.map((sit, index) => [{
      text: `${index + 1}. ${sit.brief}`,
      callback_data: `deep_situation_${channelMessageId}_${index}`
    }]);

    const keyboard = { inline_keyboard: buttons };
    
    const message = await this.sendMessage(
      '–ö–∞–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é —Ä–∞–∑–±–µ—Ä–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ?',
      replyToMessageId,
      {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      }
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    updateInteractivePostState(channelMessageId, 'deep_waiting_situation_choice', {
      bot_schema_message_id: message.message_id // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è ID —Å–æ–æ–±—â–µ–Ω–∏—è
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏—Ç—É–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ —Å–µ—Å—Å–∏–∏
    // TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å situations –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
  }

  // –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Ö–Ω–∏–∫—É
  async startTechnique(channelMessageId: number, techniqueType: string, userId: number, replyToMessageId?: number) {
    if (techniqueType === 'percept_filters') {
      await this.startPerceptFilters(channelMessageId, userId, replyToMessageId);
    } else if (techniqueType === 'abc') {
      // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å ABC —Ç–µ—Ö–Ω–∏–∫—É
      await this.sendMessage('ABC —Ç–µ—Ö–Ω–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', replyToMessageId);
    }
  }

  // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
  private async startPerceptFilters(channelMessageId: number, userId: number, replyToMessageId?: number) {
    try {
      botLogger.info({
        channelMessageId,
        userId,
        replyToMessageId,
        hasReplyId: !!replyToMessageId,
        chatId: this.chatId,
        chatIdType: typeof this.chatId
      }, '–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
      const text = '–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è';
      
      const reply_markup = {
        inline_keyboard: [[
          { text: 'üöÄ –ü–æ–≥–Ω–∞–ª–∏', callback_data: `deep_filters_start_${channelMessageId}` }
        ]]
      };
      
      botLogger.debug({
        channelMessageId,
        chatId: this.chatId,
        replyToMessageId,
        text
      }, '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
      const imagePath = path.join(process.cwd(), 'assets', 'images', 'percept-filters-info.png');
      const imageBuffer = readFileSync(imagePath);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º
      const sendOptions: any = {
        caption: text,
        parse_mode: 'HTML',
        reply_markup
      };
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç reply_to_message_id (–∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏)
      if (replyToMessageId) {
        sendOptions.reply_to_message_id = replyToMessageId;
      }
      
      const message = await this.bot.telegram.sendPhoto(this.chatId, { source: imageBuffer }, sendOptions);

      updateInteractivePostState(channelMessageId, 'deep_waiting_filters_start');
    } catch (error) {
      botLogger.error({ error, channelMessageId }, '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è');
      
      // –§–æ–ª–±—ç–∫ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
      try {
        const fallbackText = '–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —á–µ—Ä–µ–∑ —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è\n\n' +
                           '–§–∏–ª—å—Ç—Ä—ã –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è - —ç—Ç–æ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –Ω–∞—à–∏ –º—ã—Å–ª–∏ –∏ —ç–º–æ—Ü–∏–∏';
        
        const fallbackOptions: any = {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [[
              { text: 'üöÄ –ü–æ–≥–Ω–∞–ª–∏', callback_data: `deep_filters_start_${channelMessageId}` }
            ]]
          }
        };
        
        if (replyToMessageId) {
          fallbackOptions.reply_parameters = {
            message_id: replyToMessageId
          };
        }
        
        await this.bot.telegram.sendMessage(this.chatId, fallbackText, fallbackOptions);
        updateInteractivePostState(channelMessageId, 'deep_waiting_filters_start');
        
      } catch (fallbackError) {
        botLogger.error({ fallbackError, channelMessageId }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ fallback —Å–æ–æ–±—â–µ–Ω–∏—è');
        throw fallbackError; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
      }
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≥–Ω–∞–ª–∏" –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  async handleFiltersStart(channelMessageId: number, userId: number, replyToMessageId?: number) {
    const buttonText = this.getExampleButtonText(channelMessageId);
    const messageOptions: any = {};
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    if (buttonText) {
      messageOptions.reply_markup = {
        inline_keyboard: [[
          { text: buttonText, callback_data: `deep_filters_example_${channelMessageId}` }
        ]]
      };
    }
    
    const message = await this.sendMessage(
      '–ö–∞–∫–∏–µ <b>–º—ã—Å–ª–∏</b> –≤–æ–∑–Ω–∏–∫–ª–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏?',
      replyToMessageId,
      messageOptions
    );

    updateInteractivePostState(channelMessageId, 'deep_waiting_thoughts', {
      bot_task2_message_id: message.message_id // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
    });

    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ - –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
  }

  // –ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –º—ã—Å–ª–µ–π
  async showThoughtsExample(channelMessageId: number, userId: number, replyToMessageId?: number) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –∫–ª—é—á –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø—Ä–∏–º–µ—Ä–æ–≤
    const key = `examples_${channelMessageId}`;
    const count = this.exampleCounters.get(key) || 0;

    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (count >= 5) {
      return; // –ú–æ–ª—á–∞ –≤—ã—Ö–æ–¥–∏–º, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    }

    if (count >= 3) {
      const sendOptions: any = {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[
            { text: '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: `show_filters_${channelMessageId}` }
          ]]
        }
      };
      
      if (replyToMessageId) {
        sendOptions.reply_parameters = {
          message_id: replyToMessageId
        };
      }
      
      // 4-–µ –Ω–∞–∂–∞—Ç–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (count === 3) {
        await this.bot.telegram.sendMessage(this.chatId,
          '–ë–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö <b>–§–∏–ª—å—Ç—Ä—ã –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è</b>',
          sendOptions
        );
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        this.exampleCounters.set(key, count + 1);
      } else if (count === 4) {
        // 5-–µ –Ω–∞–∂–∞—Ç–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ 5
        await this.bot.telegram.sendMessage(this.chatId,
          '–ü—Ä–∏–º–µ—Ä—ã —Å–º–æ—Ç—Ä–∏ –≤—ã—à–µ –∏–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–π —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è',
          sendOptions
        );
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ 5, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏
        this.exampleCounters.set(key, 5);
      }
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä
      const example = PERCEPT_FILTERS_EXAMPLES[count];
      const text = `<b>–ú—ã—Å–ª–∏:</b> ${example.thoughts}\n\n<b>–ò—Å–∫–∞–∂–µ–Ω–∏—è:</b> ${example.distortions}\n\n<b>–†–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è:</b> ${example.rational}`;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥ –ø—Ä–∏–º–µ—Ä–æ–º
      const nextCount = count + 1;
      let keyboard;
      
      if (nextCount >= 3) {
        // –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–º–µ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
        keyboard = {
          inline_keyboard: [[
            { text: '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: `show_filters_${channelMessageId}` }
          ]]
        };
      } else {
        // –ï—Å—Ç—å –µ—â–µ –ø—Ä–∏–º–µ—Ä—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ï—â–µ –ø—Ä–∏–º–µ—Ä"
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ callback_data –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
        keyboard = {
          inline_keyboard: [[
            { text: '–ï—â–µ –ø—Ä–∏–º–µ—Ä', callback_data: `deep_filters_example_${channelMessageId}` }
          ]]
        };
      }
      
      await this.sendMessage(text, replyToMessageId, {
        reply_markup: keyboard
      });
      
      this.exampleCounters.set(key, count + 1);
    }
  }
  
  // –ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –∏—Å–∫–∞–∂–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
  async showDistortionsExample(channelMessageId: number, userId: number, replyToMessageId?: number) {
    await this.showThoughtsExample(channelMessageId, userId, replyToMessageId);
  }
  
  // –ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
  async showRationalExample(channelMessageId: number, userId: number, replyToMessageId?: number) {
    await this.showThoughtsExample(channelMessageId, userId, replyToMessageId);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –º—ã—Å–ª–∏
  async handleThoughtsResponse(channelMessageId: number, userText: string, userId: number, replyToMessageId?: number) {
    const buttonText = this.getExampleButtonText(channelMessageId);
    const keyboard = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–º–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    if (buttonText) {
      keyboard.push([{ text: buttonText, callback_data: `deep_filters_example_${channelMessageId}` }]);
    }
    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã" –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞
    keyboard.push([{ text: '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: `show_filters_${channelMessageId}` }]);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏—Å–∫–∞–∂–µ–Ω–∏—è–º
    const message = await this.sendMessage(
      '–ö–∞–∫–∏–µ <b>–∏—Å–∫–∞–∂–µ–Ω–∏—è</b> —Ç—ã –∑–¥–µ—Å—å –≤–∏–¥–∏—à—å?',
      replyToMessageId,
      {
        reply_markup: {
          inline_keyboard: keyboard
        }
      }
    );

    updateInteractivePostState(channelMessageId, 'deep_waiting_distortions', {
      user_task2_message_id: message.message_id // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –¥–ª—è ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    });

    // –°—á–µ—Ç—á–∏–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ showThoughtsExample
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏—Å–∫–∞–∂–µ–Ω–∏—è
  async handleDistortionsResponse(channelMessageId: number, userText: string, userId: number, replyToMessageId?: number) {
    const buttonText = this.getExampleButtonText(channelMessageId);
    const keyboard = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–º–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    if (buttonText) {
      keyboard.push([{ text: buttonText, callback_data: `deep_filters_example_${channelMessageId}` }]);
    }
    // –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã" –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞
    keyboard.push([{ text: '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: `show_filters_${channelMessageId}` }]);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
    const message = await this.sendMessage(
      '–ê —Ç–µ–ø–µ—Ä—å –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å <b>—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é</b>',
      replyToMessageId,
      {
        reply_markup: {
          inline_keyboard: keyboard
        }
      }
    );

    updateInteractivePostState(channelMessageId, 'deep_waiting_rational', {
      bot_task3_message_id: message.message_id // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
    });
  }

  // –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  async showFiltersCards(channelMessageId: number, userId: number, replyToMessageId?: number) {
    // –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    await this.sendMessage(
      '<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –∏—Å–∫–∞–∂–µ–Ω–∏—è:</b>\n\n' +
      'üîÆ <b>–ß—Ç–µ–Ω–∏–µ –º—ã—Å–ª–µ–π</b> - –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–Ω–∞–µ–º, –æ —á–µ–º –¥—É–º–∞—é—Ç –¥—Ä—É–≥–∏–µ\n\n' +
      'üí£ <b>–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏–∑–∞—Ü–∏—è</b> - –æ–∂–∏–¥–∞–µ–º —Ö—É–¥—à–µ–≥–æ –∏—Å—Ö–æ–¥–∞ —Å–æ–±—ã—Ç–∏–π\n\n' +
      'üéØ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è</b> - –±–µ—Ä–µ–º –Ω–∞ —Å–µ–±—è –≤–∏–Ω—É –∑–∞ —Ç–æ, —á—Ç–æ –æ—Ç –Ω–∞—Å –Ω–µ –∑–∞–≤–∏—Å–∏—Ç\n\n' +
      '‚ôæ <b>–û–±–æ–±—â–µ–Ω–∏–µ</b> - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞ "–≤—Å–µ–≥–¥–∞", "–Ω–∏–∫–æ–≥–¥–∞", "–≤—Å–µ", "–Ω–∏–∫—Ç–æ"\n\n' +
      'üìà <b>–ü—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ/–ø—Ä–µ—É–º–µ–Ω—å—à–µ–Ω–∏–µ</b> - –∏—Å–∫–∞–∂–∞–µ–º –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π\n\n' +
      '‚ö´‚ö™ <b>–ß–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –º—ã—à–ª–µ–Ω–∏–µ</b> - –≤–∏–¥–∏–º —Ç–æ–ª—å–∫–æ –∫—Ä–∞–π–Ω–æ—Å—Ç–∏ –±–µ–∑ –ø–æ–ª—É—Ç–æ–Ω–æ–≤',
      replyToMessageId
    );
  }

  // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å –ø–ª—é—à–∫–∞–º–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  async continueToPluskas(channelMessageId: number, userId: number, replyToMessageId?: number) {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ –ø–ª—é—à–∫–∏
      const message = await this.sendMessage(
        '<i>–í–∞–∂–Ω–æ –∑–∞–º–µ—á–∞—Ç—å –∫–∞–∂–¥—É—é –º–µ–ª–∫—É—é —Ä–∞–¥–æ—Å—Ç—å üòç</i>\n\n' +
        '2. <b>–ß—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ –±—ã–ª–æ —Å–µ–≥–æ–¥–Ω—è?</b>\n' +
        '–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –≤—Å–ø–æ–º–Ω–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–µ–π <i>(—á–µ–º –±–æ–ª—å—à–µ, —Ç–µ–º –ª—É—á—à–µ - –º–∏–Ω–∏–º—É–º 3)</i>',
        replyToMessageId
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      updateInteractivePostState(channelMessageId, 'deep_waiting_positive', {
        bot_task2_message_id: message.message_id
      });
      
      updateTaskStatus(channelMessageId, 2, false); // –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ 2 –Ω–∞—á–∞—Ç–æ

    } catch (error) {
      botLogger.error({ error, channelMessageId }, '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–ª—é—à–∫–∞–º');
      throw error;
    }
  }

  // –ü–æ–∫–∞–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
  async showFilters(channelMessageId: number, userId: number, replyToMessageId?: number) {
    try {
      // –§–∏–ª—å—Ç—Ä—ã –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è —Å file_id –∫–∞—Ä—Ç–∏–Ω–æ–∫
      const FILTERS = [
        // –ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ (6 –∫–∞—Ä—Ç–∏–Ω–æ–∫)
        {
          file_id: 'AgACAgIAAxkBAAIF9Wi0ik4AAQHIlLvKfXIAAV9ZsRbvNCAAArn2MRsZmqhJLZzMKg8PIeUBAAMCAAN5AAM2BA',
          title: '–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∏–∑–∞—Ü–∏—è',
          description: '–û–∂–∏–¥–∞–Ω–∏–µ —Ö—É–¥—à–µ–≥–æ –∏—Å—Ö–æ–¥–∞ —Å–æ–±—ã—Ç–∏–π'
        },
        {
          file_id: 'AgACAgIAAxkBAAIF9mi0ik4E7-2nFVd2jxOFJ-ZikrU-AAK79jEbGZqoSXALrK3ECk06AQADAgADeQADNgQ',
          title: '–ß—Ç–µ–Ω–∏–µ –º—ã—Å–ª–µ–π',
          description: '–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–Ω–∞–µ–º –æ —á–µ–º –¥—É–º–∞—é—Ç –¥—Ä—É–≥–∏–µ'
        },
        {
          file_id: 'AgACAgIAAxkBAAIF92i0ik6EM37s378C9rn_NwVuQpO_AAK89jEbGZqoSdGUmrDZmTnYAQADAgADeQADNgQ',
          title: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è',
          description: '–ë–µ—Ä–µ–º –Ω–∞ —Å–µ–±—è –≤–∏–Ω—É –∑–∞ —Ç–æ, —á—Ç–æ –æ—Ç –Ω–∞—Å –Ω–µ –∑–∞–≤–∏—Å–∏—Ç'
        },
        {
          file_id: 'AgACAgIAAxkBAAIF-Gi0ik6gE3_DCCiyYOEAAbZEfBOAYgACvfYxGxmaqEk_b9ajzx_t9gEAAwIAA3kAAzYE',
          title: '–û–±–æ–±—â–µ–Ω–∏–µ',
          description: '–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞ "–≤—Å–µ–≥–¥–∞", "–Ω–∏–∫–æ–≥–¥–∞", "–≤—Å–µ", "–Ω–∏–∫—Ç–æ"'
        },
        {
          file_id: 'AgACAgIAAxkBAAIF-Wi0ik6K52oJUb1sMl7jmLtGagqrAAK_9jEbGZqoSaMTOzeV3bhJAQADAgADeQADNgQ',
          title: '–ß–µ—Ä–Ω–æ-–±–µ–ª–æ–µ –º—ã—à–ª–µ–Ω–∏–µ',
          description: '–í–∏–¥–∏–º —Ç–æ–ª—å–∫–æ –∫—Ä–∞–π–Ω–æ—Å—Ç–∏ –±–µ–∑ –ø–æ–ª—É—Ç–æ–Ω–æ–≤'
        },
        {
          file_id: 'AgACAgIAAxkBAAIF-mi0ik4BxNIBSe8o_EGt3UVc5DlkAALA9jEbGZqoSX1oJUCbeGbNAQADAgADeQADNgQ',
          title: '–ü—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ/–ø—Ä–µ—É–º–µ–Ω—å—à–µ–Ω–∏–µ',
          description: '–ò—Å–∫–∞–∂–∞–µ–º –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏–π'
        },
        // –í—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ (6 –∫–∞—Ä—Ç–∏–Ω–æ–∫)
        {
          file_id: 'AgACAgIAAxkBAAIF-2i0ik5f4f_vE8HVGhsyuSdXjF4TAALB9jEbGZqoSaSf-vW4Y8h_AQADAgADeQADNgQ',
          title: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ',
          description: '–°—á–∏—Ç–∞–µ–º —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –∏—Å—Ç–∏–Ω—ã'
        },
        {
          file_id: 'AgACAgIAAxkBAAIF_Gi0ik6DrRIJ2oQCdcvnczn5Zxf5AALC9jEbGZqoSYwEMIOSyT4bAQADAgADeQADNgQ',
          title: '–ù–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ —è—Ä–ª—ã–∫–æ–≤',
          description: '–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å–µ–±–µ –∏–ª–∏ –¥—Ä—É–≥–∏–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏'
        },
        {
          file_id: 'AgACAgIAAxkBAAIF_Wi0ik4syr_yJd5IEvaSap4RgjXlAALD9jEbGZqoSRhu44-4826XAQADAgADeQADNgQ',
          title: '–î–æ–ª–∂–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ',
          description: '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–µ–±–µ –∏ –¥—Ä—É–≥–∏–º —á–µ—Ä–µ–∑ "–¥–æ–ª–∂–µ–Ω", "–æ–±—è–∑–∞–Ω"'
        },
        {
          file_id: 'AgACAgIAAxkBAAIF_mi0ik4QDysr0EUcE7ddA4G0bTOVAALE9jEbGZqoSQY3_YlELhp-AQADAgADeQADNgQ',
          title: '–ú–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä',
          description: '–§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–µ'
        },
        {
          file_id: 'AgACAgIAAxkBAAIF82i0ij6rJr8gvBFcERakN9mamHr_AAK69jEbGZqoSdBi8J2JaUl9AQADAgADeQADNgQ',
          title: '–û–±–µ—Å—Ü–µ–Ω–∏–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–∞',
          description: '–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ø—Ä–µ—É–º–µ–Ω—å—à–∞–µ–º —Ö–æ—Ä–æ—à–µ–µ'
        },
        {
          file_id: 'AgACAgIAAxkBAAIF9Gi0ij7wfJoLrBApRaBXfRSeKB2DAAK-9jEbGZqoSYqi4i1O6U0lAQADAgADeQADNgQ',
          title: '–¢—É–Ω–Ω–µ–ª—å–Ω–æ–µ –≤–∏–¥–µ–Ω–∏–µ',
          description: '–í–∏–¥–∏–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞—Å–ø–µ–∫—Ç —Å–∏—Ç—É–∞—Ü–∏–∏'
        }
      ];

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É –∏–∑ 6 –∫–∞—Ä—Ç–∏–Ω–æ–∫
      const firstGroup = FILTERS.slice(0, 6).map(filter => ({
        type: 'photo' as const,
        media: filter.file_id
      }));

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ç–æ—Ä—É—é –≥—Ä—É–ø–ø—É –∏–∑ 6 –∫–∞—Ä—Ç–∏–Ω–æ–∫
      const secondGroup = FILTERS.slice(6, 12).map(filter => ({
        type: 'photo' as const,
        media: filter.file_id
      }));

      const sendOptions: any = {};
      if (replyToMessageId) {
        sendOptions.reply_to_message_id = replyToMessageId;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É
      await this.bot.telegram.sendMediaGroup(this.chatId, firstGroup, sendOptions);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –≥—Ä—É–ø–ø—É
      await this.bot.telegram.sendMediaGroup(this.chatId, secondGroup, sendOptions);

      botLogger.info({ channelMessageId, userId }, '–§–∏–ª—å—Ç—Ä—ã –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã');
      
    } catch (error) {
      botLogger.error({ error, channelMessageId }, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è');
      // Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
      await this.showFiltersCards(channelMessageId, userId, replyToMessageId);
    }
  }
}