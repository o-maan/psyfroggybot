import express, { Request, Response } from 'express';
import { Telegraf } from 'telegraf';
import { CalendarService } from '../calendar';
import { Scheduler } from '../scheduler';
import { saveUserToken } from '../db';
import { botLogger, logger } from '../logger';

// --- Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Google OAuth2 callback –∏ REST ---
export function createOAuthServer(bot: Telegraf, calendarService: CalendarService, scheduler: Scheduler) {
  const restServ = express();
  const SERVER_PORT = process.env.SERVER_PORT || process.env.PORT || 3456;
  // const TELEGRAM_WEBHOOK_PORT = process.env.TELEGRAM_WEBHOOK_PORT || 8443;
  // const TELEGRAM_WEBHOOK_PATH =
  //   process.env.TELEGRAM_WEBHOOK_PATH || "/telegraf/webhook";
  // const TELEGRAM_WEBHOOK_URL =
  //   process.env.TELEGRAM_WEBHOOK_URL ||
  //   `https://${
  //     process.env.FLY_APP_NAME || "psyfroggybot-np0edq"
  //   }.fly.dev:${TELEGRAM_WEBHOOK_PORT}${TELEGRAM_WEBHOOK_PATH}`;

  // --- Telegraf webhook ---
  // bot.telegram.setWebhook(TELEGRAM_WEBHOOK_URL);
  // restServ.use(TELEGRAM_WEBHOOK_PATH, bot.webhookCallback(TELEGRAM_WEBHOOK_PATH));

  restServ.use(express.json());

  restServ.all('/oauth2callback', async (req: Request, res: Response) => {
    const code = req.query.code as string;
    const state = req.query.state as string;
    const chatId = Number(state);
    botLogger.debug({ chatId, codeLength: code?.length || 0 }, `OAuth callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
    if (!code) {
      res.status(400).send('No code provided');
      return;
    }
    if (!chatId || isNaN(chatId)) {
      res.status(400).send('Invalid chat ID in state parameter');
      return;
    }
    try {
      const tokens = await calendarService.getToken(code);
      saveUserToken(chatId, JSON.stringify(tokens));
      res.send('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É.');
      // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
      logger.info({ chatId, code: code.substring(0, 10) + '...' }, 'OAuth —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω');
      await bot.telegram.sendMessage(chatId, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É.');
    } catch (e) {
      const error = e as Error;
      botLogger.error({ error: error.message, stack: error.stack, chatId }, '–û—à–∏–±–∫–∞ OAuth —Ç–æ–∫–µ–Ω–∞');
      res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.');
    }
  });

  restServ.get('/status', (req: Request, res: Response) => {
    res.json({ status: 'up' });
  });

  restServ.all('/sendDailyMessage', async (req: Request, res: Response) => {
    const adminChatId = Number(process.env.ADMIN_CHAT_ID || 0);
    try {
      logger.info(
        {
          method: req.method,
          ip: req.ip,
          userAgent: req.headers['user-agent'],
        },
        'REST API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—á–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É'
      );

      await scheduler.sendDailyMessagesToAll(adminChatId);

      // –ï—Å–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–∫–∏
      // –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç
      res
        .status(200)
        .send(`–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${scheduler['users'].size}, –∞–¥–º–∏–Ω: ${adminChatId}`);
      logger.info({ usersCount: scheduler['users'].size }, 'REST API: –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
    } catch (e) {
      const error = e as Error;
      botLogger.error({ error: error.message, stack: error.stack }, '–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ REST API');
      res.status(500).send(String(error));
    }
  });

  // 404
  restServ.all('/', (req: Request, res: Response) => {
    res.status(404).send('Not found');
  });

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
  restServ.listen(SERVER_PORT, () => {
    logger.info({ port: SERVER_PORT }, `üåê OAuth/REST —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${SERVER_PORT}`);
  });

  return restServ;
}